services:
  database:
    build:
      context: ./DATABASE
      dockerfile: dockerfile
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    volumes:
      - ./VOLUMES/database:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network

  git-server:
    build:
      context: ./GIT-SERVER
      dockerfile: Dockerfile
    volumes:
      - ./VOLUMES/repositorys:/srv/git
    ports:
      - "8080:80"
    networks:
      - app-network

  backend:
    build:
      context: ./WEB/BACKEND
      dockerfile: Dockerfile
    working_dir: /app
    volumes:
      - ./WEB/BACKEND/CODE:/app
      - ./VOLUMES/repositorys:/srv/git
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
    depends_on:
      - database
      - git-server
      - otel-collector
    networks:
      - app-network

  frontend:
    build:
      context: ./WEB/FRONTEND
      dockerfile: Dockerfile
    working_dir: /app
    volumes:
      - ./WEB/FRONTEND/CODE:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
    depends_on:
      - backend
    networks:
      - app-network

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    volumes:
      - ./otel-config.yaml:/etc/otelcol-contrib/config.yaml
    command:
      - --config=/etc/otelcol-contrib/config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "9464:9464"   # Prometheus scrape endpoint
    depends_on:
      - jaeger
      - prometheus
    networks:
      - app-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger Collector HTTP
      - "14250:14250"  # Jaeger Collector gRPC
      - "6831:6831/udp" # Jaeger Agent UDP (optional)
      - "6832:6832/udp" # Jaeger Agent UDP (optional)
    networks:
      - app-network

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - app-network

volumes:
  database:
  repositorys:
  backend_cache:
  grafana-data:

networks:
  app-network:
    driver: bridge
