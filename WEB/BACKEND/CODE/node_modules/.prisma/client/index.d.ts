
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model repository
 * 
 */
export type repository = $Result.DefaultSelection<Prisma.$repositoryPayload>
/**
 * Model repository_access
 * 
 */
export type repository_access = $Result.DefaultSelection<Prisma.$repository_accessPayload>
/**
 * Model issue
 * 
 */
export type issue = $Result.DefaultSelection<Prisma.$issuePayload>
/**
 * Model pull_request
 * 
 */
export type pull_request = $Result.DefaultSelection<Prisma.$pull_requestPayload>
/**
 * Model issue_comment
 * 
 */
export type issue_comment = $Result.DefaultSelection<Prisma.$issue_commentPayload>
/**
 * Model pull_request_comment
 * 
 */
export type pull_request_comment = $Result.DefaultSelection<Prisma.$pull_request_commentPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const RepositoryAccess: {
  view: 'view',
  edit: 'edit'
};

export type RepositoryAccess = (typeof RepositoryAccess)[keyof typeof RepositoryAccess]


export const PullRequestStatus: {
  OPEN: 'OPEN',
  CLOSED: 'CLOSED',
  MERGED: 'MERGED'
};

export type PullRequestStatus = (typeof PullRequestStatus)[keyof typeof PullRequestStatus]

}

export type RepositoryAccess = $Enums.RepositoryAccess

export const RepositoryAccess: typeof $Enums.RepositoryAccess

export type PullRequestStatus = $Enums.PullRequestStatus

export const PullRequestStatus: typeof $Enums.PullRequestStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.repository`: Exposes CRUD operations for the **repository** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Repositories
    * const repositories = await prisma.repository.findMany()
    * ```
    */
  get repository(): Prisma.repositoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.repository_access`: Exposes CRUD operations for the **repository_access** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Repository_accesses
    * const repository_accesses = await prisma.repository_access.findMany()
    * ```
    */
  get repository_access(): Prisma.repository_accessDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.issue`: Exposes CRUD operations for the **issue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Issues
    * const issues = await prisma.issue.findMany()
    * ```
    */
  get issue(): Prisma.issueDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pull_request`: Exposes CRUD operations for the **pull_request** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pull_requests
    * const pull_requests = await prisma.pull_request.findMany()
    * ```
    */
  get pull_request(): Prisma.pull_requestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.issue_comment`: Exposes CRUD operations for the **issue_comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Issue_comments
    * const issue_comments = await prisma.issue_comment.findMany()
    * ```
    */
  get issue_comment(): Prisma.issue_commentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pull_request_comment`: Exposes CRUD operations for the **pull_request_comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pull_request_comments
    * const pull_request_comments = await prisma.pull_request_comment.findMany()
    * ```
    */
  get pull_request_comment(): Prisma.pull_request_commentDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    repository: 'repository',
    repository_access: 'repository_access',
    issue: 'issue',
    pull_request: 'pull_request',
    issue_comment: 'issue_comment',
    pull_request_comment: 'pull_request_comment'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "users" | "repository" | "repository_access" | "issue" | "pull_request" | "issue_comment" | "pull_request_comment"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.usersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      repository: {
        payload: Prisma.$repositoryPayload<ExtArgs>
        fields: Prisma.repositoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.repositoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repositoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.repositoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repositoryPayload>
          }
          findFirst: {
            args: Prisma.repositoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repositoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.repositoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repositoryPayload>
          }
          findMany: {
            args: Prisma.repositoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repositoryPayload>[]
          }
          create: {
            args: Prisma.repositoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repositoryPayload>
          }
          createMany: {
            args: Prisma.repositoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.repositoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repositoryPayload>[]
          }
          delete: {
            args: Prisma.repositoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repositoryPayload>
          }
          update: {
            args: Prisma.repositoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repositoryPayload>
          }
          deleteMany: {
            args: Prisma.repositoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.repositoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.repositoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repositoryPayload>[]
          }
          upsert: {
            args: Prisma.repositoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repositoryPayload>
          }
          aggregate: {
            args: Prisma.RepositoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRepository>
          }
          groupBy: {
            args: Prisma.repositoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<RepositoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.repositoryCountArgs<ExtArgs>
            result: $Utils.Optional<RepositoryCountAggregateOutputType> | number
          }
        }
      }
      repository_access: {
        payload: Prisma.$repository_accessPayload<ExtArgs>
        fields: Prisma.repository_accessFieldRefs
        operations: {
          findUnique: {
            args: Prisma.repository_accessFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repository_accessPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.repository_accessFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repository_accessPayload>
          }
          findFirst: {
            args: Prisma.repository_accessFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repository_accessPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.repository_accessFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repository_accessPayload>
          }
          findMany: {
            args: Prisma.repository_accessFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repository_accessPayload>[]
          }
          create: {
            args: Prisma.repository_accessCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repository_accessPayload>
          }
          createMany: {
            args: Prisma.repository_accessCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.repository_accessCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repository_accessPayload>[]
          }
          delete: {
            args: Prisma.repository_accessDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repository_accessPayload>
          }
          update: {
            args: Prisma.repository_accessUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repository_accessPayload>
          }
          deleteMany: {
            args: Prisma.repository_accessDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.repository_accessUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.repository_accessUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repository_accessPayload>[]
          }
          upsert: {
            args: Prisma.repository_accessUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$repository_accessPayload>
          }
          aggregate: {
            args: Prisma.Repository_accessAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRepository_access>
          }
          groupBy: {
            args: Prisma.repository_accessGroupByArgs<ExtArgs>
            result: $Utils.Optional<Repository_accessGroupByOutputType>[]
          }
          count: {
            args: Prisma.repository_accessCountArgs<ExtArgs>
            result: $Utils.Optional<Repository_accessCountAggregateOutputType> | number
          }
        }
      }
      issue: {
        payload: Prisma.$issuePayload<ExtArgs>
        fields: Prisma.issueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.issueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issuePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.issueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issuePayload>
          }
          findFirst: {
            args: Prisma.issueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issuePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.issueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issuePayload>
          }
          findMany: {
            args: Prisma.issueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issuePayload>[]
          }
          create: {
            args: Prisma.issueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issuePayload>
          }
          createMany: {
            args: Prisma.issueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.issueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issuePayload>[]
          }
          delete: {
            args: Prisma.issueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issuePayload>
          }
          update: {
            args: Prisma.issueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issuePayload>
          }
          deleteMany: {
            args: Prisma.issueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.issueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.issueUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issuePayload>[]
          }
          upsert: {
            args: Prisma.issueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issuePayload>
          }
          aggregate: {
            args: Prisma.IssueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIssue>
          }
          groupBy: {
            args: Prisma.issueGroupByArgs<ExtArgs>
            result: $Utils.Optional<IssueGroupByOutputType>[]
          }
          count: {
            args: Prisma.issueCountArgs<ExtArgs>
            result: $Utils.Optional<IssueCountAggregateOutputType> | number
          }
        }
      }
      pull_request: {
        payload: Prisma.$pull_requestPayload<ExtArgs>
        fields: Prisma.pull_requestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.pull_requestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_requestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.pull_requestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_requestPayload>
          }
          findFirst: {
            args: Prisma.pull_requestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_requestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.pull_requestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_requestPayload>
          }
          findMany: {
            args: Prisma.pull_requestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_requestPayload>[]
          }
          create: {
            args: Prisma.pull_requestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_requestPayload>
          }
          createMany: {
            args: Prisma.pull_requestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.pull_requestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_requestPayload>[]
          }
          delete: {
            args: Prisma.pull_requestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_requestPayload>
          }
          update: {
            args: Prisma.pull_requestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_requestPayload>
          }
          deleteMany: {
            args: Prisma.pull_requestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.pull_requestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.pull_requestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_requestPayload>[]
          }
          upsert: {
            args: Prisma.pull_requestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_requestPayload>
          }
          aggregate: {
            args: Prisma.Pull_requestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePull_request>
          }
          groupBy: {
            args: Prisma.pull_requestGroupByArgs<ExtArgs>
            result: $Utils.Optional<Pull_requestGroupByOutputType>[]
          }
          count: {
            args: Prisma.pull_requestCountArgs<ExtArgs>
            result: $Utils.Optional<Pull_requestCountAggregateOutputType> | number
          }
        }
      }
      issue_comment: {
        payload: Prisma.$issue_commentPayload<ExtArgs>
        fields: Prisma.issue_commentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.issue_commentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issue_commentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.issue_commentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issue_commentPayload>
          }
          findFirst: {
            args: Prisma.issue_commentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issue_commentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.issue_commentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issue_commentPayload>
          }
          findMany: {
            args: Prisma.issue_commentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issue_commentPayload>[]
          }
          create: {
            args: Prisma.issue_commentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issue_commentPayload>
          }
          createMany: {
            args: Prisma.issue_commentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.issue_commentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issue_commentPayload>[]
          }
          delete: {
            args: Prisma.issue_commentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issue_commentPayload>
          }
          update: {
            args: Prisma.issue_commentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issue_commentPayload>
          }
          deleteMany: {
            args: Prisma.issue_commentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.issue_commentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.issue_commentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issue_commentPayload>[]
          }
          upsert: {
            args: Prisma.issue_commentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$issue_commentPayload>
          }
          aggregate: {
            args: Prisma.Issue_commentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIssue_comment>
          }
          groupBy: {
            args: Prisma.issue_commentGroupByArgs<ExtArgs>
            result: $Utils.Optional<Issue_commentGroupByOutputType>[]
          }
          count: {
            args: Prisma.issue_commentCountArgs<ExtArgs>
            result: $Utils.Optional<Issue_commentCountAggregateOutputType> | number
          }
        }
      }
      pull_request_comment: {
        payload: Prisma.$pull_request_commentPayload<ExtArgs>
        fields: Prisma.pull_request_commentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.pull_request_commentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_request_commentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.pull_request_commentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_request_commentPayload>
          }
          findFirst: {
            args: Prisma.pull_request_commentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_request_commentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.pull_request_commentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_request_commentPayload>
          }
          findMany: {
            args: Prisma.pull_request_commentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_request_commentPayload>[]
          }
          create: {
            args: Prisma.pull_request_commentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_request_commentPayload>
          }
          createMany: {
            args: Prisma.pull_request_commentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.pull_request_commentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_request_commentPayload>[]
          }
          delete: {
            args: Prisma.pull_request_commentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_request_commentPayload>
          }
          update: {
            args: Prisma.pull_request_commentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_request_commentPayload>
          }
          deleteMany: {
            args: Prisma.pull_request_commentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.pull_request_commentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.pull_request_commentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_request_commentPayload>[]
          }
          upsert: {
            args: Prisma.pull_request_commentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pull_request_commentPayload>
          }
          aggregate: {
            args: Prisma.Pull_request_commentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePull_request_comment>
          }
          groupBy: {
            args: Prisma.pull_request_commentGroupByArgs<ExtArgs>
            result: $Utils.Optional<Pull_request_commentGroupByOutputType>[]
          }
          count: {
            args: Prisma.pull_request_commentCountArgs<ExtArgs>
            result: $Utils.Optional<Pull_request_commentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    users?: usersOmit
    repository?: repositoryOmit
    repository_access?: repository_accessOmit
    issue?: issueOmit
    pull_request?: pull_requestOmit
    issue_comment?: issue_commentOmit
    pull_request_comment?: pull_request_commentOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    repository: number
    repository_access: number
    issue: number
    pull_request: number
    issue_comment: number
    pull_request_comment: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repository?: boolean | UsersCountOutputTypeCountRepositoryArgs
    repository_access?: boolean | UsersCountOutputTypeCountRepository_accessArgs
    issue?: boolean | UsersCountOutputTypeCountIssueArgs
    pull_request?: boolean | UsersCountOutputTypeCountPull_requestArgs
    issue_comment?: boolean | UsersCountOutputTypeCountIssue_commentArgs
    pull_request_comment?: boolean | UsersCountOutputTypeCountPull_request_commentArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountRepositoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: repositoryWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountRepository_accessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: repository_accessWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountIssueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: issueWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountPull_requestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: pull_requestWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountIssue_commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: issue_commentWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountPull_request_commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: pull_request_commentWhereInput
  }


  /**
   * Count Type RepositoryCountOutputType
   */

  export type RepositoryCountOutputType = {
    forks: number
    access: number
    issue: number
    pull_request: number
    source_pull_requests: number
    target_pull_requests: number
  }

  export type RepositoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    forks?: boolean | RepositoryCountOutputTypeCountForksArgs
    access?: boolean | RepositoryCountOutputTypeCountAccessArgs
    issue?: boolean | RepositoryCountOutputTypeCountIssueArgs
    pull_request?: boolean | RepositoryCountOutputTypeCountPull_requestArgs
    source_pull_requests?: boolean | RepositoryCountOutputTypeCountSource_pull_requestsArgs
    target_pull_requests?: boolean | RepositoryCountOutputTypeCountTarget_pull_requestsArgs
  }

  // Custom InputTypes
  /**
   * RepositoryCountOutputType without action
   */
  export type RepositoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepositoryCountOutputType
     */
    select?: RepositoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RepositoryCountOutputType without action
   */
  export type RepositoryCountOutputTypeCountForksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: repositoryWhereInput
  }

  /**
   * RepositoryCountOutputType without action
   */
  export type RepositoryCountOutputTypeCountAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: repository_accessWhereInput
  }

  /**
   * RepositoryCountOutputType without action
   */
  export type RepositoryCountOutputTypeCountIssueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: issueWhereInput
  }

  /**
   * RepositoryCountOutputType without action
   */
  export type RepositoryCountOutputTypeCountPull_requestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: pull_requestWhereInput
  }

  /**
   * RepositoryCountOutputType without action
   */
  export type RepositoryCountOutputTypeCountSource_pull_requestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: pull_requestWhereInput
  }

  /**
   * RepositoryCountOutputType without action
   */
  export type RepositoryCountOutputTypeCountTarget_pull_requestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: pull_requestWhereInput
  }


  /**
   * Count Type IssueCountOutputType
   */

  export type IssueCountOutputType = {
    issue_comment: number
  }

  export type IssueCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    issue_comment?: boolean | IssueCountOutputTypeCountIssue_commentArgs
  }

  // Custom InputTypes
  /**
   * IssueCountOutputType without action
   */
  export type IssueCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IssueCountOutputType
     */
    select?: IssueCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IssueCountOutputType without action
   */
  export type IssueCountOutputTypeCountIssue_commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: issue_commentWhereInput
  }


  /**
   * Count Type Pull_requestCountOutputType
   */

  export type Pull_requestCountOutputType = {
    pull_request_comment: number
  }

  export type Pull_requestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pull_request_comment?: boolean | Pull_requestCountOutputTypeCountPull_request_commentArgs
  }

  // Custom InputTypes
  /**
   * Pull_requestCountOutputType without action
   */
  export type Pull_requestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pull_requestCountOutputType
     */
    select?: Pull_requestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Pull_requestCountOutputType without action
   */
  export type Pull_requestCountOutputTypeCountPull_request_commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: pull_request_commentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    contribution_count: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    contribution_count: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password_hash: string | null
    bio: string | null
    gitCliPassword: string | null
    avatar_path: string | null
    is_admin: boolean | null
    confirmed: boolean | null
    twoFactorSecret: string | null
    twoFactorEnabled: boolean | null
    contribution_count: number | null
    suspended: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password_hash: string | null
    bio: string | null
    gitCliPassword: string | null
    avatar_path: string | null
    is_admin: boolean | null
    confirmed: boolean | null
    twoFactorSecret: string | null
    twoFactorEnabled: boolean | null
    contribution_count: number | null
    suspended: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password_hash: number
    bio: number
    gitCliPassword: number
    avatar_path: number
    is_admin: number
    confirmed: number
    twoFactorSecret: number
    twoFactorEnabled: number
    contribution_count: number
    suspended: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    contribution_count?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    contribution_count?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password_hash?: true
    bio?: true
    gitCliPassword?: true
    avatar_path?: true
    is_admin?: true
    confirmed?: true
    twoFactorSecret?: true
    twoFactorEnabled?: true
    contribution_count?: true
    suspended?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password_hash?: true
    bio?: true
    gitCliPassword?: true
    avatar_path?: true
    is_admin?: true
    confirmed?: true
    twoFactorSecret?: true
    twoFactorEnabled?: true
    contribution_count?: true
    suspended?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password_hash?: true
    bio?: true
    gitCliPassword?: true
    avatar_path?: true
    is_admin?: true
    confirmed?: true
    twoFactorSecret?: true
    twoFactorEnabled?: true
    contribution_count?: true
    suspended?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    username: string
    email: string
    password_hash: string
    bio: string | null
    gitCliPassword: string | null
    avatar_path: string | null
    is_admin: boolean | null
    confirmed: boolean | null
    twoFactorSecret: string | null
    twoFactorEnabled: boolean
    contribution_count: number | null
    suspended: boolean
    created_at: Date
    updated_at: Date
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password_hash?: boolean
    bio?: boolean
    gitCliPassword?: boolean
    avatar_path?: boolean
    is_admin?: boolean
    confirmed?: boolean
    twoFactorSecret?: boolean
    twoFactorEnabled?: boolean
    contribution_count?: boolean
    suspended?: boolean
    created_at?: boolean
    updated_at?: boolean
    repository?: boolean | users$repositoryArgs<ExtArgs>
    repository_access?: boolean | users$repository_accessArgs<ExtArgs>
    issue?: boolean | users$issueArgs<ExtArgs>
    pull_request?: boolean | users$pull_requestArgs<ExtArgs>
    issue_comment?: boolean | users$issue_commentArgs<ExtArgs>
    pull_request_comment?: boolean | users$pull_request_commentArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password_hash?: boolean
    bio?: boolean
    gitCliPassword?: boolean
    avatar_path?: boolean
    is_admin?: boolean
    confirmed?: boolean
    twoFactorSecret?: boolean
    twoFactorEnabled?: boolean
    contribution_count?: boolean
    suspended?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password_hash?: boolean
    bio?: boolean
    gitCliPassword?: boolean
    avatar_path?: boolean
    is_admin?: boolean
    confirmed?: boolean
    twoFactorSecret?: boolean
    twoFactorEnabled?: boolean
    contribution_count?: boolean
    suspended?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    password_hash?: boolean
    bio?: boolean
    gitCliPassword?: boolean
    avatar_path?: boolean
    is_admin?: boolean
    confirmed?: boolean
    twoFactorSecret?: boolean
    twoFactorEnabled?: boolean
    contribution_count?: boolean
    suspended?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "email" | "password_hash" | "bio" | "gitCliPassword" | "avatar_path" | "is_admin" | "confirmed" | "twoFactorSecret" | "twoFactorEnabled" | "contribution_count" | "suspended" | "created_at" | "updated_at", ExtArgs["result"]["users"]>
  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repository?: boolean | users$repositoryArgs<ExtArgs>
    repository_access?: boolean | users$repository_accessArgs<ExtArgs>
    issue?: boolean | users$issueArgs<ExtArgs>
    pull_request?: boolean | users$pull_requestArgs<ExtArgs>
    issue_comment?: boolean | users$issue_commentArgs<ExtArgs>
    pull_request_comment?: boolean | users$pull_request_commentArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type usersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type usersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      repository: Prisma.$repositoryPayload<ExtArgs>[]
      repository_access: Prisma.$repository_accessPayload<ExtArgs>[]
      issue: Prisma.$issuePayload<ExtArgs>[]
      pull_request: Prisma.$pull_requestPayload<ExtArgs>[]
      issue_comment: Prisma.$issue_commentPayload<ExtArgs>[]
      pull_request_comment: Prisma.$pull_request_commentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      email: string
      password_hash: string
      bio: string | null
      gitCliPassword: string | null
      avatar_path: string | null
      is_admin: boolean | null
      confirmed: boolean | null
      twoFactorSecret: string | null
      twoFactorEnabled: boolean
      contribution_count: number | null
      suspended: boolean
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {usersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usersCreateManyAndReturnArgs>(args?: SelectSubset<T, usersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {usersUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends usersUpdateManyAndReturnArgs>(args: SelectSubset<T, usersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    repository<T extends users$repositoryArgs<ExtArgs> = {}>(args?: Subset<T, users$repositoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repositoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    repository_access<T extends users$repository_accessArgs<ExtArgs> = {}>(args?: Subset<T, users$repository_accessArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repository_accessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    issue<T extends users$issueArgs<ExtArgs> = {}>(args?: Subset<T, users$issueArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$issuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pull_request<T extends users$pull_requestArgs<ExtArgs> = {}>(args?: Subset<T, users$pull_requestArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pull_requestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    issue_comment<T extends users$issue_commentArgs<ExtArgs> = {}>(args?: Subset<T, users$issue_commentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$issue_commentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pull_request_comment<T extends users$pull_request_commentArgs<ExtArgs> = {}>(args?: Subset<T, users$pull_request_commentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pull_request_commentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'Int'>
    readonly username: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly password_hash: FieldRef<"users", 'String'>
    readonly bio: FieldRef<"users", 'String'>
    readonly gitCliPassword: FieldRef<"users", 'String'>
    readonly avatar_path: FieldRef<"users", 'String'>
    readonly is_admin: FieldRef<"users", 'Boolean'>
    readonly confirmed: FieldRef<"users", 'Boolean'>
    readonly twoFactorSecret: FieldRef<"users", 'String'>
    readonly twoFactorEnabled: FieldRef<"users", 'Boolean'>
    readonly contribution_count: FieldRef<"users", 'Int'>
    readonly suspended: FieldRef<"users", 'Boolean'>
    readonly created_at: FieldRef<"users", 'DateTime'>
    readonly updated_at: FieldRef<"users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users createManyAndReturn
   */
  export type usersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users updateManyAndReturn
   */
  export type usersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * users.repository
   */
  export type users$repositoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository
     */
    select?: repositorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository
     */
    omit?: repositoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repositoryInclude<ExtArgs> | null
    where?: repositoryWhereInput
    orderBy?: repositoryOrderByWithRelationInput | repositoryOrderByWithRelationInput[]
    cursor?: repositoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RepositoryScalarFieldEnum | RepositoryScalarFieldEnum[]
  }

  /**
   * users.repository_access
   */
  export type users$repository_accessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository_access
     */
    select?: repository_accessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository_access
     */
    omit?: repository_accessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repository_accessInclude<ExtArgs> | null
    where?: repository_accessWhereInput
    orderBy?: repository_accessOrderByWithRelationInput | repository_accessOrderByWithRelationInput[]
    cursor?: repository_accessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Repository_accessScalarFieldEnum | Repository_accessScalarFieldEnum[]
  }

  /**
   * users.issue
   */
  export type users$issueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue
     */
    select?: issueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue
     */
    omit?: issueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issueInclude<ExtArgs> | null
    where?: issueWhereInput
    orderBy?: issueOrderByWithRelationInput | issueOrderByWithRelationInput[]
    cursor?: issueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IssueScalarFieldEnum | IssueScalarFieldEnum[]
  }

  /**
   * users.pull_request
   */
  export type users$pull_requestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request
     */
    select?: pull_requestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request
     */
    omit?: pull_requestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_requestInclude<ExtArgs> | null
    where?: pull_requestWhereInput
    orderBy?: pull_requestOrderByWithRelationInput | pull_requestOrderByWithRelationInput[]
    cursor?: pull_requestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Pull_requestScalarFieldEnum | Pull_requestScalarFieldEnum[]
  }

  /**
   * users.issue_comment
   */
  export type users$issue_commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue_comment
     */
    select?: issue_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue_comment
     */
    omit?: issue_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issue_commentInclude<ExtArgs> | null
    where?: issue_commentWhereInput
    orderBy?: issue_commentOrderByWithRelationInput | issue_commentOrderByWithRelationInput[]
    cursor?: issue_commentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Issue_commentScalarFieldEnum | Issue_commentScalarFieldEnum[]
  }

  /**
   * users.pull_request_comment
   */
  export type users$pull_request_commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request_comment
     */
    select?: pull_request_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request_comment
     */
    omit?: pull_request_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_request_commentInclude<ExtArgs> | null
    where?: pull_request_commentWhereInput
    orderBy?: pull_request_commentOrderByWithRelationInput | pull_request_commentOrderByWithRelationInput[]
    cursor?: pull_request_commentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Pull_request_commentScalarFieldEnum | Pull_request_commentScalarFieldEnum[]
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Model repository
   */

  export type AggregateRepository = {
    _count: RepositoryCountAggregateOutputType | null
    _avg: RepositoryAvgAggregateOutputType | null
    _sum: RepositorySumAggregateOutputType | null
    _min: RepositoryMinAggregateOutputType | null
    _max: RepositoryMaxAggregateOutputType | null
  }

  export type RepositoryAvgAggregateOutputType = {
    id: number | null
    owner_user_id: number | null
    parent_id: number | null
    forks_count: number | null
    pull_requests_count: number | null
  }

  export type RepositorySumAggregateOutputType = {
    id: number | null
    owner_user_id: number | null
    parent_id: number | null
    forks_count: number | null
    pull_requests_count: number | null
  }

  export type RepositoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    owner_user_id: number | null
    description: string | null
    is_private: boolean | null
    repoPath: string | null
    parent_id: number | null
    forked_at: Date | null
    created_at: Date | null
    updated_at: Date | null
    archived: boolean | null
    forks_count: number | null
    pull_requests_count: number | null
  }

  export type RepositoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    owner_user_id: number | null
    description: string | null
    is_private: boolean | null
    repoPath: string | null
    parent_id: number | null
    forked_at: Date | null
    created_at: Date | null
    updated_at: Date | null
    archived: boolean | null
    forks_count: number | null
    pull_requests_count: number | null
  }

  export type RepositoryCountAggregateOutputType = {
    id: number
    name: number
    owner_user_id: number
    description: number
    is_private: number
    repoPath: number
    parent_id: number
    forked_at: number
    created_at: number
    updated_at: number
    archived: number
    forks_count: number
    pull_requests_count: number
    _all: number
  }


  export type RepositoryAvgAggregateInputType = {
    id?: true
    owner_user_id?: true
    parent_id?: true
    forks_count?: true
    pull_requests_count?: true
  }

  export type RepositorySumAggregateInputType = {
    id?: true
    owner_user_id?: true
    parent_id?: true
    forks_count?: true
    pull_requests_count?: true
  }

  export type RepositoryMinAggregateInputType = {
    id?: true
    name?: true
    owner_user_id?: true
    description?: true
    is_private?: true
    repoPath?: true
    parent_id?: true
    forked_at?: true
    created_at?: true
    updated_at?: true
    archived?: true
    forks_count?: true
    pull_requests_count?: true
  }

  export type RepositoryMaxAggregateInputType = {
    id?: true
    name?: true
    owner_user_id?: true
    description?: true
    is_private?: true
    repoPath?: true
    parent_id?: true
    forked_at?: true
    created_at?: true
    updated_at?: true
    archived?: true
    forks_count?: true
    pull_requests_count?: true
  }

  export type RepositoryCountAggregateInputType = {
    id?: true
    name?: true
    owner_user_id?: true
    description?: true
    is_private?: true
    repoPath?: true
    parent_id?: true
    forked_at?: true
    created_at?: true
    updated_at?: true
    archived?: true
    forks_count?: true
    pull_requests_count?: true
    _all?: true
  }

  export type RepositoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which repository to aggregate.
     */
    where?: repositoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of repositories to fetch.
     */
    orderBy?: repositoryOrderByWithRelationInput | repositoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: repositoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` repositories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` repositories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned repositories
    **/
    _count?: true | RepositoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RepositoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RepositorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RepositoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RepositoryMaxAggregateInputType
  }

  export type GetRepositoryAggregateType<T extends RepositoryAggregateArgs> = {
        [P in keyof T & keyof AggregateRepository]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRepository[P]>
      : GetScalarType<T[P], AggregateRepository[P]>
  }




  export type repositoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: repositoryWhereInput
    orderBy?: repositoryOrderByWithAggregationInput | repositoryOrderByWithAggregationInput[]
    by: RepositoryScalarFieldEnum[] | RepositoryScalarFieldEnum
    having?: repositoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RepositoryCountAggregateInputType | true
    _avg?: RepositoryAvgAggregateInputType
    _sum?: RepositorySumAggregateInputType
    _min?: RepositoryMinAggregateInputType
    _max?: RepositoryMaxAggregateInputType
  }

  export type RepositoryGroupByOutputType = {
    id: number
    name: string
    owner_user_id: number
    description: string | null
    is_private: boolean | null
    repoPath: string | null
    parent_id: number | null
    forked_at: Date | null
    created_at: Date
    updated_at: Date
    archived: boolean
    forks_count: number | null
    pull_requests_count: number | null
    _count: RepositoryCountAggregateOutputType | null
    _avg: RepositoryAvgAggregateOutputType | null
    _sum: RepositorySumAggregateOutputType | null
    _min: RepositoryMinAggregateOutputType | null
    _max: RepositoryMaxAggregateOutputType | null
  }

  type GetRepositoryGroupByPayload<T extends repositoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RepositoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RepositoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RepositoryGroupByOutputType[P]>
            : GetScalarType<T[P], RepositoryGroupByOutputType[P]>
        }
      >
    >


  export type repositorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    owner_user_id?: boolean
    description?: boolean
    is_private?: boolean
    repoPath?: boolean
    parent_id?: boolean
    forked_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    archived?: boolean
    forks_count?: boolean
    pull_requests_count?: boolean
    owner?: boolean | usersDefaultArgs<ExtArgs>
    parent?: boolean | repository$parentArgs<ExtArgs>
    forks?: boolean | repository$forksArgs<ExtArgs>
    access?: boolean | repository$accessArgs<ExtArgs>
    issue?: boolean | repository$issueArgs<ExtArgs>
    pull_request?: boolean | repository$pull_requestArgs<ExtArgs>
    source_pull_requests?: boolean | repository$source_pull_requestsArgs<ExtArgs>
    target_pull_requests?: boolean | repository$target_pull_requestsArgs<ExtArgs>
    _count?: boolean | RepositoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["repository"]>

  export type repositorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    owner_user_id?: boolean
    description?: boolean
    is_private?: boolean
    repoPath?: boolean
    parent_id?: boolean
    forked_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    archived?: boolean
    forks_count?: boolean
    pull_requests_count?: boolean
    owner?: boolean | usersDefaultArgs<ExtArgs>
    parent?: boolean | repository$parentArgs<ExtArgs>
  }, ExtArgs["result"]["repository"]>

  export type repositorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    owner_user_id?: boolean
    description?: boolean
    is_private?: boolean
    repoPath?: boolean
    parent_id?: boolean
    forked_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    archived?: boolean
    forks_count?: boolean
    pull_requests_count?: boolean
    owner?: boolean | usersDefaultArgs<ExtArgs>
    parent?: boolean | repository$parentArgs<ExtArgs>
  }, ExtArgs["result"]["repository"]>

  export type repositorySelectScalar = {
    id?: boolean
    name?: boolean
    owner_user_id?: boolean
    description?: boolean
    is_private?: boolean
    repoPath?: boolean
    parent_id?: boolean
    forked_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    archived?: boolean
    forks_count?: boolean
    pull_requests_count?: boolean
  }

  export type repositoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "owner_user_id" | "description" | "is_private" | "repoPath" | "parent_id" | "forked_at" | "created_at" | "updated_at" | "archived" | "forks_count" | "pull_requests_count", ExtArgs["result"]["repository"]>
  export type repositoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | usersDefaultArgs<ExtArgs>
    parent?: boolean | repository$parentArgs<ExtArgs>
    forks?: boolean | repository$forksArgs<ExtArgs>
    access?: boolean | repository$accessArgs<ExtArgs>
    issue?: boolean | repository$issueArgs<ExtArgs>
    pull_request?: boolean | repository$pull_requestArgs<ExtArgs>
    source_pull_requests?: boolean | repository$source_pull_requestsArgs<ExtArgs>
    target_pull_requests?: boolean | repository$target_pull_requestsArgs<ExtArgs>
    _count?: boolean | RepositoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type repositoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | usersDefaultArgs<ExtArgs>
    parent?: boolean | repository$parentArgs<ExtArgs>
  }
  export type repositoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | usersDefaultArgs<ExtArgs>
    parent?: boolean | repository$parentArgs<ExtArgs>
  }

  export type $repositoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "repository"
    objects: {
      owner: Prisma.$usersPayload<ExtArgs>
      parent: Prisma.$repositoryPayload<ExtArgs> | null
      forks: Prisma.$repositoryPayload<ExtArgs>[]
      access: Prisma.$repository_accessPayload<ExtArgs>[]
      issue: Prisma.$issuePayload<ExtArgs>[]
      pull_request: Prisma.$pull_requestPayload<ExtArgs>[]
      source_pull_requests: Prisma.$pull_requestPayload<ExtArgs>[]
      target_pull_requests: Prisma.$pull_requestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      owner_user_id: number
      description: string | null
      is_private: boolean | null
      repoPath: string | null
      parent_id: number | null
      forked_at: Date | null
      created_at: Date
      updated_at: Date
      archived: boolean
      forks_count: number | null
      pull_requests_count: number | null
    }, ExtArgs["result"]["repository"]>
    composites: {}
  }

  type repositoryGetPayload<S extends boolean | null | undefined | repositoryDefaultArgs> = $Result.GetResult<Prisma.$repositoryPayload, S>

  type repositoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<repositoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RepositoryCountAggregateInputType | true
    }

  export interface repositoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['repository'], meta: { name: 'repository' } }
    /**
     * Find zero or one Repository that matches the filter.
     * @param {repositoryFindUniqueArgs} args - Arguments to find a Repository
     * @example
     * // Get one Repository
     * const repository = await prisma.repository.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends repositoryFindUniqueArgs>(args: SelectSubset<T, repositoryFindUniqueArgs<ExtArgs>>): Prisma__repositoryClient<$Result.GetResult<Prisma.$repositoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Repository that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {repositoryFindUniqueOrThrowArgs} args - Arguments to find a Repository
     * @example
     * // Get one Repository
     * const repository = await prisma.repository.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends repositoryFindUniqueOrThrowArgs>(args: SelectSubset<T, repositoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__repositoryClient<$Result.GetResult<Prisma.$repositoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Repository that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repositoryFindFirstArgs} args - Arguments to find a Repository
     * @example
     * // Get one Repository
     * const repository = await prisma.repository.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends repositoryFindFirstArgs>(args?: SelectSubset<T, repositoryFindFirstArgs<ExtArgs>>): Prisma__repositoryClient<$Result.GetResult<Prisma.$repositoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Repository that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repositoryFindFirstOrThrowArgs} args - Arguments to find a Repository
     * @example
     * // Get one Repository
     * const repository = await prisma.repository.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends repositoryFindFirstOrThrowArgs>(args?: SelectSubset<T, repositoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__repositoryClient<$Result.GetResult<Prisma.$repositoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Repositories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repositoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Repositories
     * const repositories = await prisma.repository.findMany()
     * 
     * // Get first 10 Repositories
     * const repositories = await prisma.repository.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const repositoryWithIdOnly = await prisma.repository.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends repositoryFindManyArgs>(args?: SelectSubset<T, repositoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repositoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Repository.
     * @param {repositoryCreateArgs} args - Arguments to create a Repository.
     * @example
     * // Create one Repository
     * const Repository = await prisma.repository.create({
     *   data: {
     *     // ... data to create a Repository
     *   }
     * })
     * 
     */
    create<T extends repositoryCreateArgs>(args: SelectSubset<T, repositoryCreateArgs<ExtArgs>>): Prisma__repositoryClient<$Result.GetResult<Prisma.$repositoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Repositories.
     * @param {repositoryCreateManyArgs} args - Arguments to create many Repositories.
     * @example
     * // Create many Repositories
     * const repository = await prisma.repository.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends repositoryCreateManyArgs>(args?: SelectSubset<T, repositoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Repositories and returns the data saved in the database.
     * @param {repositoryCreateManyAndReturnArgs} args - Arguments to create many Repositories.
     * @example
     * // Create many Repositories
     * const repository = await prisma.repository.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Repositories and only return the `id`
     * const repositoryWithIdOnly = await prisma.repository.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends repositoryCreateManyAndReturnArgs>(args?: SelectSubset<T, repositoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repositoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Repository.
     * @param {repositoryDeleteArgs} args - Arguments to delete one Repository.
     * @example
     * // Delete one Repository
     * const Repository = await prisma.repository.delete({
     *   where: {
     *     // ... filter to delete one Repository
     *   }
     * })
     * 
     */
    delete<T extends repositoryDeleteArgs>(args: SelectSubset<T, repositoryDeleteArgs<ExtArgs>>): Prisma__repositoryClient<$Result.GetResult<Prisma.$repositoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Repository.
     * @param {repositoryUpdateArgs} args - Arguments to update one Repository.
     * @example
     * // Update one Repository
     * const repository = await prisma.repository.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends repositoryUpdateArgs>(args: SelectSubset<T, repositoryUpdateArgs<ExtArgs>>): Prisma__repositoryClient<$Result.GetResult<Prisma.$repositoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Repositories.
     * @param {repositoryDeleteManyArgs} args - Arguments to filter Repositories to delete.
     * @example
     * // Delete a few Repositories
     * const { count } = await prisma.repository.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends repositoryDeleteManyArgs>(args?: SelectSubset<T, repositoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Repositories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repositoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Repositories
     * const repository = await prisma.repository.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends repositoryUpdateManyArgs>(args: SelectSubset<T, repositoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Repositories and returns the data updated in the database.
     * @param {repositoryUpdateManyAndReturnArgs} args - Arguments to update many Repositories.
     * @example
     * // Update many Repositories
     * const repository = await prisma.repository.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Repositories and only return the `id`
     * const repositoryWithIdOnly = await prisma.repository.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends repositoryUpdateManyAndReturnArgs>(args: SelectSubset<T, repositoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repositoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Repository.
     * @param {repositoryUpsertArgs} args - Arguments to update or create a Repository.
     * @example
     * // Update or create a Repository
     * const repository = await prisma.repository.upsert({
     *   create: {
     *     // ... data to create a Repository
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Repository we want to update
     *   }
     * })
     */
    upsert<T extends repositoryUpsertArgs>(args: SelectSubset<T, repositoryUpsertArgs<ExtArgs>>): Prisma__repositoryClient<$Result.GetResult<Prisma.$repositoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Repositories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repositoryCountArgs} args - Arguments to filter Repositories to count.
     * @example
     * // Count the number of Repositories
     * const count = await prisma.repository.count({
     *   where: {
     *     // ... the filter for the Repositories we want to count
     *   }
     * })
    **/
    count<T extends repositoryCountArgs>(
      args?: Subset<T, repositoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RepositoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Repository.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepositoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RepositoryAggregateArgs>(args: Subset<T, RepositoryAggregateArgs>): Prisma.PrismaPromise<GetRepositoryAggregateType<T>>

    /**
     * Group by Repository.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repositoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends repositoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: repositoryGroupByArgs['orderBy'] }
        : { orderBy?: repositoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, repositoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRepositoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the repository model
   */
  readonly fields: repositoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for repository.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__repositoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    parent<T extends repository$parentArgs<ExtArgs> = {}>(args?: Subset<T, repository$parentArgs<ExtArgs>>): Prisma__repositoryClient<$Result.GetResult<Prisma.$repositoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    forks<T extends repository$forksArgs<ExtArgs> = {}>(args?: Subset<T, repository$forksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repositoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    access<T extends repository$accessArgs<ExtArgs> = {}>(args?: Subset<T, repository$accessArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repository_accessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    issue<T extends repository$issueArgs<ExtArgs> = {}>(args?: Subset<T, repository$issueArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$issuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pull_request<T extends repository$pull_requestArgs<ExtArgs> = {}>(args?: Subset<T, repository$pull_requestArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pull_requestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    source_pull_requests<T extends repository$source_pull_requestsArgs<ExtArgs> = {}>(args?: Subset<T, repository$source_pull_requestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pull_requestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    target_pull_requests<T extends repository$target_pull_requestsArgs<ExtArgs> = {}>(args?: Subset<T, repository$target_pull_requestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pull_requestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the repository model
   */
  interface repositoryFieldRefs {
    readonly id: FieldRef<"repository", 'Int'>
    readonly name: FieldRef<"repository", 'String'>
    readonly owner_user_id: FieldRef<"repository", 'Int'>
    readonly description: FieldRef<"repository", 'String'>
    readonly is_private: FieldRef<"repository", 'Boolean'>
    readonly repoPath: FieldRef<"repository", 'String'>
    readonly parent_id: FieldRef<"repository", 'Int'>
    readonly forked_at: FieldRef<"repository", 'DateTime'>
    readonly created_at: FieldRef<"repository", 'DateTime'>
    readonly updated_at: FieldRef<"repository", 'DateTime'>
    readonly archived: FieldRef<"repository", 'Boolean'>
    readonly forks_count: FieldRef<"repository", 'Int'>
    readonly pull_requests_count: FieldRef<"repository", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * repository findUnique
   */
  export type repositoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository
     */
    select?: repositorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository
     */
    omit?: repositoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repositoryInclude<ExtArgs> | null
    /**
     * Filter, which repository to fetch.
     */
    where: repositoryWhereUniqueInput
  }

  /**
   * repository findUniqueOrThrow
   */
  export type repositoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository
     */
    select?: repositorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository
     */
    omit?: repositoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repositoryInclude<ExtArgs> | null
    /**
     * Filter, which repository to fetch.
     */
    where: repositoryWhereUniqueInput
  }

  /**
   * repository findFirst
   */
  export type repositoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository
     */
    select?: repositorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository
     */
    omit?: repositoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repositoryInclude<ExtArgs> | null
    /**
     * Filter, which repository to fetch.
     */
    where?: repositoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of repositories to fetch.
     */
    orderBy?: repositoryOrderByWithRelationInput | repositoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for repositories.
     */
    cursor?: repositoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` repositories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` repositories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of repositories.
     */
    distinct?: RepositoryScalarFieldEnum | RepositoryScalarFieldEnum[]
  }

  /**
   * repository findFirstOrThrow
   */
  export type repositoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository
     */
    select?: repositorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository
     */
    omit?: repositoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repositoryInclude<ExtArgs> | null
    /**
     * Filter, which repository to fetch.
     */
    where?: repositoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of repositories to fetch.
     */
    orderBy?: repositoryOrderByWithRelationInput | repositoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for repositories.
     */
    cursor?: repositoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` repositories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` repositories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of repositories.
     */
    distinct?: RepositoryScalarFieldEnum | RepositoryScalarFieldEnum[]
  }

  /**
   * repository findMany
   */
  export type repositoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository
     */
    select?: repositorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository
     */
    omit?: repositoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repositoryInclude<ExtArgs> | null
    /**
     * Filter, which repositories to fetch.
     */
    where?: repositoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of repositories to fetch.
     */
    orderBy?: repositoryOrderByWithRelationInput | repositoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing repositories.
     */
    cursor?: repositoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` repositories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` repositories.
     */
    skip?: number
    distinct?: RepositoryScalarFieldEnum | RepositoryScalarFieldEnum[]
  }

  /**
   * repository create
   */
  export type repositoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository
     */
    select?: repositorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository
     */
    omit?: repositoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repositoryInclude<ExtArgs> | null
    /**
     * The data needed to create a repository.
     */
    data: XOR<repositoryCreateInput, repositoryUncheckedCreateInput>
  }

  /**
   * repository createMany
   */
  export type repositoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many repositories.
     */
    data: repositoryCreateManyInput | repositoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * repository createManyAndReturn
   */
  export type repositoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository
     */
    select?: repositorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the repository
     */
    omit?: repositoryOmit<ExtArgs> | null
    /**
     * The data used to create many repositories.
     */
    data: repositoryCreateManyInput | repositoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repositoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * repository update
   */
  export type repositoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository
     */
    select?: repositorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository
     */
    omit?: repositoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repositoryInclude<ExtArgs> | null
    /**
     * The data needed to update a repository.
     */
    data: XOR<repositoryUpdateInput, repositoryUncheckedUpdateInput>
    /**
     * Choose, which repository to update.
     */
    where: repositoryWhereUniqueInput
  }

  /**
   * repository updateMany
   */
  export type repositoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update repositories.
     */
    data: XOR<repositoryUpdateManyMutationInput, repositoryUncheckedUpdateManyInput>
    /**
     * Filter which repositories to update
     */
    where?: repositoryWhereInput
    /**
     * Limit how many repositories to update.
     */
    limit?: number
  }

  /**
   * repository updateManyAndReturn
   */
  export type repositoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository
     */
    select?: repositorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the repository
     */
    omit?: repositoryOmit<ExtArgs> | null
    /**
     * The data used to update repositories.
     */
    data: XOR<repositoryUpdateManyMutationInput, repositoryUncheckedUpdateManyInput>
    /**
     * Filter which repositories to update
     */
    where?: repositoryWhereInput
    /**
     * Limit how many repositories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repositoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * repository upsert
   */
  export type repositoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository
     */
    select?: repositorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository
     */
    omit?: repositoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repositoryInclude<ExtArgs> | null
    /**
     * The filter to search for the repository to update in case it exists.
     */
    where: repositoryWhereUniqueInput
    /**
     * In case the repository found by the `where` argument doesn't exist, create a new repository with this data.
     */
    create: XOR<repositoryCreateInput, repositoryUncheckedCreateInput>
    /**
     * In case the repository was found with the provided `where` argument, update it with this data.
     */
    update: XOR<repositoryUpdateInput, repositoryUncheckedUpdateInput>
  }

  /**
   * repository delete
   */
  export type repositoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository
     */
    select?: repositorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository
     */
    omit?: repositoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repositoryInclude<ExtArgs> | null
    /**
     * Filter which repository to delete.
     */
    where: repositoryWhereUniqueInput
  }

  /**
   * repository deleteMany
   */
  export type repositoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which repositories to delete
     */
    where?: repositoryWhereInput
    /**
     * Limit how many repositories to delete.
     */
    limit?: number
  }

  /**
   * repository.parent
   */
  export type repository$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository
     */
    select?: repositorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository
     */
    omit?: repositoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repositoryInclude<ExtArgs> | null
    where?: repositoryWhereInput
  }

  /**
   * repository.forks
   */
  export type repository$forksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository
     */
    select?: repositorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository
     */
    omit?: repositoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repositoryInclude<ExtArgs> | null
    where?: repositoryWhereInput
    orderBy?: repositoryOrderByWithRelationInput | repositoryOrderByWithRelationInput[]
    cursor?: repositoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RepositoryScalarFieldEnum | RepositoryScalarFieldEnum[]
  }

  /**
   * repository.access
   */
  export type repository$accessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository_access
     */
    select?: repository_accessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository_access
     */
    omit?: repository_accessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repository_accessInclude<ExtArgs> | null
    where?: repository_accessWhereInput
    orderBy?: repository_accessOrderByWithRelationInput | repository_accessOrderByWithRelationInput[]
    cursor?: repository_accessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Repository_accessScalarFieldEnum | Repository_accessScalarFieldEnum[]
  }

  /**
   * repository.issue
   */
  export type repository$issueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue
     */
    select?: issueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue
     */
    omit?: issueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issueInclude<ExtArgs> | null
    where?: issueWhereInput
    orderBy?: issueOrderByWithRelationInput | issueOrderByWithRelationInput[]
    cursor?: issueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IssueScalarFieldEnum | IssueScalarFieldEnum[]
  }

  /**
   * repository.pull_request
   */
  export type repository$pull_requestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request
     */
    select?: pull_requestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request
     */
    omit?: pull_requestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_requestInclude<ExtArgs> | null
    where?: pull_requestWhereInput
    orderBy?: pull_requestOrderByWithRelationInput | pull_requestOrderByWithRelationInput[]
    cursor?: pull_requestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Pull_requestScalarFieldEnum | Pull_requestScalarFieldEnum[]
  }

  /**
   * repository.source_pull_requests
   */
  export type repository$source_pull_requestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request
     */
    select?: pull_requestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request
     */
    omit?: pull_requestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_requestInclude<ExtArgs> | null
    where?: pull_requestWhereInput
    orderBy?: pull_requestOrderByWithRelationInput | pull_requestOrderByWithRelationInput[]
    cursor?: pull_requestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Pull_requestScalarFieldEnum | Pull_requestScalarFieldEnum[]
  }

  /**
   * repository.target_pull_requests
   */
  export type repository$target_pull_requestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request
     */
    select?: pull_requestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request
     */
    omit?: pull_requestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_requestInclude<ExtArgs> | null
    where?: pull_requestWhereInput
    orderBy?: pull_requestOrderByWithRelationInput | pull_requestOrderByWithRelationInput[]
    cursor?: pull_requestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Pull_requestScalarFieldEnum | Pull_requestScalarFieldEnum[]
  }

  /**
   * repository without action
   */
  export type repositoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository
     */
    select?: repositorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository
     */
    omit?: repositoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repositoryInclude<ExtArgs> | null
  }


  /**
   * Model repository_access
   */

  export type AggregateRepository_access = {
    _count: Repository_accessCountAggregateOutputType | null
    _avg: Repository_accessAvgAggregateOutputType | null
    _sum: Repository_accessSumAggregateOutputType | null
    _min: Repository_accessMinAggregateOutputType | null
    _max: Repository_accessMaxAggregateOutputType | null
  }

  export type Repository_accessAvgAggregateOutputType = {
    id: number | null
    repository_id: number | null
    user_id: number | null
  }

  export type Repository_accessSumAggregateOutputType = {
    id: number | null
    repository_id: number | null
    user_id: number | null
  }

  export type Repository_accessMinAggregateOutputType = {
    id: number | null
    repository_id: number | null
    user_id: number | null
    access_level: $Enums.RepositoryAccess | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Repository_accessMaxAggregateOutputType = {
    id: number | null
    repository_id: number | null
    user_id: number | null
    access_level: $Enums.RepositoryAccess | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Repository_accessCountAggregateOutputType = {
    id: number
    repository_id: number
    user_id: number
    access_level: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Repository_accessAvgAggregateInputType = {
    id?: true
    repository_id?: true
    user_id?: true
  }

  export type Repository_accessSumAggregateInputType = {
    id?: true
    repository_id?: true
    user_id?: true
  }

  export type Repository_accessMinAggregateInputType = {
    id?: true
    repository_id?: true
    user_id?: true
    access_level?: true
    created_at?: true
    updated_at?: true
  }

  export type Repository_accessMaxAggregateInputType = {
    id?: true
    repository_id?: true
    user_id?: true
    access_level?: true
    created_at?: true
    updated_at?: true
  }

  export type Repository_accessCountAggregateInputType = {
    id?: true
    repository_id?: true
    user_id?: true
    access_level?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Repository_accessAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which repository_access to aggregate.
     */
    where?: repository_accessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of repository_accesses to fetch.
     */
    orderBy?: repository_accessOrderByWithRelationInput | repository_accessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: repository_accessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` repository_accesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` repository_accesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned repository_accesses
    **/
    _count?: true | Repository_accessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Repository_accessAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Repository_accessSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Repository_accessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Repository_accessMaxAggregateInputType
  }

  export type GetRepository_accessAggregateType<T extends Repository_accessAggregateArgs> = {
        [P in keyof T & keyof AggregateRepository_access]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRepository_access[P]>
      : GetScalarType<T[P], AggregateRepository_access[P]>
  }




  export type repository_accessGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: repository_accessWhereInput
    orderBy?: repository_accessOrderByWithAggregationInput | repository_accessOrderByWithAggregationInput[]
    by: Repository_accessScalarFieldEnum[] | Repository_accessScalarFieldEnum
    having?: repository_accessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Repository_accessCountAggregateInputType | true
    _avg?: Repository_accessAvgAggregateInputType
    _sum?: Repository_accessSumAggregateInputType
    _min?: Repository_accessMinAggregateInputType
    _max?: Repository_accessMaxAggregateInputType
  }

  export type Repository_accessGroupByOutputType = {
    id: number
    repository_id: number
    user_id: number
    access_level: $Enums.RepositoryAccess
    created_at: Date
    updated_at: Date
    _count: Repository_accessCountAggregateOutputType | null
    _avg: Repository_accessAvgAggregateOutputType | null
    _sum: Repository_accessSumAggregateOutputType | null
    _min: Repository_accessMinAggregateOutputType | null
    _max: Repository_accessMaxAggregateOutputType | null
  }

  type GetRepository_accessGroupByPayload<T extends repository_accessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Repository_accessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Repository_accessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Repository_accessGroupByOutputType[P]>
            : GetScalarType<T[P], Repository_accessGroupByOutputType[P]>
        }
      >
    >


  export type repository_accessSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    repository_id?: boolean
    user_id?: boolean
    access_level?: boolean
    created_at?: boolean
    updated_at?: boolean
    repository?: boolean | repositoryDefaultArgs<ExtArgs>
    user?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["repository_access"]>

  export type repository_accessSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    repository_id?: boolean
    user_id?: boolean
    access_level?: boolean
    created_at?: boolean
    updated_at?: boolean
    repository?: boolean | repositoryDefaultArgs<ExtArgs>
    user?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["repository_access"]>

  export type repository_accessSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    repository_id?: boolean
    user_id?: boolean
    access_level?: boolean
    created_at?: boolean
    updated_at?: boolean
    repository?: boolean | repositoryDefaultArgs<ExtArgs>
    user?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["repository_access"]>

  export type repository_accessSelectScalar = {
    id?: boolean
    repository_id?: boolean
    user_id?: boolean
    access_level?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type repository_accessOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "repository_id" | "user_id" | "access_level" | "created_at" | "updated_at", ExtArgs["result"]["repository_access"]>
  export type repository_accessInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repository?: boolean | repositoryDefaultArgs<ExtArgs>
    user?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type repository_accessIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repository?: boolean | repositoryDefaultArgs<ExtArgs>
    user?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type repository_accessIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repository?: boolean | repositoryDefaultArgs<ExtArgs>
    user?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $repository_accessPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "repository_access"
    objects: {
      repository: Prisma.$repositoryPayload<ExtArgs>
      user: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      repository_id: number
      user_id: number
      access_level: $Enums.RepositoryAccess
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["repository_access"]>
    composites: {}
  }

  type repository_accessGetPayload<S extends boolean | null | undefined | repository_accessDefaultArgs> = $Result.GetResult<Prisma.$repository_accessPayload, S>

  type repository_accessCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<repository_accessFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Repository_accessCountAggregateInputType | true
    }

  export interface repository_accessDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['repository_access'], meta: { name: 'repository_access' } }
    /**
     * Find zero or one Repository_access that matches the filter.
     * @param {repository_accessFindUniqueArgs} args - Arguments to find a Repository_access
     * @example
     * // Get one Repository_access
     * const repository_access = await prisma.repository_access.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends repository_accessFindUniqueArgs>(args: SelectSubset<T, repository_accessFindUniqueArgs<ExtArgs>>): Prisma__repository_accessClient<$Result.GetResult<Prisma.$repository_accessPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Repository_access that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {repository_accessFindUniqueOrThrowArgs} args - Arguments to find a Repository_access
     * @example
     * // Get one Repository_access
     * const repository_access = await prisma.repository_access.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends repository_accessFindUniqueOrThrowArgs>(args: SelectSubset<T, repository_accessFindUniqueOrThrowArgs<ExtArgs>>): Prisma__repository_accessClient<$Result.GetResult<Prisma.$repository_accessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Repository_access that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repository_accessFindFirstArgs} args - Arguments to find a Repository_access
     * @example
     * // Get one Repository_access
     * const repository_access = await prisma.repository_access.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends repository_accessFindFirstArgs>(args?: SelectSubset<T, repository_accessFindFirstArgs<ExtArgs>>): Prisma__repository_accessClient<$Result.GetResult<Prisma.$repository_accessPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Repository_access that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repository_accessFindFirstOrThrowArgs} args - Arguments to find a Repository_access
     * @example
     * // Get one Repository_access
     * const repository_access = await prisma.repository_access.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends repository_accessFindFirstOrThrowArgs>(args?: SelectSubset<T, repository_accessFindFirstOrThrowArgs<ExtArgs>>): Prisma__repository_accessClient<$Result.GetResult<Prisma.$repository_accessPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Repository_accesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repository_accessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Repository_accesses
     * const repository_accesses = await prisma.repository_access.findMany()
     * 
     * // Get first 10 Repository_accesses
     * const repository_accesses = await prisma.repository_access.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const repository_accessWithIdOnly = await prisma.repository_access.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends repository_accessFindManyArgs>(args?: SelectSubset<T, repository_accessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repository_accessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Repository_access.
     * @param {repository_accessCreateArgs} args - Arguments to create a Repository_access.
     * @example
     * // Create one Repository_access
     * const Repository_access = await prisma.repository_access.create({
     *   data: {
     *     // ... data to create a Repository_access
     *   }
     * })
     * 
     */
    create<T extends repository_accessCreateArgs>(args: SelectSubset<T, repository_accessCreateArgs<ExtArgs>>): Prisma__repository_accessClient<$Result.GetResult<Prisma.$repository_accessPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Repository_accesses.
     * @param {repository_accessCreateManyArgs} args - Arguments to create many Repository_accesses.
     * @example
     * // Create many Repository_accesses
     * const repository_access = await prisma.repository_access.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends repository_accessCreateManyArgs>(args?: SelectSubset<T, repository_accessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Repository_accesses and returns the data saved in the database.
     * @param {repository_accessCreateManyAndReturnArgs} args - Arguments to create many Repository_accesses.
     * @example
     * // Create many Repository_accesses
     * const repository_access = await prisma.repository_access.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Repository_accesses and only return the `id`
     * const repository_accessWithIdOnly = await prisma.repository_access.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends repository_accessCreateManyAndReturnArgs>(args?: SelectSubset<T, repository_accessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repository_accessPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Repository_access.
     * @param {repository_accessDeleteArgs} args - Arguments to delete one Repository_access.
     * @example
     * // Delete one Repository_access
     * const Repository_access = await prisma.repository_access.delete({
     *   where: {
     *     // ... filter to delete one Repository_access
     *   }
     * })
     * 
     */
    delete<T extends repository_accessDeleteArgs>(args: SelectSubset<T, repository_accessDeleteArgs<ExtArgs>>): Prisma__repository_accessClient<$Result.GetResult<Prisma.$repository_accessPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Repository_access.
     * @param {repository_accessUpdateArgs} args - Arguments to update one Repository_access.
     * @example
     * // Update one Repository_access
     * const repository_access = await prisma.repository_access.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends repository_accessUpdateArgs>(args: SelectSubset<T, repository_accessUpdateArgs<ExtArgs>>): Prisma__repository_accessClient<$Result.GetResult<Prisma.$repository_accessPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Repository_accesses.
     * @param {repository_accessDeleteManyArgs} args - Arguments to filter Repository_accesses to delete.
     * @example
     * // Delete a few Repository_accesses
     * const { count } = await prisma.repository_access.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends repository_accessDeleteManyArgs>(args?: SelectSubset<T, repository_accessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Repository_accesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repository_accessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Repository_accesses
     * const repository_access = await prisma.repository_access.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends repository_accessUpdateManyArgs>(args: SelectSubset<T, repository_accessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Repository_accesses and returns the data updated in the database.
     * @param {repository_accessUpdateManyAndReturnArgs} args - Arguments to update many Repository_accesses.
     * @example
     * // Update many Repository_accesses
     * const repository_access = await prisma.repository_access.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Repository_accesses and only return the `id`
     * const repository_accessWithIdOnly = await prisma.repository_access.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends repository_accessUpdateManyAndReturnArgs>(args: SelectSubset<T, repository_accessUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$repository_accessPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Repository_access.
     * @param {repository_accessUpsertArgs} args - Arguments to update or create a Repository_access.
     * @example
     * // Update or create a Repository_access
     * const repository_access = await prisma.repository_access.upsert({
     *   create: {
     *     // ... data to create a Repository_access
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Repository_access we want to update
     *   }
     * })
     */
    upsert<T extends repository_accessUpsertArgs>(args: SelectSubset<T, repository_accessUpsertArgs<ExtArgs>>): Prisma__repository_accessClient<$Result.GetResult<Prisma.$repository_accessPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Repository_accesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repository_accessCountArgs} args - Arguments to filter Repository_accesses to count.
     * @example
     * // Count the number of Repository_accesses
     * const count = await prisma.repository_access.count({
     *   where: {
     *     // ... the filter for the Repository_accesses we want to count
     *   }
     * })
    **/
    count<T extends repository_accessCountArgs>(
      args?: Subset<T, repository_accessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Repository_accessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Repository_access.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Repository_accessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Repository_accessAggregateArgs>(args: Subset<T, Repository_accessAggregateArgs>): Prisma.PrismaPromise<GetRepository_accessAggregateType<T>>

    /**
     * Group by Repository_access.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {repository_accessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends repository_accessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: repository_accessGroupByArgs['orderBy'] }
        : { orderBy?: repository_accessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, repository_accessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRepository_accessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the repository_access model
   */
  readonly fields: repository_accessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for repository_access.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__repository_accessClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    repository<T extends repositoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, repositoryDefaultArgs<ExtArgs>>): Prisma__repositoryClient<$Result.GetResult<Prisma.$repositoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the repository_access model
   */
  interface repository_accessFieldRefs {
    readonly id: FieldRef<"repository_access", 'Int'>
    readonly repository_id: FieldRef<"repository_access", 'Int'>
    readonly user_id: FieldRef<"repository_access", 'Int'>
    readonly access_level: FieldRef<"repository_access", 'RepositoryAccess'>
    readonly created_at: FieldRef<"repository_access", 'DateTime'>
    readonly updated_at: FieldRef<"repository_access", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * repository_access findUnique
   */
  export type repository_accessFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository_access
     */
    select?: repository_accessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository_access
     */
    omit?: repository_accessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repository_accessInclude<ExtArgs> | null
    /**
     * Filter, which repository_access to fetch.
     */
    where: repository_accessWhereUniqueInput
  }

  /**
   * repository_access findUniqueOrThrow
   */
  export type repository_accessFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository_access
     */
    select?: repository_accessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository_access
     */
    omit?: repository_accessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repository_accessInclude<ExtArgs> | null
    /**
     * Filter, which repository_access to fetch.
     */
    where: repository_accessWhereUniqueInput
  }

  /**
   * repository_access findFirst
   */
  export type repository_accessFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository_access
     */
    select?: repository_accessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository_access
     */
    omit?: repository_accessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repository_accessInclude<ExtArgs> | null
    /**
     * Filter, which repository_access to fetch.
     */
    where?: repository_accessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of repository_accesses to fetch.
     */
    orderBy?: repository_accessOrderByWithRelationInput | repository_accessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for repository_accesses.
     */
    cursor?: repository_accessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` repository_accesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` repository_accesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of repository_accesses.
     */
    distinct?: Repository_accessScalarFieldEnum | Repository_accessScalarFieldEnum[]
  }

  /**
   * repository_access findFirstOrThrow
   */
  export type repository_accessFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository_access
     */
    select?: repository_accessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository_access
     */
    omit?: repository_accessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repository_accessInclude<ExtArgs> | null
    /**
     * Filter, which repository_access to fetch.
     */
    where?: repository_accessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of repository_accesses to fetch.
     */
    orderBy?: repository_accessOrderByWithRelationInput | repository_accessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for repository_accesses.
     */
    cursor?: repository_accessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` repository_accesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` repository_accesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of repository_accesses.
     */
    distinct?: Repository_accessScalarFieldEnum | Repository_accessScalarFieldEnum[]
  }

  /**
   * repository_access findMany
   */
  export type repository_accessFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository_access
     */
    select?: repository_accessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository_access
     */
    omit?: repository_accessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repository_accessInclude<ExtArgs> | null
    /**
     * Filter, which repository_accesses to fetch.
     */
    where?: repository_accessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of repository_accesses to fetch.
     */
    orderBy?: repository_accessOrderByWithRelationInput | repository_accessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing repository_accesses.
     */
    cursor?: repository_accessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` repository_accesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` repository_accesses.
     */
    skip?: number
    distinct?: Repository_accessScalarFieldEnum | Repository_accessScalarFieldEnum[]
  }

  /**
   * repository_access create
   */
  export type repository_accessCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository_access
     */
    select?: repository_accessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository_access
     */
    omit?: repository_accessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repository_accessInclude<ExtArgs> | null
    /**
     * The data needed to create a repository_access.
     */
    data: XOR<repository_accessCreateInput, repository_accessUncheckedCreateInput>
  }

  /**
   * repository_access createMany
   */
  export type repository_accessCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many repository_accesses.
     */
    data: repository_accessCreateManyInput | repository_accessCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * repository_access createManyAndReturn
   */
  export type repository_accessCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository_access
     */
    select?: repository_accessSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the repository_access
     */
    omit?: repository_accessOmit<ExtArgs> | null
    /**
     * The data used to create many repository_accesses.
     */
    data: repository_accessCreateManyInput | repository_accessCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repository_accessIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * repository_access update
   */
  export type repository_accessUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository_access
     */
    select?: repository_accessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository_access
     */
    omit?: repository_accessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repository_accessInclude<ExtArgs> | null
    /**
     * The data needed to update a repository_access.
     */
    data: XOR<repository_accessUpdateInput, repository_accessUncheckedUpdateInput>
    /**
     * Choose, which repository_access to update.
     */
    where: repository_accessWhereUniqueInput
  }

  /**
   * repository_access updateMany
   */
  export type repository_accessUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update repository_accesses.
     */
    data: XOR<repository_accessUpdateManyMutationInput, repository_accessUncheckedUpdateManyInput>
    /**
     * Filter which repository_accesses to update
     */
    where?: repository_accessWhereInput
    /**
     * Limit how many repository_accesses to update.
     */
    limit?: number
  }

  /**
   * repository_access updateManyAndReturn
   */
  export type repository_accessUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository_access
     */
    select?: repository_accessSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the repository_access
     */
    omit?: repository_accessOmit<ExtArgs> | null
    /**
     * The data used to update repository_accesses.
     */
    data: XOR<repository_accessUpdateManyMutationInput, repository_accessUncheckedUpdateManyInput>
    /**
     * Filter which repository_accesses to update
     */
    where?: repository_accessWhereInput
    /**
     * Limit how many repository_accesses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repository_accessIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * repository_access upsert
   */
  export type repository_accessUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository_access
     */
    select?: repository_accessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository_access
     */
    omit?: repository_accessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repository_accessInclude<ExtArgs> | null
    /**
     * The filter to search for the repository_access to update in case it exists.
     */
    where: repository_accessWhereUniqueInput
    /**
     * In case the repository_access found by the `where` argument doesn't exist, create a new repository_access with this data.
     */
    create: XOR<repository_accessCreateInput, repository_accessUncheckedCreateInput>
    /**
     * In case the repository_access was found with the provided `where` argument, update it with this data.
     */
    update: XOR<repository_accessUpdateInput, repository_accessUncheckedUpdateInput>
  }

  /**
   * repository_access delete
   */
  export type repository_accessDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository_access
     */
    select?: repository_accessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository_access
     */
    omit?: repository_accessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repository_accessInclude<ExtArgs> | null
    /**
     * Filter which repository_access to delete.
     */
    where: repository_accessWhereUniqueInput
  }

  /**
   * repository_access deleteMany
   */
  export type repository_accessDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which repository_accesses to delete
     */
    where?: repository_accessWhereInput
    /**
     * Limit how many repository_accesses to delete.
     */
    limit?: number
  }

  /**
   * repository_access without action
   */
  export type repository_accessDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repository_access
     */
    select?: repository_accessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the repository_access
     */
    omit?: repository_accessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: repository_accessInclude<ExtArgs> | null
  }


  /**
   * Model issue
   */

  export type AggregateIssue = {
    _count: IssueCountAggregateOutputType | null
    _avg: IssueAvgAggregateOutputType | null
    _sum: IssueSumAggregateOutputType | null
    _min: IssueMinAggregateOutputType | null
    _max: IssueMaxAggregateOutputType | null
  }

  export type IssueAvgAggregateOutputType = {
    id: number | null
    repository_id: number | null
    author_id: number | null
  }

  export type IssueSumAggregateOutputType = {
    id: number | null
    repository_id: number | null
    author_id: number | null
  }

  export type IssueMinAggregateOutputType = {
    id: number | null
    repository_id: number | null
    author_id: number | null
    title: string | null
    description: string | null
    status: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type IssueMaxAggregateOutputType = {
    id: number | null
    repository_id: number | null
    author_id: number | null
    title: string | null
    description: string | null
    status: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type IssueCountAggregateOutputType = {
    id: number
    repository_id: number
    author_id: number
    title: number
    description: number
    status: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type IssueAvgAggregateInputType = {
    id?: true
    repository_id?: true
    author_id?: true
  }

  export type IssueSumAggregateInputType = {
    id?: true
    repository_id?: true
    author_id?: true
  }

  export type IssueMinAggregateInputType = {
    id?: true
    repository_id?: true
    author_id?: true
    title?: true
    description?: true
    status?: true
    created_at?: true
    updated_at?: true
  }

  export type IssueMaxAggregateInputType = {
    id?: true
    repository_id?: true
    author_id?: true
    title?: true
    description?: true
    status?: true
    created_at?: true
    updated_at?: true
  }

  export type IssueCountAggregateInputType = {
    id?: true
    repository_id?: true
    author_id?: true
    title?: true
    description?: true
    status?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type IssueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which issue to aggregate.
     */
    where?: issueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of issues to fetch.
     */
    orderBy?: issueOrderByWithRelationInput | issueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: issueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` issues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` issues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned issues
    **/
    _count?: true | IssueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IssueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IssueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IssueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IssueMaxAggregateInputType
  }

  export type GetIssueAggregateType<T extends IssueAggregateArgs> = {
        [P in keyof T & keyof AggregateIssue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIssue[P]>
      : GetScalarType<T[P], AggregateIssue[P]>
  }




  export type issueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: issueWhereInput
    orderBy?: issueOrderByWithAggregationInput | issueOrderByWithAggregationInput[]
    by: IssueScalarFieldEnum[] | IssueScalarFieldEnum
    having?: issueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IssueCountAggregateInputType | true
    _avg?: IssueAvgAggregateInputType
    _sum?: IssueSumAggregateInputType
    _min?: IssueMinAggregateInputType
    _max?: IssueMaxAggregateInputType
  }

  export type IssueGroupByOutputType = {
    id: number
    repository_id: number
    author_id: number | null
    title: string
    description: string | null
    status: string
    created_at: Date
    updated_at: Date
    _count: IssueCountAggregateOutputType | null
    _avg: IssueAvgAggregateOutputType | null
    _sum: IssueSumAggregateOutputType | null
    _min: IssueMinAggregateOutputType | null
    _max: IssueMaxAggregateOutputType | null
  }

  type GetIssueGroupByPayload<T extends issueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IssueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IssueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IssueGroupByOutputType[P]>
            : GetScalarType<T[P], IssueGroupByOutputType[P]>
        }
      >
    >


  export type issueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    repository_id?: boolean
    author_id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
    repository?: boolean | repositoryDefaultArgs<ExtArgs>
    author?: boolean | issue$authorArgs<ExtArgs>
    issue_comment?: boolean | issue$issue_commentArgs<ExtArgs>
    _count?: boolean | IssueCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["issue"]>

  export type issueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    repository_id?: boolean
    author_id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
    repository?: boolean | repositoryDefaultArgs<ExtArgs>
    author?: boolean | issue$authorArgs<ExtArgs>
  }, ExtArgs["result"]["issue"]>

  export type issueSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    repository_id?: boolean
    author_id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
    repository?: boolean | repositoryDefaultArgs<ExtArgs>
    author?: boolean | issue$authorArgs<ExtArgs>
  }, ExtArgs["result"]["issue"]>

  export type issueSelectScalar = {
    id?: boolean
    repository_id?: boolean
    author_id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type issueOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "repository_id" | "author_id" | "title" | "description" | "status" | "created_at" | "updated_at", ExtArgs["result"]["issue"]>
  export type issueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repository?: boolean | repositoryDefaultArgs<ExtArgs>
    author?: boolean | issue$authorArgs<ExtArgs>
    issue_comment?: boolean | issue$issue_commentArgs<ExtArgs>
    _count?: boolean | IssueCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type issueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repository?: boolean | repositoryDefaultArgs<ExtArgs>
    author?: boolean | issue$authorArgs<ExtArgs>
  }
  export type issueIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repository?: boolean | repositoryDefaultArgs<ExtArgs>
    author?: boolean | issue$authorArgs<ExtArgs>
  }

  export type $issuePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "issue"
    objects: {
      repository: Prisma.$repositoryPayload<ExtArgs>
      author: Prisma.$usersPayload<ExtArgs> | null
      issue_comment: Prisma.$issue_commentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      repository_id: number
      author_id: number | null
      title: string
      description: string | null
      status: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["issue"]>
    composites: {}
  }

  type issueGetPayload<S extends boolean | null | undefined | issueDefaultArgs> = $Result.GetResult<Prisma.$issuePayload, S>

  type issueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<issueFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IssueCountAggregateInputType | true
    }

  export interface issueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['issue'], meta: { name: 'issue' } }
    /**
     * Find zero or one Issue that matches the filter.
     * @param {issueFindUniqueArgs} args - Arguments to find a Issue
     * @example
     * // Get one Issue
     * const issue = await prisma.issue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends issueFindUniqueArgs>(args: SelectSubset<T, issueFindUniqueArgs<ExtArgs>>): Prisma__issueClient<$Result.GetResult<Prisma.$issuePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Issue that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {issueFindUniqueOrThrowArgs} args - Arguments to find a Issue
     * @example
     * // Get one Issue
     * const issue = await prisma.issue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends issueFindUniqueOrThrowArgs>(args: SelectSubset<T, issueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__issueClient<$Result.GetResult<Prisma.$issuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Issue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {issueFindFirstArgs} args - Arguments to find a Issue
     * @example
     * // Get one Issue
     * const issue = await prisma.issue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends issueFindFirstArgs>(args?: SelectSubset<T, issueFindFirstArgs<ExtArgs>>): Prisma__issueClient<$Result.GetResult<Prisma.$issuePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Issue that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {issueFindFirstOrThrowArgs} args - Arguments to find a Issue
     * @example
     * // Get one Issue
     * const issue = await prisma.issue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends issueFindFirstOrThrowArgs>(args?: SelectSubset<T, issueFindFirstOrThrowArgs<ExtArgs>>): Prisma__issueClient<$Result.GetResult<Prisma.$issuePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Issues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {issueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Issues
     * const issues = await prisma.issue.findMany()
     * 
     * // Get first 10 Issues
     * const issues = await prisma.issue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const issueWithIdOnly = await prisma.issue.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends issueFindManyArgs>(args?: SelectSubset<T, issueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$issuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Issue.
     * @param {issueCreateArgs} args - Arguments to create a Issue.
     * @example
     * // Create one Issue
     * const Issue = await prisma.issue.create({
     *   data: {
     *     // ... data to create a Issue
     *   }
     * })
     * 
     */
    create<T extends issueCreateArgs>(args: SelectSubset<T, issueCreateArgs<ExtArgs>>): Prisma__issueClient<$Result.GetResult<Prisma.$issuePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Issues.
     * @param {issueCreateManyArgs} args - Arguments to create many Issues.
     * @example
     * // Create many Issues
     * const issue = await prisma.issue.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends issueCreateManyArgs>(args?: SelectSubset<T, issueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Issues and returns the data saved in the database.
     * @param {issueCreateManyAndReturnArgs} args - Arguments to create many Issues.
     * @example
     * // Create many Issues
     * const issue = await prisma.issue.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Issues and only return the `id`
     * const issueWithIdOnly = await prisma.issue.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends issueCreateManyAndReturnArgs>(args?: SelectSubset<T, issueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$issuePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Issue.
     * @param {issueDeleteArgs} args - Arguments to delete one Issue.
     * @example
     * // Delete one Issue
     * const Issue = await prisma.issue.delete({
     *   where: {
     *     // ... filter to delete one Issue
     *   }
     * })
     * 
     */
    delete<T extends issueDeleteArgs>(args: SelectSubset<T, issueDeleteArgs<ExtArgs>>): Prisma__issueClient<$Result.GetResult<Prisma.$issuePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Issue.
     * @param {issueUpdateArgs} args - Arguments to update one Issue.
     * @example
     * // Update one Issue
     * const issue = await prisma.issue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends issueUpdateArgs>(args: SelectSubset<T, issueUpdateArgs<ExtArgs>>): Prisma__issueClient<$Result.GetResult<Prisma.$issuePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Issues.
     * @param {issueDeleteManyArgs} args - Arguments to filter Issues to delete.
     * @example
     * // Delete a few Issues
     * const { count } = await prisma.issue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends issueDeleteManyArgs>(args?: SelectSubset<T, issueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Issues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {issueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Issues
     * const issue = await prisma.issue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends issueUpdateManyArgs>(args: SelectSubset<T, issueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Issues and returns the data updated in the database.
     * @param {issueUpdateManyAndReturnArgs} args - Arguments to update many Issues.
     * @example
     * // Update many Issues
     * const issue = await prisma.issue.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Issues and only return the `id`
     * const issueWithIdOnly = await prisma.issue.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends issueUpdateManyAndReturnArgs>(args: SelectSubset<T, issueUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$issuePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Issue.
     * @param {issueUpsertArgs} args - Arguments to update or create a Issue.
     * @example
     * // Update or create a Issue
     * const issue = await prisma.issue.upsert({
     *   create: {
     *     // ... data to create a Issue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Issue we want to update
     *   }
     * })
     */
    upsert<T extends issueUpsertArgs>(args: SelectSubset<T, issueUpsertArgs<ExtArgs>>): Prisma__issueClient<$Result.GetResult<Prisma.$issuePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Issues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {issueCountArgs} args - Arguments to filter Issues to count.
     * @example
     * // Count the number of Issues
     * const count = await prisma.issue.count({
     *   where: {
     *     // ... the filter for the Issues we want to count
     *   }
     * })
    **/
    count<T extends issueCountArgs>(
      args?: Subset<T, issueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IssueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Issue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IssueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IssueAggregateArgs>(args: Subset<T, IssueAggregateArgs>): Prisma.PrismaPromise<GetIssueAggregateType<T>>

    /**
     * Group by Issue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {issueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends issueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: issueGroupByArgs['orderBy'] }
        : { orderBy?: issueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, issueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIssueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the issue model
   */
  readonly fields: issueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for issue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__issueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    repository<T extends repositoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, repositoryDefaultArgs<ExtArgs>>): Prisma__repositoryClient<$Result.GetResult<Prisma.$repositoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    author<T extends issue$authorArgs<ExtArgs> = {}>(args?: Subset<T, issue$authorArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    issue_comment<T extends issue$issue_commentArgs<ExtArgs> = {}>(args?: Subset<T, issue$issue_commentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$issue_commentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the issue model
   */
  interface issueFieldRefs {
    readonly id: FieldRef<"issue", 'Int'>
    readonly repository_id: FieldRef<"issue", 'Int'>
    readonly author_id: FieldRef<"issue", 'Int'>
    readonly title: FieldRef<"issue", 'String'>
    readonly description: FieldRef<"issue", 'String'>
    readonly status: FieldRef<"issue", 'String'>
    readonly created_at: FieldRef<"issue", 'DateTime'>
    readonly updated_at: FieldRef<"issue", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * issue findUnique
   */
  export type issueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue
     */
    select?: issueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue
     */
    omit?: issueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issueInclude<ExtArgs> | null
    /**
     * Filter, which issue to fetch.
     */
    where: issueWhereUniqueInput
  }

  /**
   * issue findUniqueOrThrow
   */
  export type issueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue
     */
    select?: issueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue
     */
    omit?: issueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issueInclude<ExtArgs> | null
    /**
     * Filter, which issue to fetch.
     */
    where: issueWhereUniqueInput
  }

  /**
   * issue findFirst
   */
  export type issueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue
     */
    select?: issueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue
     */
    omit?: issueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issueInclude<ExtArgs> | null
    /**
     * Filter, which issue to fetch.
     */
    where?: issueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of issues to fetch.
     */
    orderBy?: issueOrderByWithRelationInput | issueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for issues.
     */
    cursor?: issueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` issues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` issues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of issues.
     */
    distinct?: IssueScalarFieldEnum | IssueScalarFieldEnum[]
  }

  /**
   * issue findFirstOrThrow
   */
  export type issueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue
     */
    select?: issueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue
     */
    omit?: issueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issueInclude<ExtArgs> | null
    /**
     * Filter, which issue to fetch.
     */
    where?: issueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of issues to fetch.
     */
    orderBy?: issueOrderByWithRelationInput | issueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for issues.
     */
    cursor?: issueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` issues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` issues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of issues.
     */
    distinct?: IssueScalarFieldEnum | IssueScalarFieldEnum[]
  }

  /**
   * issue findMany
   */
  export type issueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue
     */
    select?: issueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue
     */
    omit?: issueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issueInclude<ExtArgs> | null
    /**
     * Filter, which issues to fetch.
     */
    where?: issueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of issues to fetch.
     */
    orderBy?: issueOrderByWithRelationInput | issueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing issues.
     */
    cursor?: issueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` issues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` issues.
     */
    skip?: number
    distinct?: IssueScalarFieldEnum | IssueScalarFieldEnum[]
  }

  /**
   * issue create
   */
  export type issueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue
     */
    select?: issueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue
     */
    omit?: issueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issueInclude<ExtArgs> | null
    /**
     * The data needed to create a issue.
     */
    data: XOR<issueCreateInput, issueUncheckedCreateInput>
  }

  /**
   * issue createMany
   */
  export type issueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many issues.
     */
    data: issueCreateManyInput | issueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * issue createManyAndReturn
   */
  export type issueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue
     */
    select?: issueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the issue
     */
    omit?: issueOmit<ExtArgs> | null
    /**
     * The data used to create many issues.
     */
    data: issueCreateManyInput | issueCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * issue update
   */
  export type issueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue
     */
    select?: issueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue
     */
    omit?: issueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issueInclude<ExtArgs> | null
    /**
     * The data needed to update a issue.
     */
    data: XOR<issueUpdateInput, issueUncheckedUpdateInput>
    /**
     * Choose, which issue to update.
     */
    where: issueWhereUniqueInput
  }

  /**
   * issue updateMany
   */
  export type issueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update issues.
     */
    data: XOR<issueUpdateManyMutationInput, issueUncheckedUpdateManyInput>
    /**
     * Filter which issues to update
     */
    where?: issueWhereInput
    /**
     * Limit how many issues to update.
     */
    limit?: number
  }

  /**
   * issue updateManyAndReturn
   */
  export type issueUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue
     */
    select?: issueSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the issue
     */
    omit?: issueOmit<ExtArgs> | null
    /**
     * The data used to update issues.
     */
    data: XOR<issueUpdateManyMutationInput, issueUncheckedUpdateManyInput>
    /**
     * Filter which issues to update
     */
    where?: issueWhereInput
    /**
     * Limit how many issues to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issueIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * issue upsert
   */
  export type issueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue
     */
    select?: issueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue
     */
    omit?: issueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issueInclude<ExtArgs> | null
    /**
     * The filter to search for the issue to update in case it exists.
     */
    where: issueWhereUniqueInput
    /**
     * In case the issue found by the `where` argument doesn't exist, create a new issue with this data.
     */
    create: XOR<issueCreateInput, issueUncheckedCreateInput>
    /**
     * In case the issue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<issueUpdateInput, issueUncheckedUpdateInput>
  }

  /**
   * issue delete
   */
  export type issueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue
     */
    select?: issueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue
     */
    omit?: issueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issueInclude<ExtArgs> | null
    /**
     * Filter which issue to delete.
     */
    where: issueWhereUniqueInput
  }

  /**
   * issue deleteMany
   */
  export type issueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which issues to delete
     */
    where?: issueWhereInput
    /**
     * Limit how many issues to delete.
     */
    limit?: number
  }

  /**
   * issue.author
   */
  export type issue$authorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * issue.issue_comment
   */
  export type issue$issue_commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue_comment
     */
    select?: issue_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue_comment
     */
    omit?: issue_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issue_commentInclude<ExtArgs> | null
    where?: issue_commentWhereInput
    orderBy?: issue_commentOrderByWithRelationInput | issue_commentOrderByWithRelationInput[]
    cursor?: issue_commentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Issue_commentScalarFieldEnum | Issue_commentScalarFieldEnum[]
  }

  /**
   * issue without action
   */
  export type issueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue
     */
    select?: issueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue
     */
    omit?: issueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issueInclude<ExtArgs> | null
  }


  /**
   * Model pull_request
   */

  export type AggregatePull_request = {
    _count: Pull_requestCountAggregateOutputType | null
    _avg: Pull_requestAvgAggregateOutputType | null
    _sum: Pull_requestSumAggregateOutputType | null
    _min: Pull_requestMinAggregateOutputType | null
    _max: Pull_requestMaxAggregateOutputType | null
  }

  export type Pull_requestAvgAggregateOutputType = {
    id: number | null
    repository_id: number | null
    author_id: number | null
    source_repository_id: number | null
    target_repository_id: number | null
  }

  export type Pull_requestSumAggregateOutputType = {
    id: number | null
    repository_id: number | null
    author_id: number | null
    source_repository_id: number | null
    target_repository_id: number | null
  }

  export type Pull_requestMinAggregateOutputType = {
    id: number | null
    repository_id: number | null
    author_id: number | null
    source_branch: string | null
    target_branch: string | null
    status: $Enums.PullRequestStatus | null
    source_repository_id: number | null
    target_repository_id: number | null
    merged_at: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Pull_requestMaxAggregateOutputType = {
    id: number | null
    repository_id: number | null
    author_id: number | null
    source_branch: string | null
    target_branch: string | null
    status: $Enums.PullRequestStatus | null
    source_repository_id: number | null
    target_repository_id: number | null
    merged_at: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Pull_requestCountAggregateOutputType = {
    id: number
    repository_id: number
    author_id: number
    source_branch: number
    target_branch: number
    status: number
    source_repository_id: number
    target_repository_id: number
    merged_at: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Pull_requestAvgAggregateInputType = {
    id?: true
    repository_id?: true
    author_id?: true
    source_repository_id?: true
    target_repository_id?: true
  }

  export type Pull_requestSumAggregateInputType = {
    id?: true
    repository_id?: true
    author_id?: true
    source_repository_id?: true
    target_repository_id?: true
  }

  export type Pull_requestMinAggregateInputType = {
    id?: true
    repository_id?: true
    author_id?: true
    source_branch?: true
    target_branch?: true
    status?: true
    source_repository_id?: true
    target_repository_id?: true
    merged_at?: true
    created_at?: true
    updated_at?: true
  }

  export type Pull_requestMaxAggregateInputType = {
    id?: true
    repository_id?: true
    author_id?: true
    source_branch?: true
    target_branch?: true
    status?: true
    source_repository_id?: true
    target_repository_id?: true
    merged_at?: true
    created_at?: true
    updated_at?: true
  }

  export type Pull_requestCountAggregateInputType = {
    id?: true
    repository_id?: true
    author_id?: true
    source_branch?: true
    target_branch?: true
    status?: true
    source_repository_id?: true
    target_repository_id?: true
    merged_at?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Pull_requestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which pull_request to aggregate.
     */
    where?: pull_requestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pull_requests to fetch.
     */
    orderBy?: pull_requestOrderByWithRelationInput | pull_requestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: pull_requestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pull_requests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pull_requests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned pull_requests
    **/
    _count?: true | Pull_requestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Pull_requestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Pull_requestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Pull_requestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Pull_requestMaxAggregateInputType
  }

  export type GetPull_requestAggregateType<T extends Pull_requestAggregateArgs> = {
        [P in keyof T & keyof AggregatePull_request]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePull_request[P]>
      : GetScalarType<T[P], AggregatePull_request[P]>
  }




  export type pull_requestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: pull_requestWhereInput
    orderBy?: pull_requestOrderByWithAggregationInput | pull_requestOrderByWithAggregationInput[]
    by: Pull_requestScalarFieldEnum[] | Pull_requestScalarFieldEnum
    having?: pull_requestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Pull_requestCountAggregateInputType | true
    _avg?: Pull_requestAvgAggregateInputType
    _sum?: Pull_requestSumAggregateInputType
    _min?: Pull_requestMinAggregateInputType
    _max?: Pull_requestMaxAggregateInputType
  }

  export type Pull_requestGroupByOutputType = {
    id: number
    repository_id: number
    author_id: number | null
    source_branch: string
    target_branch: string
    status: $Enums.PullRequestStatus
    source_repository_id: number
    target_repository_id: number
    merged_at: Date | null
    created_at: Date
    updated_at: Date
    _count: Pull_requestCountAggregateOutputType | null
    _avg: Pull_requestAvgAggregateOutputType | null
    _sum: Pull_requestSumAggregateOutputType | null
    _min: Pull_requestMinAggregateOutputType | null
    _max: Pull_requestMaxAggregateOutputType | null
  }

  type GetPull_requestGroupByPayload<T extends pull_requestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Pull_requestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Pull_requestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Pull_requestGroupByOutputType[P]>
            : GetScalarType<T[P], Pull_requestGroupByOutputType[P]>
        }
      >
    >


  export type pull_requestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    repository_id?: boolean
    author_id?: boolean
    source_branch?: boolean
    target_branch?: boolean
    status?: boolean
    source_repository_id?: boolean
    target_repository_id?: boolean
    merged_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    repository?: boolean | repositoryDefaultArgs<ExtArgs>
    author?: boolean | pull_request$authorArgs<ExtArgs>
    source_repository?: boolean | repositoryDefaultArgs<ExtArgs>
    target_repository?: boolean | repositoryDefaultArgs<ExtArgs>
    pull_request_comment?: boolean | pull_request$pull_request_commentArgs<ExtArgs>
    _count?: boolean | Pull_requestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pull_request"]>

  export type pull_requestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    repository_id?: boolean
    author_id?: boolean
    source_branch?: boolean
    target_branch?: boolean
    status?: boolean
    source_repository_id?: boolean
    target_repository_id?: boolean
    merged_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    repository?: boolean | repositoryDefaultArgs<ExtArgs>
    author?: boolean | pull_request$authorArgs<ExtArgs>
    source_repository?: boolean | repositoryDefaultArgs<ExtArgs>
    target_repository?: boolean | repositoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pull_request"]>

  export type pull_requestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    repository_id?: boolean
    author_id?: boolean
    source_branch?: boolean
    target_branch?: boolean
    status?: boolean
    source_repository_id?: boolean
    target_repository_id?: boolean
    merged_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    repository?: boolean | repositoryDefaultArgs<ExtArgs>
    author?: boolean | pull_request$authorArgs<ExtArgs>
    source_repository?: boolean | repositoryDefaultArgs<ExtArgs>
    target_repository?: boolean | repositoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pull_request"]>

  export type pull_requestSelectScalar = {
    id?: boolean
    repository_id?: boolean
    author_id?: boolean
    source_branch?: boolean
    target_branch?: boolean
    status?: boolean
    source_repository_id?: boolean
    target_repository_id?: boolean
    merged_at?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type pull_requestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "repository_id" | "author_id" | "source_branch" | "target_branch" | "status" | "source_repository_id" | "target_repository_id" | "merged_at" | "created_at" | "updated_at", ExtArgs["result"]["pull_request"]>
  export type pull_requestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repository?: boolean | repositoryDefaultArgs<ExtArgs>
    author?: boolean | pull_request$authorArgs<ExtArgs>
    source_repository?: boolean | repositoryDefaultArgs<ExtArgs>
    target_repository?: boolean | repositoryDefaultArgs<ExtArgs>
    pull_request_comment?: boolean | pull_request$pull_request_commentArgs<ExtArgs>
    _count?: boolean | Pull_requestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type pull_requestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repository?: boolean | repositoryDefaultArgs<ExtArgs>
    author?: boolean | pull_request$authorArgs<ExtArgs>
    source_repository?: boolean | repositoryDefaultArgs<ExtArgs>
    target_repository?: boolean | repositoryDefaultArgs<ExtArgs>
  }
  export type pull_requestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repository?: boolean | repositoryDefaultArgs<ExtArgs>
    author?: boolean | pull_request$authorArgs<ExtArgs>
    source_repository?: boolean | repositoryDefaultArgs<ExtArgs>
    target_repository?: boolean | repositoryDefaultArgs<ExtArgs>
  }

  export type $pull_requestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "pull_request"
    objects: {
      repository: Prisma.$repositoryPayload<ExtArgs>
      author: Prisma.$usersPayload<ExtArgs> | null
      source_repository: Prisma.$repositoryPayload<ExtArgs>
      target_repository: Prisma.$repositoryPayload<ExtArgs>
      pull_request_comment: Prisma.$pull_request_commentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      repository_id: number
      author_id: number | null
      source_branch: string
      target_branch: string
      status: $Enums.PullRequestStatus
      source_repository_id: number
      target_repository_id: number
      merged_at: Date | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["pull_request"]>
    composites: {}
  }

  type pull_requestGetPayload<S extends boolean | null | undefined | pull_requestDefaultArgs> = $Result.GetResult<Prisma.$pull_requestPayload, S>

  type pull_requestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<pull_requestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Pull_requestCountAggregateInputType | true
    }

  export interface pull_requestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['pull_request'], meta: { name: 'pull_request' } }
    /**
     * Find zero or one Pull_request that matches the filter.
     * @param {pull_requestFindUniqueArgs} args - Arguments to find a Pull_request
     * @example
     * // Get one Pull_request
     * const pull_request = await prisma.pull_request.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends pull_requestFindUniqueArgs>(args: SelectSubset<T, pull_requestFindUniqueArgs<ExtArgs>>): Prisma__pull_requestClient<$Result.GetResult<Prisma.$pull_requestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Pull_request that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {pull_requestFindUniqueOrThrowArgs} args - Arguments to find a Pull_request
     * @example
     * // Get one Pull_request
     * const pull_request = await prisma.pull_request.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends pull_requestFindUniqueOrThrowArgs>(args: SelectSubset<T, pull_requestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__pull_requestClient<$Result.GetResult<Prisma.$pull_requestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pull_request that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pull_requestFindFirstArgs} args - Arguments to find a Pull_request
     * @example
     * // Get one Pull_request
     * const pull_request = await prisma.pull_request.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends pull_requestFindFirstArgs>(args?: SelectSubset<T, pull_requestFindFirstArgs<ExtArgs>>): Prisma__pull_requestClient<$Result.GetResult<Prisma.$pull_requestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pull_request that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pull_requestFindFirstOrThrowArgs} args - Arguments to find a Pull_request
     * @example
     * // Get one Pull_request
     * const pull_request = await prisma.pull_request.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends pull_requestFindFirstOrThrowArgs>(args?: SelectSubset<T, pull_requestFindFirstOrThrowArgs<ExtArgs>>): Prisma__pull_requestClient<$Result.GetResult<Prisma.$pull_requestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Pull_requests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pull_requestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pull_requests
     * const pull_requests = await prisma.pull_request.findMany()
     * 
     * // Get first 10 Pull_requests
     * const pull_requests = await prisma.pull_request.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pull_requestWithIdOnly = await prisma.pull_request.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends pull_requestFindManyArgs>(args?: SelectSubset<T, pull_requestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pull_requestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Pull_request.
     * @param {pull_requestCreateArgs} args - Arguments to create a Pull_request.
     * @example
     * // Create one Pull_request
     * const Pull_request = await prisma.pull_request.create({
     *   data: {
     *     // ... data to create a Pull_request
     *   }
     * })
     * 
     */
    create<T extends pull_requestCreateArgs>(args: SelectSubset<T, pull_requestCreateArgs<ExtArgs>>): Prisma__pull_requestClient<$Result.GetResult<Prisma.$pull_requestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Pull_requests.
     * @param {pull_requestCreateManyArgs} args - Arguments to create many Pull_requests.
     * @example
     * // Create many Pull_requests
     * const pull_request = await prisma.pull_request.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends pull_requestCreateManyArgs>(args?: SelectSubset<T, pull_requestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pull_requests and returns the data saved in the database.
     * @param {pull_requestCreateManyAndReturnArgs} args - Arguments to create many Pull_requests.
     * @example
     * // Create many Pull_requests
     * const pull_request = await prisma.pull_request.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pull_requests and only return the `id`
     * const pull_requestWithIdOnly = await prisma.pull_request.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends pull_requestCreateManyAndReturnArgs>(args?: SelectSubset<T, pull_requestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pull_requestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Pull_request.
     * @param {pull_requestDeleteArgs} args - Arguments to delete one Pull_request.
     * @example
     * // Delete one Pull_request
     * const Pull_request = await prisma.pull_request.delete({
     *   where: {
     *     // ... filter to delete one Pull_request
     *   }
     * })
     * 
     */
    delete<T extends pull_requestDeleteArgs>(args: SelectSubset<T, pull_requestDeleteArgs<ExtArgs>>): Prisma__pull_requestClient<$Result.GetResult<Prisma.$pull_requestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Pull_request.
     * @param {pull_requestUpdateArgs} args - Arguments to update one Pull_request.
     * @example
     * // Update one Pull_request
     * const pull_request = await prisma.pull_request.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends pull_requestUpdateArgs>(args: SelectSubset<T, pull_requestUpdateArgs<ExtArgs>>): Prisma__pull_requestClient<$Result.GetResult<Prisma.$pull_requestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Pull_requests.
     * @param {pull_requestDeleteManyArgs} args - Arguments to filter Pull_requests to delete.
     * @example
     * // Delete a few Pull_requests
     * const { count } = await prisma.pull_request.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends pull_requestDeleteManyArgs>(args?: SelectSubset<T, pull_requestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pull_requests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pull_requestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pull_requests
     * const pull_request = await prisma.pull_request.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends pull_requestUpdateManyArgs>(args: SelectSubset<T, pull_requestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pull_requests and returns the data updated in the database.
     * @param {pull_requestUpdateManyAndReturnArgs} args - Arguments to update many Pull_requests.
     * @example
     * // Update many Pull_requests
     * const pull_request = await prisma.pull_request.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Pull_requests and only return the `id`
     * const pull_requestWithIdOnly = await prisma.pull_request.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends pull_requestUpdateManyAndReturnArgs>(args: SelectSubset<T, pull_requestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pull_requestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Pull_request.
     * @param {pull_requestUpsertArgs} args - Arguments to update or create a Pull_request.
     * @example
     * // Update or create a Pull_request
     * const pull_request = await prisma.pull_request.upsert({
     *   create: {
     *     // ... data to create a Pull_request
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pull_request we want to update
     *   }
     * })
     */
    upsert<T extends pull_requestUpsertArgs>(args: SelectSubset<T, pull_requestUpsertArgs<ExtArgs>>): Prisma__pull_requestClient<$Result.GetResult<Prisma.$pull_requestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Pull_requests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pull_requestCountArgs} args - Arguments to filter Pull_requests to count.
     * @example
     * // Count the number of Pull_requests
     * const count = await prisma.pull_request.count({
     *   where: {
     *     // ... the filter for the Pull_requests we want to count
     *   }
     * })
    **/
    count<T extends pull_requestCountArgs>(
      args?: Subset<T, pull_requestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Pull_requestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pull_request.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Pull_requestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Pull_requestAggregateArgs>(args: Subset<T, Pull_requestAggregateArgs>): Prisma.PrismaPromise<GetPull_requestAggregateType<T>>

    /**
     * Group by Pull_request.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pull_requestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends pull_requestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: pull_requestGroupByArgs['orderBy'] }
        : { orderBy?: pull_requestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, pull_requestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPull_requestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the pull_request model
   */
  readonly fields: pull_requestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for pull_request.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__pull_requestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    repository<T extends repositoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, repositoryDefaultArgs<ExtArgs>>): Prisma__repositoryClient<$Result.GetResult<Prisma.$repositoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    author<T extends pull_request$authorArgs<ExtArgs> = {}>(args?: Subset<T, pull_request$authorArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    source_repository<T extends repositoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, repositoryDefaultArgs<ExtArgs>>): Prisma__repositoryClient<$Result.GetResult<Prisma.$repositoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    target_repository<T extends repositoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, repositoryDefaultArgs<ExtArgs>>): Prisma__repositoryClient<$Result.GetResult<Prisma.$repositoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    pull_request_comment<T extends pull_request$pull_request_commentArgs<ExtArgs> = {}>(args?: Subset<T, pull_request$pull_request_commentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pull_request_commentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the pull_request model
   */
  interface pull_requestFieldRefs {
    readonly id: FieldRef<"pull_request", 'Int'>
    readonly repository_id: FieldRef<"pull_request", 'Int'>
    readonly author_id: FieldRef<"pull_request", 'Int'>
    readonly source_branch: FieldRef<"pull_request", 'String'>
    readonly target_branch: FieldRef<"pull_request", 'String'>
    readonly status: FieldRef<"pull_request", 'PullRequestStatus'>
    readonly source_repository_id: FieldRef<"pull_request", 'Int'>
    readonly target_repository_id: FieldRef<"pull_request", 'Int'>
    readonly merged_at: FieldRef<"pull_request", 'DateTime'>
    readonly created_at: FieldRef<"pull_request", 'DateTime'>
    readonly updated_at: FieldRef<"pull_request", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * pull_request findUnique
   */
  export type pull_requestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request
     */
    select?: pull_requestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request
     */
    omit?: pull_requestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_requestInclude<ExtArgs> | null
    /**
     * Filter, which pull_request to fetch.
     */
    where: pull_requestWhereUniqueInput
  }

  /**
   * pull_request findUniqueOrThrow
   */
  export type pull_requestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request
     */
    select?: pull_requestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request
     */
    omit?: pull_requestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_requestInclude<ExtArgs> | null
    /**
     * Filter, which pull_request to fetch.
     */
    where: pull_requestWhereUniqueInput
  }

  /**
   * pull_request findFirst
   */
  export type pull_requestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request
     */
    select?: pull_requestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request
     */
    omit?: pull_requestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_requestInclude<ExtArgs> | null
    /**
     * Filter, which pull_request to fetch.
     */
    where?: pull_requestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pull_requests to fetch.
     */
    orderBy?: pull_requestOrderByWithRelationInput | pull_requestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pull_requests.
     */
    cursor?: pull_requestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pull_requests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pull_requests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pull_requests.
     */
    distinct?: Pull_requestScalarFieldEnum | Pull_requestScalarFieldEnum[]
  }

  /**
   * pull_request findFirstOrThrow
   */
  export type pull_requestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request
     */
    select?: pull_requestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request
     */
    omit?: pull_requestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_requestInclude<ExtArgs> | null
    /**
     * Filter, which pull_request to fetch.
     */
    where?: pull_requestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pull_requests to fetch.
     */
    orderBy?: pull_requestOrderByWithRelationInput | pull_requestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pull_requests.
     */
    cursor?: pull_requestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pull_requests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pull_requests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pull_requests.
     */
    distinct?: Pull_requestScalarFieldEnum | Pull_requestScalarFieldEnum[]
  }

  /**
   * pull_request findMany
   */
  export type pull_requestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request
     */
    select?: pull_requestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request
     */
    omit?: pull_requestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_requestInclude<ExtArgs> | null
    /**
     * Filter, which pull_requests to fetch.
     */
    where?: pull_requestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pull_requests to fetch.
     */
    orderBy?: pull_requestOrderByWithRelationInput | pull_requestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing pull_requests.
     */
    cursor?: pull_requestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pull_requests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pull_requests.
     */
    skip?: number
    distinct?: Pull_requestScalarFieldEnum | Pull_requestScalarFieldEnum[]
  }

  /**
   * pull_request create
   */
  export type pull_requestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request
     */
    select?: pull_requestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request
     */
    omit?: pull_requestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_requestInclude<ExtArgs> | null
    /**
     * The data needed to create a pull_request.
     */
    data: XOR<pull_requestCreateInput, pull_requestUncheckedCreateInput>
  }

  /**
   * pull_request createMany
   */
  export type pull_requestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many pull_requests.
     */
    data: pull_requestCreateManyInput | pull_requestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * pull_request createManyAndReturn
   */
  export type pull_requestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request
     */
    select?: pull_requestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request
     */
    omit?: pull_requestOmit<ExtArgs> | null
    /**
     * The data used to create many pull_requests.
     */
    data: pull_requestCreateManyInput | pull_requestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_requestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * pull_request update
   */
  export type pull_requestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request
     */
    select?: pull_requestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request
     */
    omit?: pull_requestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_requestInclude<ExtArgs> | null
    /**
     * The data needed to update a pull_request.
     */
    data: XOR<pull_requestUpdateInput, pull_requestUncheckedUpdateInput>
    /**
     * Choose, which pull_request to update.
     */
    where: pull_requestWhereUniqueInput
  }

  /**
   * pull_request updateMany
   */
  export type pull_requestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update pull_requests.
     */
    data: XOR<pull_requestUpdateManyMutationInput, pull_requestUncheckedUpdateManyInput>
    /**
     * Filter which pull_requests to update
     */
    where?: pull_requestWhereInput
    /**
     * Limit how many pull_requests to update.
     */
    limit?: number
  }

  /**
   * pull_request updateManyAndReturn
   */
  export type pull_requestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request
     */
    select?: pull_requestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request
     */
    omit?: pull_requestOmit<ExtArgs> | null
    /**
     * The data used to update pull_requests.
     */
    data: XOR<pull_requestUpdateManyMutationInput, pull_requestUncheckedUpdateManyInput>
    /**
     * Filter which pull_requests to update
     */
    where?: pull_requestWhereInput
    /**
     * Limit how many pull_requests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_requestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * pull_request upsert
   */
  export type pull_requestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request
     */
    select?: pull_requestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request
     */
    omit?: pull_requestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_requestInclude<ExtArgs> | null
    /**
     * The filter to search for the pull_request to update in case it exists.
     */
    where: pull_requestWhereUniqueInput
    /**
     * In case the pull_request found by the `where` argument doesn't exist, create a new pull_request with this data.
     */
    create: XOR<pull_requestCreateInput, pull_requestUncheckedCreateInput>
    /**
     * In case the pull_request was found with the provided `where` argument, update it with this data.
     */
    update: XOR<pull_requestUpdateInput, pull_requestUncheckedUpdateInput>
  }

  /**
   * pull_request delete
   */
  export type pull_requestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request
     */
    select?: pull_requestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request
     */
    omit?: pull_requestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_requestInclude<ExtArgs> | null
    /**
     * Filter which pull_request to delete.
     */
    where: pull_requestWhereUniqueInput
  }

  /**
   * pull_request deleteMany
   */
  export type pull_requestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which pull_requests to delete
     */
    where?: pull_requestWhereInput
    /**
     * Limit how many pull_requests to delete.
     */
    limit?: number
  }

  /**
   * pull_request.author
   */
  export type pull_request$authorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * pull_request.pull_request_comment
   */
  export type pull_request$pull_request_commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request_comment
     */
    select?: pull_request_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request_comment
     */
    omit?: pull_request_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_request_commentInclude<ExtArgs> | null
    where?: pull_request_commentWhereInput
    orderBy?: pull_request_commentOrderByWithRelationInput | pull_request_commentOrderByWithRelationInput[]
    cursor?: pull_request_commentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Pull_request_commentScalarFieldEnum | Pull_request_commentScalarFieldEnum[]
  }

  /**
   * pull_request without action
   */
  export type pull_requestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request
     */
    select?: pull_requestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request
     */
    omit?: pull_requestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_requestInclude<ExtArgs> | null
  }


  /**
   * Model issue_comment
   */

  export type AggregateIssue_comment = {
    _count: Issue_commentCountAggregateOutputType | null
    _avg: Issue_commentAvgAggregateOutputType | null
    _sum: Issue_commentSumAggregateOutputType | null
    _min: Issue_commentMinAggregateOutputType | null
    _max: Issue_commentMaxAggregateOutputType | null
  }

  export type Issue_commentAvgAggregateOutputType = {
    id: number | null
    issue_id: number | null
    author_id: number | null
  }

  export type Issue_commentSumAggregateOutputType = {
    id: number | null
    issue_id: number | null
    author_id: number | null
  }

  export type Issue_commentMinAggregateOutputType = {
    id: number | null
    issue_id: number | null
    author_id: number | null
    content: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Issue_commentMaxAggregateOutputType = {
    id: number | null
    issue_id: number | null
    author_id: number | null
    content: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Issue_commentCountAggregateOutputType = {
    id: number
    issue_id: number
    author_id: number
    content: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Issue_commentAvgAggregateInputType = {
    id?: true
    issue_id?: true
    author_id?: true
  }

  export type Issue_commentSumAggregateInputType = {
    id?: true
    issue_id?: true
    author_id?: true
  }

  export type Issue_commentMinAggregateInputType = {
    id?: true
    issue_id?: true
    author_id?: true
    content?: true
    created_at?: true
    updated_at?: true
  }

  export type Issue_commentMaxAggregateInputType = {
    id?: true
    issue_id?: true
    author_id?: true
    content?: true
    created_at?: true
    updated_at?: true
  }

  export type Issue_commentCountAggregateInputType = {
    id?: true
    issue_id?: true
    author_id?: true
    content?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Issue_commentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which issue_comment to aggregate.
     */
    where?: issue_commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of issue_comments to fetch.
     */
    orderBy?: issue_commentOrderByWithRelationInput | issue_commentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: issue_commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` issue_comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` issue_comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned issue_comments
    **/
    _count?: true | Issue_commentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Issue_commentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Issue_commentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Issue_commentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Issue_commentMaxAggregateInputType
  }

  export type GetIssue_commentAggregateType<T extends Issue_commentAggregateArgs> = {
        [P in keyof T & keyof AggregateIssue_comment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIssue_comment[P]>
      : GetScalarType<T[P], AggregateIssue_comment[P]>
  }




  export type issue_commentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: issue_commentWhereInput
    orderBy?: issue_commentOrderByWithAggregationInput | issue_commentOrderByWithAggregationInput[]
    by: Issue_commentScalarFieldEnum[] | Issue_commentScalarFieldEnum
    having?: issue_commentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Issue_commentCountAggregateInputType | true
    _avg?: Issue_commentAvgAggregateInputType
    _sum?: Issue_commentSumAggregateInputType
    _min?: Issue_commentMinAggregateInputType
    _max?: Issue_commentMaxAggregateInputType
  }

  export type Issue_commentGroupByOutputType = {
    id: number
    issue_id: number
    author_id: number | null
    content: string
    created_at: Date
    updated_at: Date
    _count: Issue_commentCountAggregateOutputType | null
    _avg: Issue_commentAvgAggregateOutputType | null
    _sum: Issue_commentSumAggregateOutputType | null
    _min: Issue_commentMinAggregateOutputType | null
    _max: Issue_commentMaxAggregateOutputType | null
  }

  type GetIssue_commentGroupByPayload<T extends issue_commentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Issue_commentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Issue_commentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Issue_commentGroupByOutputType[P]>
            : GetScalarType<T[P], Issue_commentGroupByOutputType[P]>
        }
      >
    >


  export type issue_commentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    issue_id?: boolean
    author_id?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
    issue?: boolean | issueDefaultArgs<ExtArgs>
    author?: boolean | issue_comment$authorArgs<ExtArgs>
  }, ExtArgs["result"]["issue_comment"]>

  export type issue_commentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    issue_id?: boolean
    author_id?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
    issue?: boolean | issueDefaultArgs<ExtArgs>
    author?: boolean | issue_comment$authorArgs<ExtArgs>
  }, ExtArgs["result"]["issue_comment"]>

  export type issue_commentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    issue_id?: boolean
    author_id?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
    issue?: boolean | issueDefaultArgs<ExtArgs>
    author?: boolean | issue_comment$authorArgs<ExtArgs>
  }, ExtArgs["result"]["issue_comment"]>

  export type issue_commentSelectScalar = {
    id?: boolean
    issue_id?: boolean
    author_id?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type issue_commentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "issue_id" | "author_id" | "content" | "created_at" | "updated_at", ExtArgs["result"]["issue_comment"]>
  export type issue_commentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    issue?: boolean | issueDefaultArgs<ExtArgs>
    author?: boolean | issue_comment$authorArgs<ExtArgs>
  }
  export type issue_commentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    issue?: boolean | issueDefaultArgs<ExtArgs>
    author?: boolean | issue_comment$authorArgs<ExtArgs>
  }
  export type issue_commentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    issue?: boolean | issueDefaultArgs<ExtArgs>
    author?: boolean | issue_comment$authorArgs<ExtArgs>
  }

  export type $issue_commentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "issue_comment"
    objects: {
      issue: Prisma.$issuePayload<ExtArgs>
      author: Prisma.$usersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      issue_id: number
      author_id: number | null
      content: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["issue_comment"]>
    composites: {}
  }

  type issue_commentGetPayload<S extends boolean | null | undefined | issue_commentDefaultArgs> = $Result.GetResult<Prisma.$issue_commentPayload, S>

  type issue_commentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<issue_commentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Issue_commentCountAggregateInputType | true
    }

  export interface issue_commentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['issue_comment'], meta: { name: 'issue_comment' } }
    /**
     * Find zero or one Issue_comment that matches the filter.
     * @param {issue_commentFindUniqueArgs} args - Arguments to find a Issue_comment
     * @example
     * // Get one Issue_comment
     * const issue_comment = await prisma.issue_comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends issue_commentFindUniqueArgs>(args: SelectSubset<T, issue_commentFindUniqueArgs<ExtArgs>>): Prisma__issue_commentClient<$Result.GetResult<Prisma.$issue_commentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Issue_comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {issue_commentFindUniqueOrThrowArgs} args - Arguments to find a Issue_comment
     * @example
     * // Get one Issue_comment
     * const issue_comment = await prisma.issue_comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends issue_commentFindUniqueOrThrowArgs>(args: SelectSubset<T, issue_commentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__issue_commentClient<$Result.GetResult<Prisma.$issue_commentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Issue_comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {issue_commentFindFirstArgs} args - Arguments to find a Issue_comment
     * @example
     * // Get one Issue_comment
     * const issue_comment = await prisma.issue_comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends issue_commentFindFirstArgs>(args?: SelectSubset<T, issue_commentFindFirstArgs<ExtArgs>>): Prisma__issue_commentClient<$Result.GetResult<Prisma.$issue_commentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Issue_comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {issue_commentFindFirstOrThrowArgs} args - Arguments to find a Issue_comment
     * @example
     * // Get one Issue_comment
     * const issue_comment = await prisma.issue_comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends issue_commentFindFirstOrThrowArgs>(args?: SelectSubset<T, issue_commentFindFirstOrThrowArgs<ExtArgs>>): Prisma__issue_commentClient<$Result.GetResult<Prisma.$issue_commentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Issue_comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {issue_commentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Issue_comments
     * const issue_comments = await prisma.issue_comment.findMany()
     * 
     * // Get first 10 Issue_comments
     * const issue_comments = await prisma.issue_comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const issue_commentWithIdOnly = await prisma.issue_comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends issue_commentFindManyArgs>(args?: SelectSubset<T, issue_commentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$issue_commentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Issue_comment.
     * @param {issue_commentCreateArgs} args - Arguments to create a Issue_comment.
     * @example
     * // Create one Issue_comment
     * const Issue_comment = await prisma.issue_comment.create({
     *   data: {
     *     // ... data to create a Issue_comment
     *   }
     * })
     * 
     */
    create<T extends issue_commentCreateArgs>(args: SelectSubset<T, issue_commentCreateArgs<ExtArgs>>): Prisma__issue_commentClient<$Result.GetResult<Prisma.$issue_commentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Issue_comments.
     * @param {issue_commentCreateManyArgs} args - Arguments to create many Issue_comments.
     * @example
     * // Create many Issue_comments
     * const issue_comment = await prisma.issue_comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends issue_commentCreateManyArgs>(args?: SelectSubset<T, issue_commentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Issue_comments and returns the data saved in the database.
     * @param {issue_commentCreateManyAndReturnArgs} args - Arguments to create many Issue_comments.
     * @example
     * // Create many Issue_comments
     * const issue_comment = await prisma.issue_comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Issue_comments and only return the `id`
     * const issue_commentWithIdOnly = await prisma.issue_comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends issue_commentCreateManyAndReturnArgs>(args?: SelectSubset<T, issue_commentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$issue_commentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Issue_comment.
     * @param {issue_commentDeleteArgs} args - Arguments to delete one Issue_comment.
     * @example
     * // Delete one Issue_comment
     * const Issue_comment = await prisma.issue_comment.delete({
     *   where: {
     *     // ... filter to delete one Issue_comment
     *   }
     * })
     * 
     */
    delete<T extends issue_commentDeleteArgs>(args: SelectSubset<T, issue_commentDeleteArgs<ExtArgs>>): Prisma__issue_commentClient<$Result.GetResult<Prisma.$issue_commentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Issue_comment.
     * @param {issue_commentUpdateArgs} args - Arguments to update one Issue_comment.
     * @example
     * // Update one Issue_comment
     * const issue_comment = await prisma.issue_comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends issue_commentUpdateArgs>(args: SelectSubset<T, issue_commentUpdateArgs<ExtArgs>>): Prisma__issue_commentClient<$Result.GetResult<Prisma.$issue_commentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Issue_comments.
     * @param {issue_commentDeleteManyArgs} args - Arguments to filter Issue_comments to delete.
     * @example
     * // Delete a few Issue_comments
     * const { count } = await prisma.issue_comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends issue_commentDeleteManyArgs>(args?: SelectSubset<T, issue_commentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Issue_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {issue_commentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Issue_comments
     * const issue_comment = await prisma.issue_comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends issue_commentUpdateManyArgs>(args: SelectSubset<T, issue_commentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Issue_comments and returns the data updated in the database.
     * @param {issue_commentUpdateManyAndReturnArgs} args - Arguments to update many Issue_comments.
     * @example
     * // Update many Issue_comments
     * const issue_comment = await prisma.issue_comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Issue_comments and only return the `id`
     * const issue_commentWithIdOnly = await prisma.issue_comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends issue_commentUpdateManyAndReturnArgs>(args: SelectSubset<T, issue_commentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$issue_commentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Issue_comment.
     * @param {issue_commentUpsertArgs} args - Arguments to update or create a Issue_comment.
     * @example
     * // Update or create a Issue_comment
     * const issue_comment = await prisma.issue_comment.upsert({
     *   create: {
     *     // ... data to create a Issue_comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Issue_comment we want to update
     *   }
     * })
     */
    upsert<T extends issue_commentUpsertArgs>(args: SelectSubset<T, issue_commentUpsertArgs<ExtArgs>>): Prisma__issue_commentClient<$Result.GetResult<Prisma.$issue_commentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Issue_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {issue_commentCountArgs} args - Arguments to filter Issue_comments to count.
     * @example
     * // Count the number of Issue_comments
     * const count = await prisma.issue_comment.count({
     *   where: {
     *     // ... the filter for the Issue_comments we want to count
     *   }
     * })
    **/
    count<T extends issue_commentCountArgs>(
      args?: Subset<T, issue_commentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Issue_commentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Issue_comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Issue_commentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Issue_commentAggregateArgs>(args: Subset<T, Issue_commentAggregateArgs>): Prisma.PrismaPromise<GetIssue_commentAggregateType<T>>

    /**
     * Group by Issue_comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {issue_commentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends issue_commentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: issue_commentGroupByArgs['orderBy'] }
        : { orderBy?: issue_commentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, issue_commentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIssue_commentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the issue_comment model
   */
  readonly fields: issue_commentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for issue_comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__issue_commentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    issue<T extends issueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, issueDefaultArgs<ExtArgs>>): Prisma__issueClient<$Result.GetResult<Prisma.$issuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    author<T extends issue_comment$authorArgs<ExtArgs> = {}>(args?: Subset<T, issue_comment$authorArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the issue_comment model
   */
  interface issue_commentFieldRefs {
    readonly id: FieldRef<"issue_comment", 'Int'>
    readonly issue_id: FieldRef<"issue_comment", 'Int'>
    readonly author_id: FieldRef<"issue_comment", 'Int'>
    readonly content: FieldRef<"issue_comment", 'String'>
    readonly created_at: FieldRef<"issue_comment", 'DateTime'>
    readonly updated_at: FieldRef<"issue_comment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * issue_comment findUnique
   */
  export type issue_commentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue_comment
     */
    select?: issue_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue_comment
     */
    omit?: issue_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issue_commentInclude<ExtArgs> | null
    /**
     * Filter, which issue_comment to fetch.
     */
    where: issue_commentWhereUniqueInput
  }

  /**
   * issue_comment findUniqueOrThrow
   */
  export type issue_commentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue_comment
     */
    select?: issue_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue_comment
     */
    omit?: issue_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issue_commentInclude<ExtArgs> | null
    /**
     * Filter, which issue_comment to fetch.
     */
    where: issue_commentWhereUniqueInput
  }

  /**
   * issue_comment findFirst
   */
  export type issue_commentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue_comment
     */
    select?: issue_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue_comment
     */
    omit?: issue_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issue_commentInclude<ExtArgs> | null
    /**
     * Filter, which issue_comment to fetch.
     */
    where?: issue_commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of issue_comments to fetch.
     */
    orderBy?: issue_commentOrderByWithRelationInput | issue_commentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for issue_comments.
     */
    cursor?: issue_commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` issue_comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` issue_comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of issue_comments.
     */
    distinct?: Issue_commentScalarFieldEnum | Issue_commentScalarFieldEnum[]
  }

  /**
   * issue_comment findFirstOrThrow
   */
  export type issue_commentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue_comment
     */
    select?: issue_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue_comment
     */
    omit?: issue_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issue_commentInclude<ExtArgs> | null
    /**
     * Filter, which issue_comment to fetch.
     */
    where?: issue_commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of issue_comments to fetch.
     */
    orderBy?: issue_commentOrderByWithRelationInput | issue_commentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for issue_comments.
     */
    cursor?: issue_commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` issue_comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` issue_comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of issue_comments.
     */
    distinct?: Issue_commentScalarFieldEnum | Issue_commentScalarFieldEnum[]
  }

  /**
   * issue_comment findMany
   */
  export type issue_commentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue_comment
     */
    select?: issue_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue_comment
     */
    omit?: issue_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issue_commentInclude<ExtArgs> | null
    /**
     * Filter, which issue_comments to fetch.
     */
    where?: issue_commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of issue_comments to fetch.
     */
    orderBy?: issue_commentOrderByWithRelationInput | issue_commentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing issue_comments.
     */
    cursor?: issue_commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` issue_comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` issue_comments.
     */
    skip?: number
    distinct?: Issue_commentScalarFieldEnum | Issue_commentScalarFieldEnum[]
  }

  /**
   * issue_comment create
   */
  export type issue_commentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue_comment
     */
    select?: issue_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue_comment
     */
    omit?: issue_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issue_commentInclude<ExtArgs> | null
    /**
     * The data needed to create a issue_comment.
     */
    data: XOR<issue_commentCreateInput, issue_commentUncheckedCreateInput>
  }

  /**
   * issue_comment createMany
   */
  export type issue_commentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many issue_comments.
     */
    data: issue_commentCreateManyInput | issue_commentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * issue_comment createManyAndReturn
   */
  export type issue_commentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue_comment
     */
    select?: issue_commentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the issue_comment
     */
    omit?: issue_commentOmit<ExtArgs> | null
    /**
     * The data used to create many issue_comments.
     */
    data: issue_commentCreateManyInput | issue_commentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issue_commentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * issue_comment update
   */
  export type issue_commentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue_comment
     */
    select?: issue_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue_comment
     */
    omit?: issue_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issue_commentInclude<ExtArgs> | null
    /**
     * The data needed to update a issue_comment.
     */
    data: XOR<issue_commentUpdateInput, issue_commentUncheckedUpdateInput>
    /**
     * Choose, which issue_comment to update.
     */
    where: issue_commentWhereUniqueInput
  }

  /**
   * issue_comment updateMany
   */
  export type issue_commentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update issue_comments.
     */
    data: XOR<issue_commentUpdateManyMutationInput, issue_commentUncheckedUpdateManyInput>
    /**
     * Filter which issue_comments to update
     */
    where?: issue_commentWhereInput
    /**
     * Limit how many issue_comments to update.
     */
    limit?: number
  }

  /**
   * issue_comment updateManyAndReturn
   */
  export type issue_commentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue_comment
     */
    select?: issue_commentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the issue_comment
     */
    omit?: issue_commentOmit<ExtArgs> | null
    /**
     * The data used to update issue_comments.
     */
    data: XOR<issue_commentUpdateManyMutationInput, issue_commentUncheckedUpdateManyInput>
    /**
     * Filter which issue_comments to update
     */
    where?: issue_commentWhereInput
    /**
     * Limit how many issue_comments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issue_commentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * issue_comment upsert
   */
  export type issue_commentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue_comment
     */
    select?: issue_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue_comment
     */
    omit?: issue_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issue_commentInclude<ExtArgs> | null
    /**
     * The filter to search for the issue_comment to update in case it exists.
     */
    where: issue_commentWhereUniqueInput
    /**
     * In case the issue_comment found by the `where` argument doesn't exist, create a new issue_comment with this data.
     */
    create: XOR<issue_commentCreateInput, issue_commentUncheckedCreateInput>
    /**
     * In case the issue_comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<issue_commentUpdateInput, issue_commentUncheckedUpdateInput>
  }

  /**
   * issue_comment delete
   */
  export type issue_commentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue_comment
     */
    select?: issue_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue_comment
     */
    omit?: issue_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issue_commentInclude<ExtArgs> | null
    /**
     * Filter which issue_comment to delete.
     */
    where: issue_commentWhereUniqueInput
  }

  /**
   * issue_comment deleteMany
   */
  export type issue_commentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which issue_comments to delete
     */
    where?: issue_commentWhereInput
    /**
     * Limit how many issue_comments to delete.
     */
    limit?: number
  }

  /**
   * issue_comment.author
   */
  export type issue_comment$authorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * issue_comment without action
   */
  export type issue_commentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the issue_comment
     */
    select?: issue_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the issue_comment
     */
    omit?: issue_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: issue_commentInclude<ExtArgs> | null
  }


  /**
   * Model pull_request_comment
   */

  export type AggregatePull_request_comment = {
    _count: Pull_request_commentCountAggregateOutputType | null
    _avg: Pull_request_commentAvgAggregateOutputType | null
    _sum: Pull_request_commentSumAggregateOutputType | null
    _min: Pull_request_commentMinAggregateOutputType | null
    _max: Pull_request_commentMaxAggregateOutputType | null
  }

  export type Pull_request_commentAvgAggregateOutputType = {
    id: number | null
    pull_request_id: number | null
    author_id: number | null
  }

  export type Pull_request_commentSumAggregateOutputType = {
    id: number | null
    pull_request_id: number | null
    author_id: number | null
  }

  export type Pull_request_commentMinAggregateOutputType = {
    id: number | null
    pull_request_id: number | null
    author_id: number | null
    content: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Pull_request_commentMaxAggregateOutputType = {
    id: number | null
    pull_request_id: number | null
    author_id: number | null
    content: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Pull_request_commentCountAggregateOutputType = {
    id: number
    pull_request_id: number
    author_id: number
    content: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Pull_request_commentAvgAggregateInputType = {
    id?: true
    pull_request_id?: true
    author_id?: true
  }

  export type Pull_request_commentSumAggregateInputType = {
    id?: true
    pull_request_id?: true
    author_id?: true
  }

  export type Pull_request_commentMinAggregateInputType = {
    id?: true
    pull_request_id?: true
    author_id?: true
    content?: true
    created_at?: true
    updated_at?: true
  }

  export type Pull_request_commentMaxAggregateInputType = {
    id?: true
    pull_request_id?: true
    author_id?: true
    content?: true
    created_at?: true
    updated_at?: true
  }

  export type Pull_request_commentCountAggregateInputType = {
    id?: true
    pull_request_id?: true
    author_id?: true
    content?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Pull_request_commentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which pull_request_comment to aggregate.
     */
    where?: pull_request_commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pull_request_comments to fetch.
     */
    orderBy?: pull_request_commentOrderByWithRelationInput | pull_request_commentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: pull_request_commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pull_request_comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pull_request_comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned pull_request_comments
    **/
    _count?: true | Pull_request_commentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Pull_request_commentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Pull_request_commentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Pull_request_commentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Pull_request_commentMaxAggregateInputType
  }

  export type GetPull_request_commentAggregateType<T extends Pull_request_commentAggregateArgs> = {
        [P in keyof T & keyof AggregatePull_request_comment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePull_request_comment[P]>
      : GetScalarType<T[P], AggregatePull_request_comment[P]>
  }




  export type pull_request_commentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: pull_request_commentWhereInput
    orderBy?: pull_request_commentOrderByWithAggregationInput | pull_request_commentOrderByWithAggregationInput[]
    by: Pull_request_commentScalarFieldEnum[] | Pull_request_commentScalarFieldEnum
    having?: pull_request_commentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Pull_request_commentCountAggregateInputType | true
    _avg?: Pull_request_commentAvgAggregateInputType
    _sum?: Pull_request_commentSumAggregateInputType
    _min?: Pull_request_commentMinAggregateInputType
    _max?: Pull_request_commentMaxAggregateInputType
  }

  export type Pull_request_commentGroupByOutputType = {
    id: number
    pull_request_id: number
    author_id: number | null
    content: string
    created_at: Date
    updated_at: Date
    _count: Pull_request_commentCountAggregateOutputType | null
    _avg: Pull_request_commentAvgAggregateOutputType | null
    _sum: Pull_request_commentSumAggregateOutputType | null
    _min: Pull_request_commentMinAggregateOutputType | null
    _max: Pull_request_commentMaxAggregateOutputType | null
  }

  type GetPull_request_commentGroupByPayload<T extends pull_request_commentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Pull_request_commentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Pull_request_commentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Pull_request_commentGroupByOutputType[P]>
            : GetScalarType<T[P], Pull_request_commentGroupByOutputType[P]>
        }
      >
    >


  export type pull_request_commentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pull_request_id?: boolean
    author_id?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
    pull_request?: boolean | pull_requestDefaultArgs<ExtArgs>
    author?: boolean | pull_request_comment$authorArgs<ExtArgs>
  }, ExtArgs["result"]["pull_request_comment"]>

  export type pull_request_commentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pull_request_id?: boolean
    author_id?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
    pull_request?: boolean | pull_requestDefaultArgs<ExtArgs>
    author?: boolean | pull_request_comment$authorArgs<ExtArgs>
  }, ExtArgs["result"]["pull_request_comment"]>

  export type pull_request_commentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pull_request_id?: boolean
    author_id?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
    pull_request?: boolean | pull_requestDefaultArgs<ExtArgs>
    author?: boolean | pull_request_comment$authorArgs<ExtArgs>
  }, ExtArgs["result"]["pull_request_comment"]>

  export type pull_request_commentSelectScalar = {
    id?: boolean
    pull_request_id?: boolean
    author_id?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type pull_request_commentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "pull_request_id" | "author_id" | "content" | "created_at" | "updated_at", ExtArgs["result"]["pull_request_comment"]>
  export type pull_request_commentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pull_request?: boolean | pull_requestDefaultArgs<ExtArgs>
    author?: boolean | pull_request_comment$authorArgs<ExtArgs>
  }
  export type pull_request_commentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pull_request?: boolean | pull_requestDefaultArgs<ExtArgs>
    author?: boolean | pull_request_comment$authorArgs<ExtArgs>
  }
  export type pull_request_commentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pull_request?: boolean | pull_requestDefaultArgs<ExtArgs>
    author?: boolean | pull_request_comment$authorArgs<ExtArgs>
  }

  export type $pull_request_commentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "pull_request_comment"
    objects: {
      pull_request: Prisma.$pull_requestPayload<ExtArgs>
      author: Prisma.$usersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      pull_request_id: number
      author_id: number | null
      content: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["pull_request_comment"]>
    composites: {}
  }

  type pull_request_commentGetPayload<S extends boolean | null | undefined | pull_request_commentDefaultArgs> = $Result.GetResult<Prisma.$pull_request_commentPayload, S>

  type pull_request_commentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<pull_request_commentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Pull_request_commentCountAggregateInputType | true
    }

  export interface pull_request_commentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['pull_request_comment'], meta: { name: 'pull_request_comment' } }
    /**
     * Find zero or one Pull_request_comment that matches the filter.
     * @param {pull_request_commentFindUniqueArgs} args - Arguments to find a Pull_request_comment
     * @example
     * // Get one Pull_request_comment
     * const pull_request_comment = await prisma.pull_request_comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends pull_request_commentFindUniqueArgs>(args: SelectSubset<T, pull_request_commentFindUniqueArgs<ExtArgs>>): Prisma__pull_request_commentClient<$Result.GetResult<Prisma.$pull_request_commentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Pull_request_comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {pull_request_commentFindUniqueOrThrowArgs} args - Arguments to find a Pull_request_comment
     * @example
     * // Get one Pull_request_comment
     * const pull_request_comment = await prisma.pull_request_comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends pull_request_commentFindUniqueOrThrowArgs>(args: SelectSubset<T, pull_request_commentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__pull_request_commentClient<$Result.GetResult<Prisma.$pull_request_commentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pull_request_comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pull_request_commentFindFirstArgs} args - Arguments to find a Pull_request_comment
     * @example
     * // Get one Pull_request_comment
     * const pull_request_comment = await prisma.pull_request_comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends pull_request_commentFindFirstArgs>(args?: SelectSubset<T, pull_request_commentFindFirstArgs<ExtArgs>>): Prisma__pull_request_commentClient<$Result.GetResult<Prisma.$pull_request_commentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pull_request_comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pull_request_commentFindFirstOrThrowArgs} args - Arguments to find a Pull_request_comment
     * @example
     * // Get one Pull_request_comment
     * const pull_request_comment = await prisma.pull_request_comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends pull_request_commentFindFirstOrThrowArgs>(args?: SelectSubset<T, pull_request_commentFindFirstOrThrowArgs<ExtArgs>>): Prisma__pull_request_commentClient<$Result.GetResult<Prisma.$pull_request_commentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Pull_request_comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pull_request_commentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pull_request_comments
     * const pull_request_comments = await prisma.pull_request_comment.findMany()
     * 
     * // Get first 10 Pull_request_comments
     * const pull_request_comments = await prisma.pull_request_comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pull_request_commentWithIdOnly = await prisma.pull_request_comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends pull_request_commentFindManyArgs>(args?: SelectSubset<T, pull_request_commentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pull_request_commentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Pull_request_comment.
     * @param {pull_request_commentCreateArgs} args - Arguments to create a Pull_request_comment.
     * @example
     * // Create one Pull_request_comment
     * const Pull_request_comment = await prisma.pull_request_comment.create({
     *   data: {
     *     // ... data to create a Pull_request_comment
     *   }
     * })
     * 
     */
    create<T extends pull_request_commentCreateArgs>(args: SelectSubset<T, pull_request_commentCreateArgs<ExtArgs>>): Prisma__pull_request_commentClient<$Result.GetResult<Prisma.$pull_request_commentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Pull_request_comments.
     * @param {pull_request_commentCreateManyArgs} args - Arguments to create many Pull_request_comments.
     * @example
     * // Create many Pull_request_comments
     * const pull_request_comment = await prisma.pull_request_comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends pull_request_commentCreateManyArgs>(args?: SelectSubset<T, pull_request_commentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pull_request_comments and returns the data saved in the database.
     * @param {pull_request_commentCreateManyAndReturnArgs} args - Arguments to create many Pull_request_comments.
     * @example
     * // Create many Pull_request_comments
     * const pull_request_comment = await prisma.pull_request_comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pull_request_comments and only return the `id`
     * const pull_request_commentWithIdOnly = await prisma.pull_request_comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends pull_request_commentCreateManyAndReturnArgs>(args?: SelectSubset<T, pull_request_commentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pull_request_commentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Pull_request_comment.
     * @param {pull_request_commentDeleteArgs} args - Arguments to delete one Pull_request_comment.
     * @example
     * // Delete one Pull_request_comment
     * const Pull_request_comment = await prisma.pull_request_comment.delete({
     *   where: {
     *     // ... filter to delete one Pull_request_comment
     *   }
     * })
     * 
     */
    delete<T extends pull_request_commentDeleteArgs>(args: SelectSubset<T, pull_request_commentDeleteArgs<ExtArgs>>): Prisma__pull_request_commentClient<$Result.GetResult<Prisma.$pull_request_commentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Pull_request_comment.
     * @param {pull_request_commentUpdateArgs} args - Arguments to update one Pull_request_comment.
     * @example
     * // Update one Pull_request_comment
     * const pull_request_comment = await prisma.pull_request_comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends pull_request_commentUpdateArgs>(args: SelectSubset<T, pull_request_commentUpdateArgs<ExtArgs>>): Prisma__pull_request_commentClient<$Result.GetResult<Prisma.$pull_request_commentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Pull_request_comments.
     * @param {pull_request_commentDeleteManyArgs} args - Arguments to filter Pull_request_comments to delete.
     * @example
     * // Delete a few Pull_request_comments
     * const { count } = await prisma.pull_request_comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends pull_request_commentDeleteManyArgs>(args?: SelectSubset<T, pull_request_commentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pull_request_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pull_request_commentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pull_request_comments
     * const pull_request_comment = await prisma.pull_request_comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends pull_request_commentUpdateManyArgs>(args: SelectSubset<T, pull_request_commentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pull_request_comments and returns the data updated in the database.
     * @param {pull_request_commentUpdateManyAndReturnArgs} args - Arguments to update many Pull_request_comments.
     * @example
     * // Update many Pull_request_comments
     * const pull_request_comment = await prisma.pull_request_comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Pull_request_comments and only return the `id`
     * const pull_request_commentWithIdOnly = await prisma.pull_request_comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends pull_request_commentUpdateManyAndReturnArgs>(args: SelectSubset<T, pull_request_commentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pull_request_commentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Pull_request_comment.
     * @param {pull_request_commentUpsertArgs} args - Arguments to update or create a Pull_request_comment.
     * @example
     * // Update or create a Pull_request_comment
     * const pull_request_comment = await prisma.pull_request_comment.upsert({
     *   create: {
     *     // ... data to create a Pull_request_comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pull_request_comment we want to update
     *   }
     * })
     */
    upsert<T extends pull_request_commentUpsertArgs>(args: SelectSubset<T, pull_request_commentUpsertArgs<ExtArgs>>): Prisma__pull_request_commentClient<$Result.GetResult<Prisma.$pull_request_commentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Pull_request_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pull_request_commentCountArgs} args - Arguments to filter Pull_request_comments to count.
     * @example
     * // Count the number of Pull_request_comments
     * const count = await prisma.pull_request_comment.count({
     *   where: {
     *     // ... the filter for the Pull_request_comments we want to count
     *   }
     * })
    **/
    count<T extends pull_request_commentCountArgs>(
      args?: Subset<T, pull_request_commentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Pull_request_commentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pull_request_comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Pull_request_commentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Pull_request_commentAggregateArgs>(args: Subset<T, Pull_request_commentAggregateArgs>): Prisma.PrismaPromise<GetPull_request_commentAggregateType<T>>

    /**
     * Group by Pull_request_comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pull_request_commentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends pull_request_commentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: pull_request_commentGroupByArgs['orderBy'] }
        : { orderBy?: pull_request_commentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, pull_request_commentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPull_request_commentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the pull_request_comment model
   */
  readonly fields: pull_request_commentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for pull_request_comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__pull_request_commentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pull_request<T extends pull_requestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, pull_requestDefaultArgs<ExtArgs>>): Prisma__pull_requestClient<$Result.GetResult<Prisma.$pull_requestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    author<T extends pull_request_comment$authorArgs<ExtArgs> = {}>(args?: Subset<T, pull_request_comment$authorArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the pull_request_comment model
   */
  interface pull_request_commentFieldRefs {
    readonly id: FieldRef<"pull_request_comment", 'Int'>
    readonly pull_request_id: FieldRef<"pull_request_comment", 'Int'>
    readonly author_id: FieldRef<"pull_request_comment", 'Int'>
    readonly content: FieldRef<"pull_request_comment", 'String'>
    readonly created_at: FieldRef<"pull_request_comment", 'DateTime'>
    readonly updated_at: FieldRef<"pull_request_comment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * pull_request_comment findUnique
   */
  export type pull_request_commentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request_comment
     */
    select?: pull_request_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request_comment
     */
    omit?: pull_request_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_request_commentInclude<ExtArgs> | null
    /**
     * Filter, which pull_request_comment to fetch.
     */
    where: pull_request_commentWhereUniqueInput
  }

  /**
   * pull_request_comment findUniqueOrThrow
   */
  export type pull_request_commentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request_comment
     */
    select?: pull_request_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request_comment
     */
    omit?: pull_request_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_request_commentInclude<ExtArgs> | null
    /**
     * Filter, which pull_request_comment to fetch.
     */
    where: pull_request_commentWhereUniqueInput
  }

  /**
   * pull_request_comment findFirst
   */
  export type pull_request_commentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request_comment
     */
    select?: pull_request_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request_comment
     */
    omit?: pull_request_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_request_commentInclude<ExtArgs> | null
    /**
     * Filter, which pull_request_comment to fetch.
     */
    where?: pull_request_commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pull_request_comments to fetch.
     */
    orderBy?: pull_request_commentOrderByWithRelationInput | pull_request_commentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pull_request_comments.
     */
    cursor?: pull_request_commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pull_request_comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pull_request_comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pull_request_comments.
     */
    distinct?: Pull_request_commentScalarFieldEnum | Pull_request_commentScalarFieldEnum[]
  }

  /**
   * pull_request_comment findFirstOrThrow
   */
  export type pull_request_commentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request_comment
     */
    select?: pull_request_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request_comment
     */
    omit?: pull_request_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_request_commentInclude<ExtArgs> | null
    /**
     * Filter, which pull_request_comment to fetch.
     */
    where?: pull_request_commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pull_request_comments to fetch.
     */
    orderBy?: pull_request_commentOrderByWithRelationInput | pull_request_commentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pull_request_comments.
     */
    cursor?: pull_request_commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pull_request_comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pull_request_comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pull_request_comments.
     */
    distinct?: Pull_request_commentScalarFieldEnum | Pull_request_commentScalarFieldEnum[]
  }

  /**
   * pull_request_comment findMany
   */
  export type pull_request_commentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request_comment
     */
    select?: pull_request_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request_comment
     */
    omit?: pull_request_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_request_commentInclude<ExtArgs> | null
    /**
     * Filter, which pull_request_comments to fetch.
     */
    where?: pull_request_commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pull_request_comments to fetch.
     */
    orderBy?: pull_request_commentOrderByWithRelationInput | pull_request_commentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing pull_request_comments.
     */
    cursor?: pull_request_commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pull_request_comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pull_request_comments.
     */
    skip?: number
    distinct?: Pull_request_commentScalarFieldEnum | Pull_request_commentScalarFieldEnum[]
  }

  /**
   * pull_request_comment create
   */
  export type pull_request_commentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request_comment
     */
    select?: pull_request_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request_comment
     */
    omit?: pull_request_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_request_commentInclude<ExtArgs> | null
    /**
     * The data needed to create a pull_request_comment.
     */
    data: XOR<pull_request_commentCreateInput, pull_request_commentUncheckedCreateInput>
  }

  /**
   * pull_request_comment createMany
   */
  export type pull_request_commentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many pull_request_comments.
     */
    data: pull_request_commentCreateManyInput | pull_request_commentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * pull_request_comment createManyAndReturn
   */
  export type pull_request_commentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request_comment
     */
    select?: pull_request_commentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request_comment
     */
    omit?: pull_request_commentOmit<ExtArgs> | null
    /**
     * The data used to create many pull_request_comments.
     */
    data: pull_request_commentCreateManyInput | pull_request_commentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_request_commentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * pull_request_comment update
   */
  export type pull_request_commentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request_comment
     */
    select?: pull_request_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request_comment
     */
    omit?: pull_request_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_request_commentInclude<ExtArgs> | null
    /**
     * The data needed to update a pull_request_comment.
     */
    data: XOR<pull_request_commentUpdateInput, pull_request_commentUncheckedUpdateInput>
    /**
     * Choose, which pull_request_comment to update.
     */
    where: pull_request_commentWhereUniqueInput
  }

  /**
   * pull_request_comment updateMany
   */
  export type pull_request_commentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update pull_request_comments.
     */
    data: XOR<pull_request_commentUpdateManyMutationInput, pull_request_commentUncheckedUpdateManyInput>
    /**
     * Filter which pull_request_comments to update
     */
    where?: pull_request_commentWhereInput
    /**
     * Limit how many pull_request_comments to update.
     */
    limit?: number
  }

  /**
   * pull_request_comment updateManyAndReturn
   */
  export type pull_request_commentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request_comment
     */
    select?: pull_request_commentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request_comment
     */
    omit?: pull_request_commentOmit<ExtArgs> | null
    /**
     * The data used to update pull_request_comments.
     */
    data: XOR<pull_request_commentUpdateManyMutationInput, pull_request_commentUncheckedUpdateManyInput>
    /**
     * Filter which pull_request_comments to update
     */
    where?: pull_request_commentWhereInput
    /**
     * Limit how many pull_request_comments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_request_commentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * pull_request_comment upsert
   */
  export type pull_request_commentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request_comment
     */
    select?: pull_request_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request_comment
     */
    omit?: pull_request_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_request_commentInclude<ExtArgs> | null
    /**
     * The filter to search for the pull_request_comment to update in case it exists.
     */
    where: pull_request_commentWhereUniqueInput
    /**
     * In case the pull_request_comment found by the `where` argument doesn't exist, create a new pull_request_comment with this data.
     */
    create: XOR<pull_request_commentCreateInput, pull_request_commentUncheckedCreateInput>
    /**
     * In case the pull_request_comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<pull_request_commentUpdateInput, pull_request_commentUncheckedUpdateInput>
  }

  /**
   * pull_request_comment delete
   */
  export type pull_request_commentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request_comment
     */
    select?: pull_request_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request_comment
     */
    omit?: pull_request_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_request_commentInclude<ExtArgs> | null
    /**
     * Filter which pull_request_comment to delete.
     */
    where: pull_request_commentWhereUniqueInput
  }

  /**
   * pull_request_comment deleteMany
   */
  export type pull_request_commentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which pull_request_comments to delete
     */
    where?: pull_request_commentWhereInput
    /**
     * Limit how many pull_request_comments to delete.
     */
    limit?: number
  }

  /**
   * pull_request_comment.author
   */
  export type pull_request_comment$authorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * pull_request_comment without action
   */
  export type pull_request_commentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pull_request_comment
     */
    select?: pull_request_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pull_request_comment
     */
    omit?: pull_request_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pull_request_commentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password_hash: 'password_hash',
    bio: 'bio',
    gitCliPassword: 'gitCliPassword',
    avatar_path: 'avatar_path',
    is_admin: 'is_admin',
    confirmed: 'confirmed',
    twoFactorSecret: 'twoFactorSecret',
    twoFactorEnabled: 'twoFactorEnabled',
    contribution_count: 'contribution_count',
    suspended: 'suspended',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const RepositoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    owner_user_id: 'owner_user_id',
    description: 'description',
    is_private: 'is_private',
    repoPath: 'repoPath',
    parent_id: 'parent_id',
    forked_at: 'forked_at',
    created_at: 'created_at',
    updated_at: 'updated_at',
    archived: 'archived',
    forks_count: 'forks_count',
    pull_requests_count: 'pull_requests_count'
  };

  export type RepositoryScalarFieldEnum = (typeof RepositoryScalarFieldEnum)[keyof typeof RepositoryScalarFieldEnum]


  export const Repository_accessScalarFieldEnum: {
    id: 'id',
    repository_id: 'repository_id',
    user_id: 'user_id',
    access_level: 'access_level',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Repository_accessScalarFieldEnum = (typeof Repository_accessScalarFieldEnum)[keyof typeof Repository_accessScalarFieldEnum]


  export const IssueScalarFieldEnum: {
    id: 'id',
    repository_id: 'repository_id',
    author_id: 'author_id',
    title: 'title',
    description: 'description',
    status: 'status',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type IssueScalarFieldEnum = (typeof IssueScalarFieldEnum)[keyof typeof IssueScalarFieldEnum]


  export const Pull_requestScalarFieldEnum: {
    id: 'id',
    repository_id: 'repository_id',
    author_id: 'author_id',
    source_branch: 'source_branch',
    target_branch: 'target_branch',
    status: 'status',
    source_repository_id: 'source_repository_id',
    target_repository_id: 'target_repository_id',
    merged_at: 'merged_at',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Pull_requestScalarFieldEnum = (typeof Pull_requestScalarFieldEnum)[keyof typeof Pull_requestScalarFieldEnum]


  export const Issue_commentScalarFieldEnum: {
    id: 'id',
    issue_id: 'issue_id',
    author_id: 'author_id',
    content: 'content',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Issue_commentScalarFieldEnum = (typeof Issue_commentScalarFieldEnum)[keyof typeof Issue_commentScalarFieldEnum]


  export const Pull_request_commentScalarFieldEnum: {
    id: 'id',
    pull_request_id: 'pull_request_id',
    author_id: 'author_id',
    content: 'content',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Pull_request_commentScalarFieldEnum = (typeof Pull_request_commentScalarFieldEnum)[keyof typeof Pull_request_commentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'RepositoryAccess'
   */
  export type EnumRepositoryAccessFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RepositoryAccess'>
    


  /**
   * Reference to a field of type 'RepositoryAccess[]'
   */
  export type ListEnumRepositoryAccessFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RepositoryAccess[]'>
    


  /**
   * Reference to a field of type 'PullRequestStatus'
   */
  export type EnumPullRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PullRequestStatus'>
    


  /**
   * Reference to a field of type 'PullRequestStatus[]'
   */
  export type ListEnumPullRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PullRequestStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: IntFilter<"users"> | number
    username?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    password_hash?: StringFilter<"users"> | string
    bio?: StringNullableFilter<"users"> | string | null
    gitCliPassword?: StringNullableFilter<"users"> | string | null
    avatar_path?: StringNullableFilter<"users"> | string | null
    is_admin?: BoolNullableFilter<"users"> | boolean | null
    confirmed?: BoolNullableFilter<"users"> | boolean | null
    twoFactorSecret?: StringNullableFilter<"users"> | string | null
    twoFactorEnabled?: BoolFilter<"users"> | boolean
    contribution_count?: IntNullableFilter<"users"> | number | null
    suspended?: BoolFilter<"users"> | boolean
    created_at?: DateTimeFilter<"users"> | Date | string
    updated_at?: DateTimeFilter<"users"> | Date | string
    repository?: RepositoryListRelationFilter
    repository_access?: Repository_accessListRelationFilter
    issue?: IssueListRelationFilter
    pull_request?: Pull_requestListRelationFilter
    issue_comment?: Issue_commentListRelationFilter
    pull_request_comment?: Pull_request_commentListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    bio?: SortOrderInput | SortOrder
    gitCliPassword?: SortOrderInput | SortOrder
    avatar_path?: SortOrderInput | SortOrder
    is_admin?: SortOrderInput | SortOrder
    confirmed?: SortOrderInput | SortOrder
    twoFactorSecret?: SortOrderInput | SortOrder
    twoFactorEnabled?: SortOrder
    contribution_count?: SortOrderInput | SortOrder
    suspended?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    repository?: repositoryOrderByRelationAggregateInput
    repository_access?: repository_accessOrderByRelationAggregateInput
    issue?: issueOrderByRelationAggregateInput
    pull_request?: pull_requestOrderByRelationAggregateInput
    issue_comment?: issue_commentOrderByRelationAggregateInput
    pull_request_comment?: pull_request_commentOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    password_hash?: StringFilter<"users"> | string
    bio?: StringNullableFilter<"users"> | string | null
    gitCliPassword?: StringNullableFilter<"users"> | string | null
    avatar_path?: StringNullableFilter<"users"> | string | null
    is_admin?: BoolNullableFilter<"users"> | boolean | null
    confirmed?: BoolNullableFilter<"users"> | boolean | null
    twoFactorSecret?: StringNullableFilter<"users"> | string | null
    twoFactorEnabled?: BoolFilter<"users"> | boolean
    contribution_count?: IntNullableFilter<"users"> | number | null
    suspended?: BoolFilter<"users"> | boolean
    created_at?: DateTimeFilter<"users"> | Date | string
    updated_at?: DateTimeFilter<"users"> | Date | string
    repository?: RepositoryListRelationFilter
    repository_access?: Repository_accessListRelationFilter
    issue?: IssueListRelationFilter
    pull_request?: Pull_requestListRelationFilter
    issue_comment?: Issue_commentListRelationFilter
    pull_request_comment?: Pull_request_commentListRelationFilter
  }, "id" | "username" | "email">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    bio?: SortOrderInput | SortOrder
    gitCliPassword?: SortOrderInput | SortOrder
    avatar_path?: SortOrderInput | SortOrder
    is_admin?: SortOrderInput | SortOrder
    confirmed?: SortOrderInput | SortOrder
    twoFactorSecret?: SortOrderInput | SortOrder
    twoFactorEnabled?: SortOrder
    contribution_count?: SortOrderInput | SortOrder
    suspended?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"users"> | number
    username?: StringWithAggregatesFilter<"users"> | string
    email?: StringWithAggregatesFilter<"users"> | string
    password_hash?: StringWithAggregatesFilter<"users"> | string
    bio?: StringNullableWithAggregatesFilter<"users"> | string | null
    gitCliPassword?: StringNullableWithAggregatesFilter<"users"> | string | null
    avatar_path?: StringNullableWithAggregatesFilter<"users"> | string | null
    is_admin?: BoolNullableWithAggregatesFilter<"users"> | boolean | null
    confirmed?: BoolNullableWithAggregatesFilter<"users"> | boolean | null
    twoFactorSecret?: StringNullableWithAggregatesFilter<"users"> | string | null
    twoFactorEnabled?: BoolWithAggregatesFilter<"users"> | boolean
    contribution_count?: IntNullableWithAggregatesFilter<"users"> | number | null
    suspended?: BoolWithAggregatesFilter<"users"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"users"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"users"> | Date | string
  }

  export type repositoryWhereInput = {
    AND?: repositoryWhereInput | repositoryWhereInput[]
    OR?: repositoryWhereInput[]
    NOT?: repositoryWhereInput | repositoryWhereInput[]
    id?: IntFilter<"repository"> | number
    name?: StringFilter<"repository"> | string
    owner_user_id?: IntFilter<"repository"> | number
    description?: StringNullableFilter<"repository"> | string | null
    is_private?: BoolNullableFilter<"repository"> | boolean | null
    repoPath?: StringNullableFilter<"repository"> | string | null
    parent_id?: IntNullableFilter<"repository"> | number | null
    forked_at?: DateTimeNullableFilter<"repository"> | Date | string | null
    created_at?: DateTimeFilter<"repository"> | Date | string
    updated_at?: DateTimeFilter<"repository"> | Date | string
    archived?: BoolFilter<"repository"> | boolean
    forks_count?: IntNullableFilter<"repository"> | number | null
    pull_requests_count?: IntNullableFilter<"repository"> | number | null
    owner?: XOR<UsersScalarRelationFilter, usersWhereInput>
    parent?: XOR<RepositoryNullableScalarRelationFilter, repositoryWhereInput> | null
    forks?: RepositoryListRelationFilter
    access?: Repository_accessListRelationFilter
    issue?: IssueListRelationFilter
    pull_request?: Pull_requestListRelationFilter
    source_pull_requests?: Pull_requestListRelationFilter
    target_pull_requests?: Pull_requestListRelationFilter
  }

  export type repositoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    owner_user_id?: SortOrder
    description?: SortOrderInput | SortOrder
    is_private?: SortOrderInput | SortOrder
    repoPath?: SortOrderInput | SortOrder
    parent_id?: SortOrderInput | SortOrder
    forked_at?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    archived?: SortOrder
    forks_count?: SortOrderInput | SortOrder
    pull_requests_count?: SortOrderInput | SortOrder
    owner?: usersOrderByWithRelationInput
    parent?: repositoryOrderByWithRelationInput
    forks?: repositoryOrderByRelationAggregateInput
    access?: repository_accessOrderByRelationAggregateInput
    issue?: issueOrderByRelationAggregateInput
    pull_request?: pull_requestOrderByRelationAggregateInput
    source_pull_requests?: pull_requestOrderByRelationAggregateInput
    target_pull_requests?: pull_requestOrderByRelationAggregateInput
  }

  export type repositoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: repositoryWhereInput | repositoryWhereInput[]
    OR?: repositoryWhereInput[]
    NOT?: repositoryWhereInput | repositoryWhereInput[]
    name?: StringFilter<"repository"> | string
    owner_user_id?: IntFilter<"repository"> | number
    description?: StringNullableFilter<"repository"> | string | null
    is_private?: BoolNullableFilter<"repository"> | boolean | null
    repoPath?: StringNullableFilter<"repository"> | string | null
    parent_id?: IntNullableFilter<"repository"> | number | null
    forked_at?: DateTimeNullableFilter<"repository"> | Date | string | null
    created_at?: DateTimeFilter<"repository"> | Date | string
    updated_at?: DateTimeFilter<"repository"> | Date | string
    archived?: BoolFilter<"repository"> | boolean
    forks_count?: IntNullableFilter<"repository"> | number | null
    pull_requests_count?: IntNullableFilter<"repository"> | number | null
    owner?: XOR<UsersScalarRelationFilter, usersWhereInput>
    parent?: XOR<RepositoryNullableScalarRelationFilter, repositoryWhereInput> | null
    forks?: RepositoryListRelationFilter
    access?: Repository_accessListRelationFilter
    issue?: IssueListRelationFilter
    pull_request?: Pull_requestListRelationFilter
    source_pull_requests?: Pull_requestListRelationFilter
    target_pull_requests?: Pull_requestListRelationFilter
  }, "id">

  export type repositoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    owner_user_id?: SortOrder
    description?: SortOrderInput | SortOrder
    is_private?: SortOrderInput | SortOrder
    repoPath?: SortOrderInput | SortOrder
    parent_id?: SortOrderInput | SortOrder
    forked_at?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    archived?: SortOrder
    forks_count?: SortOrderInput | SortOrder
    pull_requests_count?: SortOrderInput | SortOrder
    _count?: repositoryCountOrderByAggregateInput
    _avg?: repositoryAvgOrderByAggregateInput
    _max?: repositoryMaxOrderByAggregateInput
    _min?: repositoryMinOrderByAggregateInput
    _sum?: repositorySumOrderByAggregateInput
  }

  export type repositoryScalarWhereWithAggregatesInput = {
    AND?: repositoryScalarWhereWithAggregatesInput | repositoryScalarWhereWithAggregatesInput[]
    OR?: repositoryScalarWhereWithAggregatesInput[]
    NOT?: repositoryScalarWhereWithAggregatesInput | repositoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"repository"> | number
    name?: StringWithAggregatesFilter<"repository"> | string
    owner_user_id?: IntWithAggregatesFilter<"repository"> | number
    description?: StringNullableWithAggregatesFilter<"repository"> | string | null
    is_private?: BoolNullableWithAggregatesFilter<"repository"> | boolean | null
    repoPath?: StringNullableWithAggregatesFilter<"repository"> | string | null
    parent_id?: IntNullableWithAggregatesFilter<"repository"> | number | null
    forked_at?: DateTimeNullableWithAggregatesFilter<"repository"> | Date | string | null
    created_at?: DateTimeWithAggregatesFilter<"repository"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"repository"> | Date | string
    archived?: BoolWithAggregatesFilter<"repository"> | boolean
    forks_count?: IntNullableWithAggregatesFilter<"repository"> | number | null
    pull_requests_count?: IntNullableWithAggregatesFilter<"repository"> | number | null
  }

  export type repository_accessWhereInput = {
    AND?: repository_accessWhereInput | repository_accessWhereInput[]
    OR?: repository_accessWhereInput[]
    NOT?: repository_accessWhereInput | repository_accessWhereInput[]
    id?: IntFilter<"repository_access"> | number
    repository_id?: IntFilter<"repository_access"> | number
    user_id?: IntFilter<"repository_access"> | number
    access_level?: EnumRepositoryAccessFilter<"repository_access"> | $Enums.RepositoryAccess
    created_at?: DateTimeFilter<"repository_access"> | Date | string
    updated_at?: DateTimeFilter<"repository_access"> | Date | string
    repository?: XOR<RepositoryScalarRelationFilter, repositoryWhereInput>
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type repository_accessOrderByWithRelationInput = {
    id?: SortOrder
    repository_id?: SortOrder
    user_id?: SortOrder
    access_level?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    repository?: repositoryOrderByWithRelationInput
    user?: usersOrderByWithRelationInput
  }

  export type repository_accessWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    repository_id_user_id?: repository_accessRepository_idUser_idCompoundUniqueInput
    AND?: repository_accessWhereInput | repository_accessWhereInput[]
    OR?: repository_accessWhereInput[]
    NOT?: repository_accessWhereInput | repository_accessWhereInput[]
    repository_id?: IntFilter<"repository_access"> | number
    user_id?: IntFilter<"repository_access"> | number
    access_level?: EnumRepositoryAccessFilter<"repository_access"> | $Enums.RepositoryAccess
    created_at?: DateTimeFilter<"repository_access"> | Date | string
    updated_at?: DateTimeFilter<"repository_access"> | Date | string
    repository?: XOR<RepositoryScalarRelationFilter, repositoryWhereInput>
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "id" | "repository_id_user_id">

  export type repository_accessOrderByWithAggregationInput = {
    id?: SortOrder
    repository_id?: SortOrder
    user_id?: SortOrder
    access_level?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: repository_accessCountOrderByAggregateInput
    _avg?: repository_accessAvgOrderByAggregateInput
    _max?: repository_accessMaxOrderByAggregateInput
    _min?: repository_accessMinOrderByAggregateInput
    _sum?: repository_accessSumOrderByAggregateInput
  }

  export type repository_accessScalarWhereWithAggregatesInput = {
    AND?: repository_accessScalarWhereWithAggregatesInput | repository_accessScalarWhereWithAggregatesInput[]
    OR?: repository_accessScalarWhereWithAggregatesInput[]
    NOT?: repository_accessScalarWhereWithAggregatesInput | repository_accessScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"repository_access"> | number
    repository_id?: IntWithAggregatesFilter<"repository_access"> | number
    user_id?: IntWithAggregatesFilter<"repository_access"> | number
    access_level?: EnumRepositoryAccessWithAggregatesFilter<"repository_access"> | $Enums.RepositoryAccess
    created_at?: DateTimeWithAggregatesFilter<"repository_access"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"repository_access"> | Date | string
  }

  export type issueWhereInput = {
    AND?: issueWhereInput | issueWhereInput[]
    OR?: issueWhereInput[]
    NOT?: issueWhereInput | issueWhereInput[]
    id?: IntFilter<"issue"> | number
    repository_id?: IntFilter<"issue"> | number
    author_id?: IntNullableFilter<"issue"> | number | null
    title?: StringFilter<"issue"> | string
    description?: StringNullableFilter<"issue"> | string | null
    status?: StringFilter<"issue"> | string
    created_at?: DateTimeFilter<"issue"> | Date | string
    updated_at?: DateTimeFilter<"issue"> | Date | string
    repository?: XOR<RepositoryScalarRelationFilter, repositoryWhereInput>
    author?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
    issue_comment?: Issue_commentListRelationFilter
  }

  export type issueOrderByWithRelationInput = {
    id?: SortOrder
    repository_id?: SortOrder
    author_id?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    repository?: repositoryOrderByWithRelationInput
    author?: usersOrderByWithRelationInput
    issue_comment?: issue_commentOrderByRelationAggregateInput
  }

  export type issueWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: issueWhereInput | issueWhereInput[]
    OR?: issueWhereInput[]
    NOT?: issueWhereInput | issueWhereInput[]
    repository_id?: IntFilter<"issue"> | number
    author_id?: IntNullableFilter<"issue"> | number | null
    title?: StringFilter<"issue"> | string
    description?: StringNullableFilter<"issue"> | string | null
    status?: StringFilter<"issue"> | string
    created_at?: DateTimeFilter<"issue"> | Date | string
    updated_at?: DateTimeFilter<"issue"> | Date | string
    repository?: XOR<RepositoryScalarRelationFilter, repositoryWhereInput>
    author?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
    issue_comment?: Issue_commentListRelationFilter
  }, "id">

  export type issueOrderByWithAggregationInput = {
    id?: SortOrder
    repository_id?: SortOrder
    author_id?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: issueCountOrderByAggregateInput
    _avg?: issueAvgOrderByAggregateInput
    _max?: issueMaxOrderByAggregateInput
    _min?: issueMinOrderByAggregateInput
    _sum?: issueSumOrderByAggregateInput
  }

  export type issueScalarWhereWithAggregatesInput = {
    AND?: issueScalarWhereWithAggregatesInput | issueScalarWhereWithAggregatesInput[]
    OR?: issueScalarWhereWithAggregatesInput[]
    NOT?: issueScalarWhereWithAggregatesInput | issueScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"issue"> | number
    repository_id?: IntWithAggregatesFilter<"issue"> | number
    author_id?: IntNullableWithAggregatesFilter<"issue"> | number | null
    title?: StringWithAggregatesFilter<"issue"> | string
    description?: StringNullableWithAggregatesFilter<"issue"> | string | null
    status?: StringWithAggregatesFilter<"issue"> | string
    created_at?: DateTimeWithAggregatesFilter<"issue"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"issue"> | Date | string
  }

  export type pull_requestWhereInput = {
    AND?: pull_requestWhereInput | pull_requestWhereInput[]
    OR?: pull_requestWhereInput[]
    NOT?: pull_requestWhereInput | pull_requestWhereInput[]
    id?: IntFilter<"pull_request"> | number
    repository_id?: IntFilter<"pull_request"> | number
    author_id?: IntNullableFilter<"pull_request"> | number | null
    source_branch?: StringFilter<"pull_request"> | string
    target_branch?: StringFilter<"pull_request"> | string
    status?: EnumPullRequestStatusFilter<"pull_request"> | $Enums.PullRequestStatus
    source_repository_id?: IntFilter<"pull_request"> | number
    target_repository_id?: IntFilter<"pull_request"> | number
    merged_at?: DateTimeNullableFilter<"pull_request"> | Date | string | null
    created_at?: DateTimeFilter<"pull_request"> | Date | string
    updated_at?: DateTimeFilter<"pull_request"> | Date | string
    repository?: XOR<RepositoryScalarRelationFilter, repositoryWhereInput>
    author?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
    source_repository?: XOR<RepositoryScalarRelationFilter, repositoryWhereInput>
    target_repository?: XOR<RepositoryScalarRelationFilter, repositoryWhereInput>
    pull_request_comment?: Pull_request_commentListRelationFilter
  }

  export type pull_requestOrderByWithRelationInput = {
    id?: SortOrder
    repository_id?: SortOrder
    author_id?: SortOrderInput | SortOrder
    source_branch?: SortOrder
    target_branch?: SortOrder
    status?: SortOrder
    source_repository_id?: SortOrder
    target_repository_id?: SortOrder
    merged_at?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    repository?: repositoryOrderByWithRelationInput
    author?: usersOrderByWithRelationInput
    source_repository?: repositoryOrderByWithRelationInput
    target_repository?: repositoryOrderByWithRelationInput
    pull_request_comment?: pull_request_commentOrderByRelationAggregateInput
  }

  export type pull_requestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: pull_requestWhereInput | pull_requestWhereInput[]
    OR?: pull_requestWhereInput[]
    NOT?: pull_requestWhereInput | pull_requestWhereInput[]
    repository_id?: IntFilter<"pull_request"> | number
    author_id?: IntNullableFilter<"pull_request"> | number | null
    source_branch?: StringFilter<"pull_request"> | string
    target_branch?: StringFilter<"pull_request"> | string
    status?: EnumPullRequestStatusFilter<"pull_request"> | $Enums.PullRequestStatus
    source_repository_id?: IntFilter<"pull_request"> | number
    target_repository_id?: IntFilter<"pull_request"> | number
    merged_at?: DateTimeNullableFilter<"pull_request"> | Date | string | null
    created_at?: DateTimeFilter<"pull_request"> | Date | string
    updated_at?: DateTimeFilter<"pull_request"> | Date | string
    repository?: XOR<RepositoryScalarRelationFilter, repositoryWhereInput>
    author?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
    source_repository?: XOR<RepositoryScalarRelationFilter, repositoryWhereInput>
    target_repository?: XOR<RepositoryScalarRelationFilter, repositoryWhereInput>
    pull_request_comment?: Pull_request_commentListRelationFilter
  }, "id">

  export type pull_requestOrderByWithAggregationInput = {
    id?: SortOrder
    repository_id?: SortOrder
    author_id?: SortOrderInput | SortOrder
    source_branch?: SortOrder
    target_branch?: SortOrder
    status?: SortOrder
    source_repository_id?: SortOrder
    target_repository_id?: SortOrder
    merged_at?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: pull_requestCountOrderByAggregateInput
    _avg?: pull_requestAvgOrderByAggregateInput
    _max?: pull_requestMaxOrderByAggregateInput
    _min?: pull_requestMinOrderByAggregateInput
    _sum?: pull_requestSumOrderByAggregateInput
  }

  export type pull_requestScalarWhereWithAggregatesInput = {
    AND?: pull_requestScalarWhereWithAggregatesInput | pull_requestScalarWhereWithAggregatesInput[]
    OR?: pull_requestScalarWhereWithAggregatesInput[]
    NOT?: pull_requestScalarWhereWithAggregatesInput | pull_requestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"pull_request"> | number
    repository_id?: IntWithAggregatesFilter<"pull_request"> | number
    author_id?: IntNullableWithAggregatesFilter<"pull_request"> | number | null
    source_branch?: StringWithAggregatesFilter<"pull_request"> | string
    target_branch?: StringWithAggregatesFilter<"pull_request"> | string
    status?: EnumPullRequestStatusWithAggregatesFilter<"pull_request"> | $Enums.PullRequestStatus
    source_repository_id?: IntWithAggregatesFilter<"pull_request"> | number
    target_repository_id?: IntWithAggregatesFilter<"pull_request"> | number
    merged_at?: DateTimeNullableWithAggregatesFilter<"pull_request"> | Date | string | null
    created_at?: DateTimeWithAggregatesFilter<"pull_request"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"pull_request"> | Date | string
  }

  export type issue_commentWhereInput = {
    AND?: issue_commentWhereInput | issue_commentWhereInput[]
    OR?: issue_commentWhereInput[]
    NOT?: issue_commentWhereInput | issue_commentWhereInput[]
    id?: IntFilter<"issue_comment"> | number
    issue_id?: IntFilter<"issue_comment"> | number
    author_id?: IntNullableFilter<"issue_comment"> | number | null
    content?: StringFilter<"issue_comment"> | string
    created_at?: DateTimeFilter<"issue_comment"> | Date | string
    updated_at?: DateTimeFilter<"issue_comment"> | Date | string
    issue?: XOR<IssueScalarRelationFilter, issueWhereInput>
    author?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }

  export type issue_commentOrderByWithRelationInput = {
    id?: SortOrder
    issue_id?: SortOrder
    author_id?: SortOrderInput | SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    issue?: issueOrderByWithRelationInput
    author?: usersOrderByWithRelationInput
  }

  export type issue_commentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: issue_commentWhereInput | issue_commentWhereInput[]
    OR?: issue_commentWhereInput[]
    NOT?: issue_commentWhereInput | issue_commentWhereInput[]
    issue_id?: IntFilter<"issue_comment"> | number
    author_id?: IntNullableFilter<"issue_comment"> | number | null
    content?: StringFilter<"issue_comment"> | string
    created_at?: DateTimeFilter<"issue_comment"> | Date | string
    updated_at?: DateTimeFilter<"issue_comment"> | Date | string
    issue?: XOR<IssueScalarRelationFilter, issueWhereInput>
    author?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }, "id">

  export type issue_commentOrderByWithAggregationInput = {
    id?: SortOrder
    issue_id?: SortOrder
    author_id?: SortOrderInput | SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: issue_commentCountOrderByAggregateInput
    _avg?: issue_commentAvgOrderByAggregateInput
    _max?: issue_commentMaxOrderByAggregateInput
    _min?: issue_commentMinOrderByAggregateInput
    _sum?: issue_commentSumOrderByAggregateInput
  }

  export type issue_commentScalarWhereWithAggregatesInput = {
    AND?: issue_commentScalarWhereWithAggregatesInput | issue_commentScalarWhereWithAggregatesInput[]
    OR?: issue_commentScalarWhereWithAggregatesInput[]
    NOT?: issue_commentScalarWhereWithAggregatesInput | issue_commentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"issue_comment"> | number
    issue_id?: IntWithAggregatesFilter<"issue_comment"> | number
    author_id?: IntNullableWithAggregatesFilter<"issue_comment"> | number | null
    content?: StringWithAggregatesFilter<"issue_comment"> | string
    created_at?: DateTimeWithAggregatesFilter<"issue_comment"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"issue_comment"> | Date | string
  }

  export type pull_request_commentWhereInput = {
    AND?: pull_request_commentWhereInput | pull_request_commentWhereInput[]
    OR?: pull_request_commentWhereInput[]
    NOT?: pull_request_commentWhereInput | pull_request_commentWhereInput[]
    id?: IntFilter<"pull_request_comment"> | number
    pull_request_id?: IntFilter<"pull_request_comment"> | number
    author_id?: IntNullableFilter<"pull_request_comment"> | number | null
    content?: StringFilter<"pull_request_comment"> | string
    created_at?: DateTimeFilter<"pull_request_comment"> | Date | string
    updated_at?: DateTimeFilter<"pull_request_comment"> | Date | string
    pull_request?: XOR<Pull_requestScalarRelationFilter, pull_requestWhereInput>
    author?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }

  export type pull_request_commentOrderByWithRelationInput = {
    id?: SortOrder
    pull_request_id?: SortOrder
    author_id?: SortOrderInput | SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    pull_request?: pull_requestOrderByWithRelationInput
    author?: usersOrderByWithRelationInput
  }

  export type pull_request_commentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: pull_request_commentWhereInput | pull_request_commentWhereInput[]
    OR?: pull_request_commentWhereInput[]
    NOT?: pull_request_commentWhereInput | pull_request_commentWhereInput[]
    pull_request_id?: IntFilter<"pull_request_comment"> | number
    author_id?: IntNullableFilter<"pull_request_comment"> | number | null
    content?: StringFilter<"pull_request_comment"> | string
    created_at?: DateTimeFilter<"pull_request_comment"> | Date | string
    updated_at?: DateTimeFilter<"pull_request_comment"> | Date | string
    pull_request?: XOR<Pull_requestScalarRelationFilter, pull_requestWhereInput>
    author?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }, "id">

  export type pull_request_commentOrderByWithAggregationInput = {
    id?: SortOrder
    pull_request_id?: SortOrder
    author_id?: SortOrderInput | SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: pull_request_commentCountOrderByAggregateInput
    _avg?: pull_request_commentAvgOrderByAggregateInput
    _max?: pull_request_commentMaxOrderByAggregateInput
    _min?: pull_request_commentMinOrderByAggregateInput
    _sum?: pull_request_commentSumOrderByAggregateInput
  }

  export type pull_request_commentScalarWhereWithAggregatesInput = {
    AND?: pull_request_commentScalarWhereWithAggregatesInput | pull_request_commentScalarWhereWithAggregatesInput[]
    OR?: pull_request_commentScalarWhereWithAggregatesInput[]
    NOT?: pull_request_commentScalarWhereWithAggregatesInput | pull_request_commentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"pull_request_comment"> | number
    pull_request_id?: IntWithAggregatesFilter<"pull_request_comment"> | number
    author_id?: IntNullableWithAggregatesFilter<"pull_request_comment"> | number | null
    content?: StringWithAggregatesFilter<"pull_request_comment"> | string
    created_at?: DateTimeWithAggregatesFilter<"pull_request_comment"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"pull_request_comment"> | Date | string
  }

  export type usersCreateInput = {
    username: string
    email: string
    password_hash: string
    bio?: string | null
    gitCliPassword?: string | null
    avatar_path?: string | null
    is_admin?: boolean | null
    confirmed?: boolean | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    contribution_count?: number | null
    suspended?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    repository?: repositoryCreateNestedManyWithoutOwnerInput
    repository_access?: repository_accessCreateNestedManyWithoutUserInput
    issue?: issueCreateNestedManyWithoutAuthorInput
    pull_request?: pull_requestCreateNestedManyWithoutAuthorInput
    issue_comment?: issue_commentCreateNestedManyWithoutAuthorInput
    pull_request_comment?: pull_request_commentCreateNestedManyWithoutAuthorInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    username: string
    email: string
    password_hash: string
    bio?: string | null
    gitCliPassword?: string | null
    avatar_path?: string | null
    is_admin?: boolean | null
    confirmed?: boolean | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    contribution_count?: number | null
    suspended?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    repository?: repositoryUncheckedCreateNestedManyWithoutOwnerInput
    repository_access?: repository_accessUncheckedCreateNestedManyWithoutUserInput
    issue?: issueUncheckedCreateNestedManyWithoutAuthorInput
    pull_request?: pull_requestUncheckedCreateNestedManyWithoutAuthorInput
    issue_comment?: issue_commentUncheckedCreateNestedManyWithoutAuthorInput
    pull_request_comment?: pull_request_commentUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type usersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    gitCliPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_path?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    contribution_count?: NullableIntFieldUpdateOperationsInput | number | null
    suspended?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUpdateManyWithoutOwnerNestedInput
    repository_access?: repository_accessUpdateManyWithoutUserNestedInput
    issue?: issueUpdateManyWithoutAuthorNestedInput
    pull_request?: pull_requestUpdateManyWithoutAuthorNestedInput
    issue_comment?: issue_commentUpdateManyWithoutAuthorNestedInput
    pull_request_comment?: pull_request_commentUpdateManyWithoutAuthorNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    gitCliPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_path?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    contribution_count?: NullableIntFieldUpdateOperationsInput | number | null
    suspended?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUncheckedUpdateManyWithoutOwnerNestedInput
    repository_access?: repository_accessUncheckedUpdateManyWithoutUserNestedInput
    issue?: issueUncheckedUpdateManyWithoutAuthorNestedInput
    pull_request?: pull_requestUncheckedUpdateManyWithoutAuthorNestedInput
    issue_comment?: issue_commentUncheckedUpdateManyWithoutAuthorNestedInput
    pull_request_comment?: pull_request_commentUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    username: string
    email: string
    password_hash: string
    bio?: string | null
    gitCliPassword?: string | null
    avatar_path?: string | null
    is_admin?: boolean | null
    confirmed?: boolean | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    contribution_count?: number | null
    suspended?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type usersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    gitCliPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_path?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    contribution_count?: NullableIntFieldUpdateOperationsInput | number | null
    suspended?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    gitCliPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_path?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    contribution_count?: NullableIntFieldUpdateOperationsInput | number | null
    suspended?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type repositoryCreateInput = {
    name: string
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
    owner: usersCreateNestedOneWithoutRepositoryInput
    parent?: repositoryCreateNestedOneWithoutForksInput
    forks?: repositoryCreateNestedManyWithoutParentInput
    access?: repository_accessCreateNestedManyWithoutRepositoryInput
    issue?: issueCreateNestedManyWithoutRepositoryInput
    pull_request?: pull_requestCreateNestedManyWithoutRepositoryInput
    source_pull_requests?: pull_requestCreateNestedManyWithoutSource_repositoryInput
    target_pull_requests?: pull_requestCreateNestedManyWithoutTarget_repositoryInput
  }

  export type repositoryUncheckedCreateInput = {
    id?: number
    name: string
    owner_user_id: number
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    parent_id?: number | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
    forks?: repositoryUncheckedCreateNestedManyWithoutParentInput
    access?: repository_accessUncheckedCreateNestedManyWithoutRepositoryInput
    issue?: issueUncheckedCreateNestedManyWithoutRepositoryInput
    pull_request?: pull_requestUncheckedCreateNestedManyWithoutRepositoryInput
    source_pull_requests?: pull_requestUncheckedCreateNestedManyWithoutSource_repositoryInput
    target_pull_requests?: pull_requestUncheckedCreateNestedManyWithoutTarget_repositoryInput
  }

  export type repositoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
    owner?: usersUpdateOneRequiredWithoutRepositoryNestedInput
    parent?: repositoryUpdateOneWithoutForksNestedInput
    forks?: repositoryUpdateManyWithoutParentNestedInput
    access?: repository_accessUpdateManyWithoutRepositoryNestedInput
    issue?: issueUpdateManyWithoutRepositoryNestedInput
    pull_request?: pull_requestUpdateManyWithoutRepositoryNestedInput
    source_pull_requests?: pull_requestUpdateManyWithoutSource_repositoryNestedInput
    target_pull_requests?: pull_requestUpdateManyWithoutTarget_repositoryNestedInput
  }

  export type repositoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    owner_user_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    parent_id?: NullableIntFieldUpdateOperationsInput | number | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
    forks?: repositoryUncheckedUpdateManyWithoutParentNestedInput
    access?: repository_accessUncheckedUpdateManyWithoutRepositoryNestedInput
    issue?: issueUncheckedUpdateManyWithoutRepositoryNestedInput
    pull_request?: pull_requestUncheckedUpdateManyWithoutRepositoryNestedInput
    source_pull_requests?: pull_requestUncheckedUpdateManyWithoutSource_repositoryNestedInput
    target_pull_requests?: pull_requestUncheckedUpdateManyWithoutTarget_repositoryNestedInput
  }

  export type repositoryCreateManyInput = {
    id?: number
    name: string
    owner_user_id: number
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    parent_id?: number | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
  }

  export type repositoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type repositoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    owner_user_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    parent_id?: NullableIntFieldUpdateOperationsInput | number | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type repository_accessCreateInput = {
    access_level: $Enums.RepositoryAccess
    created_at?: Date | string
    updated_at?: Date | string
    repository: repositoryCreateNestedOneWithoutAccessInput
    user: usersCreateNestedOneWithoutRepository_accessInput
  }

  export type repository_accessUncheckedCreateInput = {
    id?: number
    repository_id: number
    user_id: number
    access_level: $Enums.RepositoryAccess
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type repository_accessUpdateInput = {
    access_level?: EnumRepositoryAccessFieldUpdateOperationsInput | $Enums.RepositoryAccess
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUpdateOneRequiredWithoutAccessNestedInput
    user?: usersUpdateOneRequiredWithoutRepository_accessNestedInput
  }

  export type repository_accessUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    repository_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    access_level?: EnumRepositoryAccessFieldUpdateOperationsInput | $Enums.RepositoryAccess
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type repository_accessCreateManyInput = {
    id?: number
    repository_id: number
    user_id: number
    access_level: $Enums.RepositoryAccess
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type repository_accessUpdateManyMutationInput = {
    access_level?: EnumRepositoryAccessFieldUpdateOperationsInput | $Enums.RepositoryAccess
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type repository_accessUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    repository_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    access_level?: EnumRepositoryAccessFieldUpdateOperationsInput | $Enums.RepositoryAccess
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type issueCreateInput = {
    title: string
    description?: string | null
    status: string
    created_at?: Date | string
    updated_at?: Date | string
    repository: repositoryCreateNestedOneWithoutIssueInput
    author?: usersCreateNestedOneWithoutIssueInput
    issue_comment?: issue_commentCreateNestedManyWithoutIssueInput
  }

  export type issueUncheckedCreateInput = {
    id?: number
    repository_id: number
    author_id?: number | null
    title: string
    description?: string | null
    status: string
    created_at?: Date | string
    updated_at?: Date | string
    issue_comment?: issue_commentUncheckedCreateNestedManyWithoutIssueInput
  }

  export type issueUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUpdateOneRequiredWithoutIssueNestedInput
    author?: usersUpdateOneWithoutIssueNestedInput
    issue_comment?: issue_commentUpdateManyWithoutIssueNestedInput
  }

  export type issueUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    repository_id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    issue_comment?: issue_commentUncheckedUpdateManyWithoutIssueNestedInput
  }

  export type issueCreateManyInput = {
    id?: number
    repository_id: number
    author_id?: number | null
    title: string
    description?: string | null
    status: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type issueUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type issueUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    repository_id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type pull_requestCreateInput = {
    source_branch: string
    target_branch: string
    status?: $Enums.PullRequestStatus
    merged_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    repository: repositoryCreateNestedOneWithoutPull_requestInput
    author?: usersCreateNestedOneWithoutPull_requestInput
    source_repository: repositoryCreateNestedOneWithoutSource_pull_requestsInput
    target_repository: repositoryCreateNestedOneWithoutTarget_pull_requestsInput
    pull_request_comment?: pull_request_commentCreateNestedManyWithoutPull_requestInput
  }

  export type pull_requestUncheckedCreateInput = {
    id?: number
    repository_id: number
    author_id?: number | null
    source_branch: string
    target_branch: string
    status?: $Enums.PullRequestStatus
    source_repository_id: number
    target_repository_id: number
    merged_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    pull_request_comment?: pull_request_commentUncheckedCreateNestedManyWithoutPull_requestInput
  }

  export type pull_requestUpdateInput = {
    source_branch?: StringFieldUpdateOperationsInput | string
    target_branch?: StringFieldUpdateOperationsInput | string
    status?: EnumPullRequestStatusFieldUpdateOperationsInput | $Enums.PullRequestStatus
    merged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUpdateOneRequiredWithoutPull_requestNestedInput
    author?: usersUpdateOneWithoutPull_requestNestedInput
    source_repository?: repositoryUpdateOneRequiredWithoutSource_pull_requestsNestedInput
    target_repository?: repositoryUpdateOneRequiredWithoutTarget_pull_requestsNestedInput
    pull_request_comment?: pull_request_commentUpdateManyWithoutPull_requestNestedInput
  }

  export type pull_requestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    repository_id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    source_branch?: StringFieldUpdateOperationsInput | string
    target_branch?: StringFieldUpdateOperationsInput | string
    status?: EnumPullRequestStatusFieldUpdateOperationsInput | $Enums.PullRequestStatus
    source_repository_id?: IntFieldUpdateOperationsInput | number
    target_repository_id?: IntFieldUpdateOperationsInput | number
    merged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    pull_request_comment?: pull_request_commentUncheckedUpdateManyWithoutPull_requestNestedInput
  }

  export type pull_requestCreateManyInput = {
    id?: number
    repository_id: number
    author_id?: number | null
    source_branch: string
    target_branch: string
    status?: $Enums.PullRequestStatus
    source_repository_id: number
    target_repository_id: number
    merged_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type pull_requestUpdateManyMutationInput = {
    source_branch?: StringFieldUpdateOperationsInput | string
    target_branch?: StringFieldUpdateOperationsInput | string
    status?: EnumPullRequestStatusFieldUpdateOperationsInput | $Enums.PullRequestStatus
    merged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type pull_requestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    repository_id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    source_branch?: StringFieldUpdateOperationsInput | string
    target_branch?: StringFieldUpdateOperationsInput | string
    status?: EnumPullRequestStatusFieldUpdateOperationsInput | $Enums.PullRequestStatus
    source_repository_id?: IntFieldUpdateOperationsInput | number
    target_repository_id?: IntFieldUpdateOperationsInput | number
    merged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type issue_commentCreateInput = {
    content: string
    created_at?: Date | string
    updated_at?: Date | string
    issue: issueCreateNestedOneWithoutIssue_commentInput
    author?: usersCreateNestedOneWithoutIssue_commentInput
  }

  export type issue_commentUncheckedCreateInput = {
    id?: number
    issue_id: number
    author_id?: number | null
    content: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type issue_commentUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    issue?: issueUpdateOneRequiredWithoutIssue_commentNestedInput
    author?: usersUpdateOneWithoutIssue_commentNestedInput
  }

  export type issue_commentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    issue_id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type issue_commentCreateManyInput = {
    id?: number
    issue_id: number
    author_id?: number | null
    content: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type issue_commentUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type issue_commentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    issue_id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type pull_request_commentCreateInput = {
    content: string
    created_at?: Date | string
    updated_at?: Date | string
    pull_request: pull_requestCreateNestedOneWithoutPull_request_commentInput
    author?: usersCreateNestedOneWithoutPull_request_commentInput
  }

  export type pull_request_commentUncheckedCreateInput = {
    id?: number
    pull_request_id: number
    author_id?: number | null
    content: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type pull_request_commentUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    pull_request?: pull_requestUpdateOneRequiredWithoutPull_request_commentNestedInput
    author?: usersUpdateOneWithoutPull_request_commentNestedInput
  }

  export type pull_request_commentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pull_request_id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type pull_request_commentCreateManyInput = {
    id?: number
    pull_request_id: number
    author_id?: number | null
    content: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type pull_request_commentUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type pull_request_commentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pull_request_id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type RepositoryListRelationFilter = {
    every?: repositoryWhereInput
    some?: repositoryWhereInput
    none?: repositoryWhereInput
  }

  export type Repository_accessListRelationFilter = {
    every?: repository_accessWhereInput
    some?: repository_accessWhereInput
    none?: repository_accessWhereInput
  }

  export type IssueListRelationFilter = {
    every?: issueWhereInput
    some?: issueWhereInput
    none?: issueWhereInput
  }

  export type Pull_requestListRelationFilter = {
    every?: pull_requestWhereInput
    some?: pull_requestWhereInput
    none?: pull_requestWhereInput
  }

  export type Issue_commentListRelationFilter = {
    every?: issue_commentWhereInput
    some?: issue_commentWhereInput
    none?: issue_commentWhereInput
  }

  export type Pull_request_commentListRelationFilter = {
    every?: pull_request_commentWhereInput
    some?: pull_request_commentWhereInput
    none?: pull_request_commentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type repositoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type repository_accessOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type issueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type pull_requestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type issue_commentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type pull_request_commentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    bio?: SortOrder
    gitCliPassword?: SortOrder
    avatar_path?: SortOrder
    is_admin?: SortOrder
    confirmed?: SortOrder
    twoFactorSecret?: SortOrder
    twoFactorEnabled?: SortOrder
    contribution_count?: SortOrder
    suspended?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
    contribution_count?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    bio?: SortOrder
    gitCliPassword?: SortOrder
    avatar_path?: SortOrder
    is_admin?: SortOrder
    confirmed?: SortOrder
    twoFactorSecret?: SortOrder
    twoFactorEnabled?: SortOrder
    contribution_count?: SortOrder
    suspended?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    bio?: SortOrder
    gitCliPassword?: SortOrder
    avatar_path?: SortOrder
    is_admin?: SortOrder
    confirmed?: SortOrder
    twoFactorSecret?: SortOrder
    twoFactorEnabled?: SortOrder
    contribution_count?: SortOrder
    suspended?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
    contribution_count?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UsersScalarRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type RepositoryNullableScalarRelationFilter = {
    is?: repositoryWhereInput | null
    isNot?: repositoryWhereInput | null
  }

  export type repositoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    owner_user_id?: SortOrder
    description?: SortOrder
    is_private?: SortOrder
    repoPath?: SortOrder
    parent_id?: SortOrder
    forked_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    archived?: SortOrder
    forks_count?: SortOrder
    pull_requests_count?: SortOrder
  }

  export type repositoryAvgOrderByAggregateInput = {
    id?: SortOrder
    owner_user_id?: SortOrder
    parent_id?: SortOrder
    forks_count?: SortOrder
    pull_requests_count?: SortOrder
  }

  export type repositoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    owner_user_id?: SortOrder
    description?: SortOrder
    is_private?: SortOrder
    repoPath?: SortOrder
    parent_id?: SortOrder
    forked_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    archived?: SortOrder
    forks_count?: SortOrder
    pull_requests_count?: SortOrder
  }

  export type repositoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    owner_user_id?: SortOrder
    description?: SortOrder
    is_private?: SortOrder
    repoPath?: SortOrder
    parent_id?: SortOrder
    forked_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    archived?: SortOrder
    forks_count?: SortOrder
    pull_requests_count?: SortOrder
  }

  export type repositorySumOrderByAggregateInput = {
    id?: SortOrder
    owner_user_id?: SortOrder
    parent_id?: SortOrder
    forks_count?: SortOrder
    pull_requests_count?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumRepositoryAccessFilter<$PrismaModel = never> = {
    equals?: $Enums.RepositoryAccess | EnumRepositoryAccessFieldRefInput<$PrismaModel>
    in?: $Enums.RepositoryAccess[] | ListEnumRepositoryAccessFieldRefInput<$PrismaModel>
    notIn?: $Enums.RepositoryAccess[] | ListEnumRepositoryAccessFieldRefInput<$PrismaModel>
    not?: NestedEnumRepositoryAccessFilter<$PrismaModel> | $Enums.RepositoryAccess
  }

  export type RepositoryScalarRelationFilter = {
    is?: repositoryWhereInput
    isNot?: repositoryWhereInput
  }

  export type repository_accessRepository_idUser_idCompoundUniqueInput = {
    repository_id: number
    user_id: number
  }

  export type repository_accessCountOrderByAggregateInput = {
    id?: SortOrder
    repository_id?: SortOrder
    user_id?: SortOrder
    access_level?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type repository_accessAvgOrderByAggregateInput = {
    id?: SortOrder
    repository_id?: SortOrder
    user_id?: SortOrder
  }

  export type repository_accessMaxOrderByAggregateInput = {
    id?: SortOrder
    repository_id?: SortOrder
    user_id?: SortOrder
    access_level?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type repository_accessMinOrderByAggregateInput = {
    id?: SortOrder
    repository_id?: SortOrder
    user_id?: SortOrder
    access_level?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type repository_accessSumOrderByAggregateInput = {
    id?: SortOrder
    repository_id?: SortOrder
    user_id?: SortOrder
  }

  export type EnumRepositoryAccessWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RepositoryAccess | EnumRepositoryAccessFieldRefInput<$PrismaModel>
    in?: $Enums.RepositoryAccess[] | ListEnumRepositoryAccessFieldRefInput<$PrismaModel>
    notIn?: $Enums.RepositoryAccess[] | ListEnumRepositoryAccessFieldRefInput<$PrismaModel>
    not?: NestedEnumRepositoryAccessWithAggregatesFilter<$PrismaModel> | $Enums.RepositoryAccess
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRepositoryAccessFilter<$PrismaModel>
    _max?: NestedEnumRepositoryAccessFilter<$PrismaModel>
  }

  export type UsersNullableScalarRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type issueCountOrderByAggregateInput = {
    id?: SortOrder
    repository_id?: SortOrder
    author_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type issueAvgOrderByAggregateInput = {
    id?: SortOrder
    repository_id?: SortOrder
    author_id?: SortOrder
  }

  export type issueMaxOrderByAggregateInput = {
    id?: SortOrder
    repository_id?: SortOrder
    author_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type issueMinOrderByAggregateInput = {
    id?: SortOrder
    repository_id?: SortOrder
    author_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type issueSumOrderByAggregateInput = {
    id?: SortOrder
    repository_id?: SortOrder
    author_id?: SortOrder
  }

  export type EnumPullRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PullRequestStatus | EnumPullRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PullRequestStatus[] | ListEnumPullRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PullRequestStatus[] | ListEnumPullRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPullRequestStatusFilter<$PrismaModel> | $Enums.PullRequestStatus
  }

  export type pull_requestCountOrderByAggregateInput = {
    id?: SortOrder
    repository_id?: SortOrder
    author_id?: SortOrder
    source_branch?: SortOrder
    target_branch?: SortOrder
    status?: SortOrder
    source_repository_id?: SortOrder
    target_repository_id?: SortOrder
    merged_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type pull_requestAvgOrderByAggregateInput = {
    id?: SortOrder
    repository_id?: SortOrder
    author_id?: SortOrder
    source_repository_id?: SortOrder
    target_repository_id?: SortOrder
  }

  export type pull_requestMaxOrderByAggregateInput = {
    id?: SortOrder
    repository_id?: SortOrder
    author_id?: SortOrder
    source_branch?: SortOrder
    target_branch?: SortOrder
    status?: SortOrder
    source_repository_id?: SortOrder
    target_repository_id?: SortOrder
    merged_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type pull_requestMinOrderByAggregateInput = {
    id?: SortOrder
    repository_id?: SortOrder
    author_id?: SortOrder
    source_branch?: SortOrder
    target_branch?: SortOrder
    status?: SortOrder
    source_repository_id?: SortOrder
    target_repository_id?: SortOrder
    merged_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type pull_requestSumOrderByAggregateInput = {
    id?: SortOrder
    repository_id?: SortOrder
    author_id?: SortOrder
    source_repository_id?: SortOrder
    target_repository_id?: SortOrder
  }

  export type EnumPullRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PullRequestStatus | EnumPullRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PullRequestStatus[] | ListEnumPullRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PullRequestStatus[] | ListEnumPullRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPullRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.PullRequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPullRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumPullRequestStatusFilter<$PrismaModel>
  }

  export type IssueScalarRelationFilter = {
    is?: issueWhereInput
    isNot?: issueWhereInput
  }

  export type issue_commentCountOrderByAggregateInput = {
    id?: SortOrder
    issue_id?: SortOrder
    author_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type issue_commentAvgOrderByAggregateInput = {
    id?: SortOrder
    issue_id?: SortOrder
    author_id?: SortOrder
  }

  export type issue_commentMaxOrderByAggregateInput = {
    id?: SortOrder
    issue_id?: SortOrder
    author_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type issue_commentMinOrderByAggregateInput = {
    id?: SortOrder
    issue_id?: SortOrder
    author_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type issue_commentSumOrderByAggregateInput = {
    id?: SortOrder
    issue_id?: SortOrder
    author_id?: SortOrder
  }

  export type Pull_requestScalarRelationFilter = {
    is?: pull_requestWhereInput
    isNot?: pull_requestWhereInput
  }

  export type pull_request_commentCountOrderByAggregateInput = {
    id?: SortOrder
    pull_request_id?: SortOrder
    author_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type pull_request_commentAvgOrderByAggregateInput = {
    id?: SortOrder
    pull_request_id?: SortOrder
    author_id?: SortOrder
  }

  export type pull_request_commentMaxOrderByAggregateInput = {
    id?: SortOrder
    pull_request_id?: SortOrder
    author_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type pull_request_commentMinOrderByAggregateInput = {
    id?: SortOrder
    pull_request_id?: SortOrder
    author_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type pull_request_commentSumOrderByAggregateInput = {
    id?: SortOrder
    pull_request_id?: SortOrder
    author_id?: SortOrder
  }

  export type repositoryCreateNestedManyWithoutOwnerInput = {
    create?: XOR<repositoryCreateWithoutOwnerInput, repositoryUncheckedCreateWithoutOwnerInput> | repositoryCreateWithoutOwnerInput[] | repositoryUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: repositoryCreateOrConnectWithoutOwnerInput | repositoryCreateOrConnectWithoutOwnerInput[]
    createMany?: repositoryCreateManyOwnerInputEnvelope
    connect?: repositoryWhereUniqueInput | repositoryWhereUniqueInput[]
  }

  export type repository_accessCreateNestedManyWithoutUserInput = {
    create?: XOR<repository_accessCreateWithoutUserInput, repository_accessUncheckedCreateWithoutUserInput> | repository_accessCreateWithoutUserInput[] | repository_accessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: repository_accessCreateOrConnectWithoutUserInput | repository_accessCreateOrConnectWithoutUserInput[]
    createMany?: repository_accessCreateManyUserInputEnvelope
    connect?: repository_accessWhereUniqueInput | repository_accessWhereUniqueInput[]
  }

  export type issueCreateNestedManyWithoutAuthorInput = {
    create?: XOR<issueCreateWithoutAuthorInput, issueUncheckedCreateWithoutAuthorInput> | issueCreateWithoutAuthorInput[] | issueUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: issueCreateOrConnectWithoutAuthorInput | issueCreateOrConnectWithoutAuthorInput[]
    createMany?: issueCreateManyAuthorInputEnvelope
    connect?: issueWhereUniqueInput | issueWhereUniqueInput[]
  }

  export type pull_requestCreateNestedManyWithoutAuthorInput = {
    create?: XOR<pull_requestCreateWithoutAuthorInput, pull_requestUncheckedCreateWithoutAuthorInput> | pull_requestCreateWithoutAuthorInput[] | pull_requestUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: pull_requestCreateOrConnectWithoutAuthorInput | pull_requestCreateOrConnectWithoutAuthorInput[]
    createMany?: pull_requestCreateManyAuthorInputEnvelope
    connect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
  }

  export type issue_commentCreateNestedManyWithoutAuthorInput = {
    create?: XOR<issue_commentCreateWithoutAuthorInput, issue_commentUncheckedCreateWithoutAuthorInput> | issue_commentCreateWithoutAuthorInput[] | issue_commentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: issue_commentCreateOrConnectWithoutAuthorInput | issue_commentCreateOrConnectWithoutAuthorInput[]
    createMany?: issue_commentCreateManyAuthorInputEnvelope
    connect?: issue_commentWhereUniqueInput | issue_commentWhereUniqueInput[]
  }

  export type pull_request_commentCreateNestedManyWithoutAuthorInput = {
    create?: XOR<pull_request_commentCreateWithoutAuthorInput, pull_request_commentUncheckedCreateWithoutAuthorInput> | pull_request_commentCreateWithoutAuthorInput[] | pull_request_commentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: pull_request_commentCreateOrConnectWithoutAuthorInput | pull_request_commentCreateOrConnectWithoutAuthorInput[]
    createMany?: pull_request_commentCreateManyAuthorInputEnvelope
    connect?: pull_request_commentWhereUniqueInput | pull_request_commentWhereUniqueInput[]
  }

  export type repositoryUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<repositoryCreateWithoutOwnerInput, repositoryUncheckedCreateWithoutOwnerInput> | repositoryCreateWithoutOwnerInput[] | repositoryUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: repositoryCreateOrConnectWithoutOwnerInput | repositoryCreateOrConnectWithoutOwnerInput[]
    createMany?: repositoryCreateManyOwnerInputEnvelope
    connect?: repositoryWhereUniqueInput | repositoryWhereUniqueInput[]
  }

  export type repository_accessUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<repository_accessCreateWithoutUserInput, repository_accessUncheckedCreateWithoutUserInput> | repository_accessCreateWithoutUserInput[] | repository_accessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: repository_accessCreateOrConnectWithoutUserInput | repository_accessCreateOrConnectWithoutUserInput[]
    createMany?: repository_accessCreateManyUserInputEnvelope
    connect?: repository_accessWhereUniqueInput | repository_accessWhereUniqueInput[]
  }

  export type issueUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<issueCreateWithoutAuthorInput, issueUncheckedCreateWithoutAuthorInput> | issueCreateWithoutAuthorInput[] | issueUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: issueCreateOrConnectWithoutAuthorInput | issueCreateOrConnectWithoutAuthorInput[]
    createMany?: issueCreateManyAuthorInputEnvelope
    connect?: issueWhereUniqueInput | issueWhereUniqueInput[]
  }

  export type pull_requestUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<pull_requestCreateWithoutAuthorInput, pull_requestUncheckedCreateWithoutAuthorInput> | pull_requestCreateWithoutAuthorInput[] | pull_requestUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: pull_requestCreateOrConnectWithoutAuthorInput | pull_requestCreateOrConnectWithoutAuthorInput[]
    createMany?: pull_requestCreateManyAuthorInputEnvelope
    connect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
  }

  export type issue_commentUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<issue_commentCreateWithoutAuthorInput, issue_commentUncheckedCreateWithoutAuthorInput> | issue_commentCreateWithoutAuthorInput[] | issue_commentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: issue_commentCreateOrConnectWithoutAuthorInput | issue_commentCreateOrConnectWithoutAuthorInput[]
    createMany?: issue_commentCreateManyAuthorInputEnvelope
    connect?: issue_commentWhereUniqueInput | issue_commentWhereUniqueInput[]
  }

  export type pull_request_commentUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<pull_request_commentCreateWithoutAuthorInput, pull_request_commentUncheckedCreateWithoutAuthorInput> | pull_request_commentCreateWithoutAuthorInput[] | pull_request_commentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: pull_request_commentCreateOrConnectWithoutAuthorInput | pull_request_commentCreateOrConnectWithoutAuthorInput[]
    createMany?: pull_request_commentCreateManyAuthorInputEnvelope
    connect?: pull_request_commentWhereUniqueInput | pull_request_commentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type repositoryUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<repositoryCreateWithoutOwnerInput, repositoryUncheckedCreateWithoutOwnerInput> | repositoryCreateWithoutOwnerInput[] | repositoryUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: repositoryCreateOrConnectWithoutOwnerInput | repositoryCreateOrConnectWithoutOwnerInput[]
    upsert?: repositoryUpsertWithWhereUniqueWithoutOwnerInput | repositoryUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: repositoryCreateManyOwnerInputEnvelope
    set?: repositoryWhereUniqueInput | repositoryWhereUniqueInput[]
    disconnect?: repositoryWhereUniqueInput | repositoryWhereUniqueInput[]
    delete?: repositoryWhereUniqueInput | repositoryWhereUniqueInput[]
    connect?: repositoryWhereUniqueInput | repositoryWhereUniqueInput[]
    update?: repositoryUpdateWithWhereUniqueWithoutOwnerInput | repositoryUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: repositoryUpdateManyWithWhereWithoutOwnerInput | repositoryUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: repositoryScalarWhereInput | repositoryScalarWhereInput[]
  }

  export type repository_accessUpdateManyWithoutUserNestedInput = {
    create?: XOR<repository_accessCreateWithoutUserInput, repository_accessUncheckedCreateWithoutUserInput> | repository_accessCreateWithoutUserInput[] | repository_accessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: repository_accessCreateOrConnectWithoutUserInput | repository_accessCreateOrConnectWithoutUserInput[]
    upsert?: repository_accessUpsertWithWhereUniqueWithoutUserInput | repository_accessUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: repository_accessCreateManyUserInputEnvelope
    set?: repository_accessWhereUniqueInput | repository_accessWhereUniqueInput[]
    disconnect?: repository_accessWhereUniqueInput | repository_accessWhereUniqueInput[]
    delete?: repository_accessWhereUniqueInput | repository_accessWhereUniqueInput[]
    connect?: repository_accessWhereUniqueInput | repository_accessWhereUniqueInput[]
    update?: repository_accessUpdateWithWhereUniqueWithoutUserInput | repository_accessUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: repository_accessUpdateManyWithWhereWithoutUserInput | repository_accessUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: repository_accessScalarWhereInput | repository_accessScalarWhereInput[]
  }

  export type issueUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<issueCreateWithoutAuthorInput, issueUncheckedCreateWithoutAuthorInput> | issueCreateWithoutAuthorInput[] | issueUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: issueCreateOrConnectWithoutAuthorInput | issueCreateOrConnectWithoutAuthorInput[]
    upsert?: issueUpsertWithWhereUniqueWithoutAuthorInput | issueUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: issueCreateManyAuthorInputEnvelope
    set?: issueWhereUniqueInput | issueWhereUniqueInput[]
    disconnect?: issueWhereUniqueInput | issueWhereUniqueInput[]
    delete?: issueWhereUniqueInput | issueWhereUniqueInput[]
    connect?: issueWhereUniqueInput | issueWhereUniqueInput[]
    update?: issueUpdateWithWhereUniqueWithoutAuthorInput | issueUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: issueUpdateManyWithWhereWithoutAuthorInput | issueUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: issueScalarWhereInput | issueScalarWhereInput[]
  }

  export type pull_requestUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<pull_requestCreateWithoutAuthorInput, pull_requestUncheckedCreateWithoutAuthorInput> | pull_requestCreateWithoutAuthorInput[] | pull_requestUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: pull_requestCreateOrConnectWithoutAuthorInput | pull_requestCreateOrConnectWithoutAuthorInput[]
    upsert?: pull_requestUpsertWithWhereUniqueWithoutAuthorInput | pull_requestUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: pull_requestCreateManyAuthorInputEnvelope
    set?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    disconnect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    delete?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    connect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    update?: pull_requestUpdateWithWhereUniqueWithoutAuthorInput | pull_requestUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: pull_requestUpdateManyWithWhereWithoutAuthorInput | pull_requestUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: pull_requestScalarWhereInput | pull_requestScalarWhereInput[]
  }

  export type issue_commentUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<issue_commentCreateWithoutAuthorInput, issue_commentUncheckedCreateWithoutAuthorInput> | issue_commentCreateWithoutAuthorInput[] | issue_commentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: issue_commentCreateOrConnectWithoutAuthorInput | issue_commentCreateOrConnectWithoutAuthorInput[]
    upsert?: issue_commentUpsertWithWhereUniqueWithoutAuthorInput | issue_commentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: issue_commentCreateManyAuthorInputEnvelope
    set?: issue_commentWhereUniqueInput | issue_commentWhereUniqueInput[]
    disconnect?: issue_commentWhereUniqueInput | issue_commentWhereUniqueInput[]
    delete?: issue_commentWhereUniqueInput | issue_commentWhereUniqueInput[]
    connect?: issue_commentWhereUniqueInput | issue_commentWhereUniqueInput[]
    update?: issue_commentUpdateWithWhereUniqueWithoutAuthorInput | issue_commentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: issue_commentUpdateManyWithWhereWithoutAuthorInput | issue_commentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: issue_commentScalarWhereInput | issue_commentScalarWhereInput[]
  }

  export type pull_request_commentUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<pull_request_commentCreateWithoutAuthorInput, pull_request_commentUncheckedCreateWithoutAuthorInput> | pull_request_commentCreateWithoutAuthorInput[] | pull_request_commentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: pull_request_commentCreateOrConnectWithoutAuthorInput | pull_request_commentCreateOrConnectWithoutAuthorInput[]
    upsert?: pull_request_commentUpsertWithWhereUniqueWithoutAuthorInput | pull_request_commentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: pull_request_commentCreateManyAuthorInputEnvelope
    set?: pull_request_commentWhereUniqueInput | pull_request_commentWhereUniqueInput[]
    disconnect?: pull_request_commentWhereUniqueInput | pull_request_commentWhereUniqueInput[]
    delete?: pull_request_commentWhereUniqueInput | pull_request_commentWhereUniqueInput[]
    connect?: pull_request_commentWhereUniqueInput | pull_request_commentWhereUniqueInput[]
    update?: pull_request_commentUpdateWithWhereUniqueWithoutAuthorInput | pull_request_commentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: pull_request_commentUpdateManyWithWhereWithoutAuthorInput | pull_request_commentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: pull_request_commentScalarWhereInput | pull_request_commentScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type repositoryUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<repositoryCreateWithoutOwnerInput, repositoryUncheckedCreateWithoutOwnerInput> | repositoryCreateWithoutOwnerInput[] | repositoryUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: repositoryCreateOrConnectWithoutOwnerInput | repositoryCreateOrConnectWithoutOwnerInput[]
    upsert?: repositoryUpsertWithWhereUniqueWithoutOwnerInput | repositoryUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: repositoryCreateManyOwnerInputEnvelope
    set?: repositoryWhereUniqueInput | repositoryWhereUniqueInput[]
    disconnect?: repositoryWhereUniqueInput | repositoryWhereUniqueInput[]
    delete?: repositoryWhereUniqueInput | repositoryWhereUniqueInput[]
    connect?: repositoryWhereUniqueInput | repositoryWhereUniqueInput[]
    update?: repositoryUpdateWithWhereUniqueWithoutOwnerInput | repositoryUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: repositoryUpdateManyWithWhereWithoutOwnerInput | repositoryUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: repositoryScalarWhereInput | repositoryScalarWhereInput[]
  }

  export type repository_accessUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<repository_accessCreateWithoutUserInput, repository_accessUncheckedCreateWithoutUserInput> | repository_accessCreateWithoutUserInput[] | repository_accessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: repository_accessCreateOrConnectWithoutUserInput | repository_accessCreateOrConnectWithoutUserInput[]
    upsert?: repository_accessUpsertWithWhereUniqueWithoutUserInput | repository_accessUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: repository_accessCreateManyUserInputEnvelope
    set?: repository_accessWhereUniqueInput | repository_accessWhereUniqueInput[]
    disconnect?: repository_accessWhereUniqueInput | repository_accessWhereUniqueInput[]
    delete?: repository_accessWhereUniqueInput | repository_accessWhereUniqueInput[]
    connect?: repository_accessWhereUniqueInput | repository_accessWhereUniqueInput[]
    update?: repository_accessUpdateWithWhereUniqueWithoutUserInput | repository_accessUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: repository_accessUpdateManyWithWhereWithoutUserInput | repository_accessUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: repository_accessScalarWhereInput | repository_accessScalarWhereInput[]
  }

  export type issueUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<issueCreateWithoutAuthorInput, issueUncheckedCreateWithoutAuthorInput> | issueCreateWithoutAuthorInput[] | issueUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: issueCreateOrConnectWithoutAuthorInput | issueCreateOrConnectWithoutAuthorInput[]
    upsert?: issueUpsertWithWhereUniqueWithoutAuthorInput | issueUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: issueCreateManyAuthorInputEnvelope
    set?: issueWhereUniqueInput | issueWhereUniqueInput[]
    disconnect?: issueWhereUniqueInput | issueWhereUniqueInput[]
    delete?: issueWhereUniqueInput | issueWhereUniqueInput[]
    connect?: issueWhereUniqueInput | issueWhereUniqueInput[]
    update?: issueUpdateWithWhereUniqueWithoutAuthorInput | issueUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: issueUpdateManyWithWhereWithoutAuthorInput | issueUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: issueScalarWhereInput | issueScalarWhereInput[]
  }

  export type pull_requestUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<pull_requestCreateWithoutAuthorInput, pull_requestUncheckedCreateWithoutAuthorInput> | pull_requestCreateWithoutAuthorInput[] | pull_requestUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: pull_requestCreateOrConnectWithoutAuthorInput | pull_requestCreateOrConnectWithoutAuthorInput[]
    upsert?: pull_requestUpsertWithWhereUniqueWithoutAuthorInput | pull_requestUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: pull_requestCreateManyAuthorInputEnvelope
    set?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    disconnect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    delete?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    connect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    update?: pull_requestUpdateWithWhereUniqueWithoutAuthorInput | pull_requestUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: pull_requestUpdateManyWithWhereWithoutAuthorInput | pull_requestUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: pull_requestScalarWhereInput | pull_requestScalarWhereInput[]
  }

  export type issue_commentUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<issue_commentCreateWithoutAuthorInput, issue_commentUncheckedCreateWithoutAuthorInput> | issue_commentCreateWithoutAuthorInput[] | issue_commentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: issue_commentCreateOrConnectWithoutAuthorInput | issue_commentCreateOrConnectWithoutAuthorInput[]
    upsert?: issue_commentUpsertWithWhereUniqueWithoutAuthorInput | issue_commentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: issue_commentCreateManyAuthorInputEnvelope
    set?: issue_commentWhereUniqueInput | issue_commentWhereUniqueInput[]
    disconnect?: issue_commentWhereUniqueInput | issue_commentWhereUniqueInput[]
    delete?: issue_commentWhereUniqueInput | issue_commentWhereUniqueInput[]
    connect?: issue_commentWhereUniqueInput | issue_commentWhereUniqueInput[]
    update?: issue_commentUpdateWithWhereUniqueWithoutAuthorInput | issue_commentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: issue_commentUpdateManyWithWhereWithoutAuthorInput | issue_commentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: issue_commentScalarWhereInput | issue_commentScalarWhereInput[]
  }

  export type pull_request_commentUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<pull_request_commentCreateWithoutAuthorInput, pull_request_commentUncheckedCreateWithoutAuthorInput> | pull_request_commentCreateWithoutAuthorInput[] | pull_request_commentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: pull_request_commentCreateOrConnectWithoutAuthorInput | pull_request_commentCreateOrConnectWithoutAuthorInput[]
    upsert?: pull_request_commentUpsertWithWhereUniqueWithoutAuthorInput | pull_request_commentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: pull_request_commentCreateManyAuthorInputEnvelope
    set?: pull_request_commentWhereUniqueInput | pull_request_commentWhereUniqueInput[]
    disconnect?: pull_request_commentWhereUniqueInput | pull_request_commentWhereUniqueInput[]
    delete?: pull_request_commentWhereUniqueInput | pull_request_commentWhereUniqueInput[]
    connect?: pull_request_commentWhereUniqueInput | pull_request_commentWhereUniqueInput[]
    update?: pull_request_commentUpdateWithWhereUniqueWithoutAuthorInput | pull_request_commentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: pull_request_commentUpdateManyWithWhereWithoutAuthorInput | pull_request_commentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: pull_request_commentScalarWhereInput | pull_request_commentScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutRepositoryInput = {
    create?: XOR<usersCreateWithoutRepositoryInput, usersUncheckedCreateWithoutRepositoryInput>
    connectOrCreate?: usersCreateOrConnectWithoutRepositoryInput
    connect?: usersWhereUniqueInput
  }

  export type repositoryCreateNestedOneWithoutForksInput = {
    create?: XOR<repositoryCreateWithoutForksInput, repositoryUncheckedCreateWithoutForksInput>
    connectOrCreate?: repositoryCreateOrConnectWithoutForksInput
    connect?: repositoryWhereUniqueInput
  }

  export type repositoryCreateNestedManyWithoutParentInput = {
    create?: XOR<repositoryCreateWithoutParentInput, repositoryUncheckedCreateWithoutParentInput> | repositoryCreateWithoutParentInput[] | repositoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: repositoryCreateOrConnectWithoutParentInput | repositoryCreateOrConnectWithoutParentInput[]
    createMany?: repositoryCreateManyParentInputEnvelope
    connect?: repositoryWhereUniqueInput | repositoryWhereUniqueInput[]
  }

  export type repository_accessCreateNestedManyWithoutRepositoryInput = {
    create?: XOR<repository_accessCreateWithoutRepositoryInput, repository_accessUncheckedCreateWithoutRepositoryInput> | repository_accessCreateWithoutRepositoryInput[] | repository_accessUncheckedCreateWithoutRepositoryInput[]
    connectOrCreate?: repository_accessCreateOrConnectWithoutRepositoryInput | repository_accessCreateOrConnectWithoutRepositoryInput[]
    createMany?: repository_accessCreateManyRepositoryInputEnvelope
    connect?: repository_accessWhereUniqueInput | repository_accessWhereUniqueInput[]
  }

  export type issueCreateNestedManyWithoutRepositoryInput = {
    create?: XOR<issueCreateWithoutRepositoryInput, issueUncheckedCreateWithoutRepositoryInput> | issueCreateWithoutRepositoryInput[] | issueUncheckedCreateWithoutRepositoryInput[]
    connectOrCreate?: issueCreateOrConnectWithoutRepositoryInput | issueCreateOrConnectWithoutRepositoryInput[]
    createMany?: issueCreateManyRepositoryInputEnvelope
    connect?: issueWhereUniqueInput | issueWhereUniqueInput[]
  }

  export type pull_requestCreateNestedManyWithoutRepositoryInput = {
    create?: XOR<pull_requestCreateWithoutRepositoryInput, pull_requestUncheckedCreateWithoutRepositoryInput> | pull_requestCreateWithoutRepositoryInput[] | pull_requestUncheckedCreateWithoutRepositoryInput[]
    connectOrCreate?: pull_requestCreateOrConnectWithoutRepositoryInput | pull_requestCreateOrConnectWithoutRepositoryInput[]
    createMany?: pull_requestCreateManyRepositoryInputEnvelope
    connect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
  }

  export type pull_requestCreateNestedManyWithoutSource_repositoryInput = {
    create?: XOR<pull_requestCreateWithoutSource_repositoryInput, pull_requestUncheckedCreateWithoutSource_repositoryInput> | pull_requestCreateWithoutSource_repositoryInput[] | pull_requestUncheckedCreateWithoutSource_repositoryInput[]
    connectOrCreate?: pull_requestCreateOrConnectWithoutSource_repositoryInput | pull_requestCreateOrConnectWithoutSource_repositoryInput[]
    createMany?: pull_requestCreateManySource_repositoryInputEnvelope
    connect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
  }

  export type pull_requestCreateNestedManyWithoutTarget_repositoryInput = {
    create?: XOR<pull_requestCreateWithoutTarget_repositoryInput, pull_requestUncheckedCreateWithoutTarget_repositoryInput> | pull_requestCreateWithoutTarget_repositoryInput[] | pull_requestUncheckedCreateWithoutTarget_repositoryInput[]
    connectOrCreate?: pull_requestCreateOrConnectWithoutTarget_repositoryInput | pull_requestCreateOrConnectWithoutTarget_repositoryInput[]
    createMany?: pull_requestCreateManyTarget_repositoryInputEnvelope
    connect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
  }

  export type repositoryUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<repositoryCreateWithoutParentInput, repositoryUncheckedCreateWithoutParentInput> | repositoryCreateWithoutParentInput[] | repositoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: repositoryCreateOrConnectWithoutParentInput | repositoryCreateOrConnectWithoutParentInput[]
    createMany?: repositoryCreateManyParentInputEnvelope
    connect?: repositoryWhereUniqueInput | repositoryWhereUniqueInput[]
  }

  export type repository_accessUncheckedCreateNestedManyWithoutRepositoryInput = {
    create?: XOR<repository_accessCreateWithoutRepositoryInput, repository_accessUncheckedCreateWithoutRepositoryInput> | repository_accessCreateWithoutRepositoryInput[] | repository_accessUncheckedCreateWithoutRepositoryInput[]
    connectOrCreate?: repository_accessCreateOrConnectWithoutRepositoryInput | repository_accessCreateOrConnectWithoutRepositoryInput[]
    createMany?: repository_accessCreateManyRepositoryInputEnvelope
    connect?: repository_accessWhereUniqueInput | repository_accessWhereUniqueInput[]
  }

  export type issueUncheckedCreateNestedManyWithoutRepositoryInput = {
    create?: XOR<issueCreateWithoutRepositoryInput, issueUncheckedCreateWithoutRepositoryInput> | issueCreateWithoutRepositoryInput[] | issueUncheckedCreateWithoutRepositoryInput[]
    connectOrCreate?: issueCreateOrConnectWithoutRepositoryInput | issueCreateOrConnectWithoutRepositoryInput[]
    createMany?: issueCreateManyRepositoryInputEnvelope
    connect?: issueWhereUniqueInput | issueWhereUniqueInput[]
  }

  export type pull_requestUncheckedCreateNestedManyWithoutRepositoryInput = {
    create?: XOR<pull_requestCreateWithoutRepositoryInput, pull_requestUncheckedCreateWithoutRepositoryInput> | pull_requestCreateWithoutRepositoryInput[] | pull_requestUncheckedCreateWithoutRepositoryInput[]
    connectOrCreate?: pull_requestCreateOrConnectWithoutRepositoryInput | pull_requestCreateOrConnectWithoutRepositoryInput[]
    createMany?: pull_requestCreateManyRepositoryInputEnvelope
    connect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
  }

  export type pull_requestUncheckedCreateNestedManyWithoutSource_repositoryInput = {
    create?: XOR<pull_requestCreateWithoutSource_repositoryInput, pull_requestUncheckedCreateWithoutSource_repositoryInput> | pull_requestCreateWithoutSource_repositoryInput[] | pull_requestUncheckedCreateWithoutSource_repositoryInput[]
    connectOrCreate?: pull_requestCreateOrConnectWithoutSource_repositoryInput | pull_requestCreateOrConnectWithoutSource_repositoryInput[]
    createMany?: pull_requestCreateManySource_repositoryInputEnvelope
    connect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
  }

  export type pull_requestUncheckedCreateNestedManyWithoutTarget_repositoryInput = {
    create?: XOR<pull_requestCreateWithoutTarget_repositoryInput, pull_requestUncheckedCreateWithoutTarget_repositoryInput> | pull_requestCreateWithoutTarget_repositoryInput[] | pull_requestUncheckedCreateWithoutTarget_repositoryInput[]
    connectOrCreate?: pull_requestCreateOrConnectWithoutTarget_repositoryInput | pull_requestCreateOrConnectWithoutTarget_repositoryInput[]
    createMany?: pull_requestCreateManyTarget_repositoryInputEnvelope
    connect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type usersUpdateOneRequiredWithoutRepositoryNestedInput = {
    create?: XOR<usersCreateWithoutRepositoryInput, usersUncheckedCreateWithoutRepositoryInput>
    connectOrCreate?: usersCreateOrConnectWithoutRepositoryInput
    upsert?: usersUpsertWithoutRepositoryInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutRepositoryInput, usersUpdateWithoutRepositoryInput>, usersUncheckedUpdateWithoutRepositoryInput>
  }

  export type repositoryUpdateOneWithoutForksNestedInput = {
    create?: XOR<repositoryCreateWithoutForksInput, repositoryUncheckedCreateWithoutForksInput>
    connectOrCreate?: repositoryCreateOrConnectWithoutForksInput
    upsert?: repositoryUpsertWithoutForksInput
    disconnect?: repositoryWhereInput | boolean
    delete?: repositoryWhereInput | boolean
    connect?: repositoryWhereUniqueInput
    update?: XOR<XOR<repositoryUpdateToOneWithWhereWithoutForksInput, repositoryUpdateWithoutForksInput>, repositoryUncheckedUpdateWithoutForksInput>
  }

  export type repositoryUpdateManyWithoutParentNestedInput = {
    create?: XOR<repositoryCreateWithoutParentInput, repositoryUncheckedCreateWithoutParentInput> | repositoryCreateWithoutParentInput[] | repositoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: repositoryCreateOrConnectWithoutParentInput | repositoryCreateOrConnectWithoutParentInput[]
    upsert?: repositoryUpsertWithWhereUniqueWithoutParentInput | repositoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: repositoryCreateManyParentInputEnvelope
    set?: repositoryWhereUniqueInput | repositoryWhereUniqueInput[]
    disconnect?: repositoryWhereUniqueInput | repositoryWhereUniqueInput[]
    delete?: repositoryWhereUniqueInput | repositoryWhereUniqueInput[]
    connect?: repositoryWhereUniqueInput | repositoryWhereUniqueInput[]
    update?: repositoryUpdateWithWhereUniqueWithoutParentInput | repositoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: repositoryUpdateManyWithWhereWithoutParentInput | repositoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: repositoryScalarWhereInput | repositoryScalarWhereInput[]
  }

  export type repository_accessUpdateManyWithoutRepositoryNestedInput = {
    create?: XOR<repository_accessCreateWithoutRepositoryInput, repository_accessUncheckedCreateWithoutRepositoryInput> | repository_accessCreateWithoutRepositoryInput[] | repository_accessUncheckedCreateWithoutRepositoryInput[]
    connectOrCreate?: repository_accessCreateOrConnectWithoutRepositoryInput | repository_accessCreateOrConnectWithoutRepositoryInput[]
    upsert?: repository_accessUpsertWithWhereUniqueWithoutRepositoryInput | repository_accessUpsertWithWhereUniqueWithoutRepositoryInput[]
    createMany?: repository_accessCreateManyRepositoryInputEnvelope
    set?: repository_accessWhereUniqueInput | repository_accessWhereUniqueInput[]
    disconnect?: repository_accessWhereUniqueInput | repository_accessWhereUniqueInput[]
    delete?: repository_accessWhereUniqueInput | repository_accessWhereUniqueInput[]
    connect?: repository_accessWhereUniqueInput | repository_accessWhereUniqueInput[]
    update?: repository_accessUpdateWithWhereUniqueWithoutRepositoryInput | repository_accessUpdateWithWhereUniqueWithoutRepositoryInput[]
    updateMany?: repository_accessUpdateManyWithWhereWithoutRepositoryInput | repository_accessUpdateManyWithWhereWithoutRepositoryInput[]
    deleteMany?: repository_accessScalarWhereInput | repository_accessScalarWhereInput[]
  }

  export type issueUpdateManyWithoutRepositoryNestedInput = {
    create?: XOR<issueCreateWithoutRepositoryInput, issueUncheckedCreateWithoutRepositoryInput> | issueCreateWithoutRepositoryInput[] | issueUncheckedCreateWithoutRepositoryInput[]
    connectOrCreate?: issueCreateOrConnectWithoutRepositoryInput | issueCreateOrConnectWithoutRepositoryInput[]
    upsert?: issueUpsertWithWhereUniqueWithoutRepositoryInput | issueUpsertWithWhereUniqueWithoutRepositoryInput[]
    createMany?: issueCreateManyRepositoryInputEnvelope
    set?: issueWhereUniqueInput | issueWhereUniqueInput[]
    disconnect?: issueWhereUniqueInput | issueWhereUniqueInput[]
    delete?: issueWhereUniqueInput | issueWhereUniqueInput[]
    connect?: issueWhereUniqueInput | issueWhereUniqueInput[]
    update?: issueUpdateWithWhereUniqueWithoutRepositoryInput | issueUpdateWithWhereUniqueWithoutRepositoryInput[]
    updateMany?: issueUpdateManyWithWhereWithoutRepositoryInput | issueUpdateManyWithWhereWithoutRepositoryInput[]
    deleteMany?: issueScalarWhereInput | issueScalarWhereInput[]
  }

  export type pull_requestUpdateManyWithoutRepositoryNestedInput = {
    create?: XOR<pull_requestCreateWithoutRepositoryInput, pull_requestUncheckedCreateWithoutRepositoryInput> | pull_requestCreateWithoutRepositoryInput[] | pull_requestUncheckedCreateWithoutRepositoryInput[]
    connectOrCreate?: pull_requestCreateOrConnectWithoutRepositoryInput | pull_requestCreateOrConnectWithoutRepositoryInput[]
    upsert?: pull_requestUpsertWithWhereUniqueWithoutRepositoryInput | pull_requestUpsertWithWhereUniqueWithoutRepositoryInput[]
    createMany?: pull_requestCreateManyRepositoryInputEnvelope
    set?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    disconnect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    delete?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    connect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    update?: pull_requestUpdateWithWhereUniqueWithoutRepositoryInput | pull_requestUpdateWithWhereUniqueWithoutRepositoryInput[]
    updateMany?: pull_requestUpdateManyWithWhereWithoutRepositoryInput | pull_requestUpdateManyWithWhereWithoutRepositoryInput[]
    deleteMany?: pull_requestScalarWhereInput | pull_requestScalarWhereInput[]
  }

  export type pull_requestUpdateManyWithoutSource_repositoryNestedInput = {
    create?: XOR<pull_requestCreateWithoutSource_repositoryInput, pull_requestUncheckedCreateWithoutSource_repositoryInput> | pull_requestCreateWithoutSource_repositoryInput[] | pull_requestUncheckedCreateWithoutSource_repositoryInput[]
    connectOrCreate?: pull_requestCreateOrConnectWithoutSource_repositoryInput | pull_requestCreateOrConnectWithoutSource_repositoryInput[]
    upsert?: pull_requestUpsertWithWhereUniqueWithoutSource_repositoryInput | pull_requestUpsertWithWhereUniqueWithoutSource_repositoryInput[]
    createMany?: pull_requestCreateManySource_repositoryInputEnvelope
    set?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    disconnect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    delete?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    connect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    update?: pull_requestUpdateWithWhereUniqueWithoutSource_repositoryInput | pull_requestUpdateWithWhereUniqueWithoutSource_repositoryInput[]
    updateMany?: pull_requestUpdateManyWithWhereWithoutSource_repositoryInput | pull_requestUpdateManyWithWhereWithoutSource_repositoryInput[]
    deleteMany?: pull_requestScalarWhereInput | pull_requestScalarWhereInput[]
  }

  export type pull_requestUpdateManyWithoutTarget_repositoryNestedInput = {
    create?: XOR<pull_requestCreateWithoutTarget_repositoryInput, pull_requestUncheckedCreateWithoutTarget_repositoryInput> | pull_requestCreateWithoutTarget_repositoryInput[] | pull_requestUncheckedCreateWithoutTarget_repositoryInput[]
    connectOrCreate?: pull_requestCreateOrConnectWithoutTarget_repositoryInput | pull_requestCreateOrConnectWithoutTarget_repositoryInput[]
    upsert?: pull_requestUpsertWithWhereUniqueWithoutTarget_repositoryInput | pull_requestUpsertWithWhereUniqueWithoutTarget_repositoryInput[]
    createMany?: pull_requestCreateManyTarget_repositoryInputEnvelope
    set?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    disconnect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    delete?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    connect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    update?: pull_requestUpdateWithWhereUniqueWithoutTarget_repositoryInput | pull_requestUpdateWithWhereUniqueWithoutTarget_repositoryInput[]
    updateMany?: pull_requestUpdateManyWithWhereWithoutTarget_repositoryInput | pull_requestUpdateManyWithWhereWithoutTarget_repositoryInput[]
    deleteMany?: pull_requestScalarWhereInput | pull_requestScalarWhereInput[]
  }

  export type repositoryUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<repositoryCreateWithoutParentInput, repositoryUncheckedCreateWithoutParentInput> | repositoryCreateWithoutParentInput[] | repositoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: repositoryCreateOrConnectWithoutParentInput | repositoryCreateOrConnectWithoutParentInput[]
    upsert?: repositoryUpsertWithWhereUniqueWithoutParentInput | repositoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: repositoryCreateManyParentInputEnvelope
    set?: repositoryWhereUniqueInput | repositoryWhereUniqueInput[]
    disconnect?: repositoryWhereUniqueInput | repositoryWhereUniqueInput[]
    delete?: repositoryWhereUniqueInput | repositoryWhereUniqueInput[]
    connect?: repositoryWhereUniqueInput | repositoryWhereUniqueInput[]
    update?: repositoryUpdateWithWhereUniqueWithoutParentInput | repositoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: repositoryUpdateManyWithWhereWithoutParentInput | repositoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: repositoryScalarWhereInput | repositoryScalarWhereInput[]
  }

  export type repository_accessUncheckedUpdateManyWithoutRepositoryNestedInput = {
    create?: XOR<repository_accessCreateWithoutRepositoryInput, repository_accessUncheckedCreateWithoutRepositoryInput> | repository_accessCreateWithoutRepositoryInput[] | repository_accessUncheckedCreateWithoutRepositoryInput[]
    connectOrCreate?: repository_accessCreateOrConnectWithoutRepositoryInput | repository_accessCreateOrConnectWithoutRepositoryInput[]
    upsert?: repository_accessUpsertWithWhereUniqueWithoutRepositoryInput | repository_accessUpsertWithWhereUniqueWithoutRepositoryInput[]
    createMany?: repository_accessCreateManyRepositoryInputEnvelope
    set?: repository_accessWhereUniqueInput | repository_accessWhereUniqueInput[]
    disconnect?: repository_accessWhereUniqueInput | repository_accessWhereUniqueInput[]
    delete?: repository_accessWhereUniqueInput | repository_accessWhereUniqueInput[]
    connect?: repository_accessWhereUniqueInput | repository_accessWhereUniqueInput[]
    update?: repository_accessUpdateWithWhereUniqueWithoutRepositoryInput | repository_accessUpdateWithWhereUniqueWithoutRepositoryInput[]
    updateMany?: repository_accessUpdateManyWithWhereWithoutRepositoryInput | repository_accessUpdateManyWithWhereWithoutRepositoryInput[]
    deleteMany?: repository_accessScalarWhereInput | repository_accessScalarWhereInput[]
  }

  export type issueUncheckedUpdateManyWithoutRepositoryNestedInput = {
    create?: XOR<issueCreateWithoutRepositoryInput, issueUncheckedCreateWithoutRepositoryInput> | issueCreateWithoutRepositoryInput[] | issueUncheckedCreateWithoutRepositoryInput[]
    connectOrCreate?: issueCreateOrConnectWithoutRepositoryInput | issueCreateOrConnectWithoutRepositoryInput[]
    upsert?: issueUpsertWithWhereUniqueWithoutRepositoryInput | issueUpsertWithWhereUniqueWithoutRepositoryInput[]
    createMany?: issueCreateManyRepositoryInputEnvelope
    set?: issueWhereUniqueInput | issueWhereUniqueInput[]
    disconnect?: issueWhereUniqueInput | issueWhereUniqueInput[]
    delete?: issueWhereUniqueInput | issueWhereUniqueInput[]
    connect?: issueWhereUniqueInput | issueWhereUniqueInput[]
    update?: issueUpdateWithWhereUniqueWithoutRepositoryInput | issueUpdateWithWhereUniqueWithoutRepositoryInput[]
    updateMany?: issueUpdateManyWithWhereWithoutRepositoryInput | issueUpdateManyWithWhereWithoutRepositoryInput[]
    deleteMany?: issueScalarWhereInput | issueScalarWhereInput[]
  }

  export type pull_requestUncheckedUpdateManyWithoutRepositoryNestedInput = {
    create?: XOR<pull_requestCreateWithoutRepositoryInput, pull_requestUncheckedCreateWithoutRepositoryInput> | pull_requestCreateWithoutRepositoryInput[] | pull_requestUncheckedCreateWithoutRepositoryInput[]
    connectOrCreate?: pull_requestCreateOrConnectWithoutRepositoryInput | pull_requestCreateOrConnectWithoutRepositoryInput[]
    upsert?: pull_requestUpsertWithWhereUniqueWithoutRepositoryInput | pull_requestUpsertWithWhereUniqueWithoutRepositoryInput[]
    createMany?: pull_requestCreateManyRepositoryInputEnvelope
    set?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    disconnect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    delete?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    connect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    update?: pull_requestUpdateWithWhereUniqueWithoutRepositoryInput | pull_requestUpdateWithWhereUniqueWithoutRepositoryInput[]
    updateMany?: pull_requestUpdateManyWithWhereWithoutRepositoryInput | pull_requestUpdateManyWithWhereWithoutRepositoryInput[]
    deleteMany?: pull_requestScalarWhereInput | pull_requestScalarWhereInput[]
  }

  export type pull_requestUncheckedUpdateManyWithoutSource_repositoryNestedInput = {
    create?: XOR<pull_requestCreateWithoutSource_repositoryInput, pull_requestUncheckedCreateWithoutSource_repositoryInput> | pull_requestCreateWithoutSource_repositoryInput[] | pull_requestUncheckedCreateWithoutSource_repositoryInput[]
    connectOrCreate?: pull_requestCreateOrConnectWithoutSource_repositoryInput | pull_requestCreateOrConnectWithoutSource_repositoryInput[]
    upsert?: pull_requestUpsertWithWhereUniqueWithoutSource_repositoryInput | pull_requestUpsertWithWhereUniqueWithoutSource_repositoryInput[]
    createMany?: pull_requestCreateManySource_repositoryInputEnvelope
    set?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    disconnect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    delete?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    connect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    update?: pull_requestUpdateWithWhereUniqueWithoutSource_repositoryInput | pull_requestUpdateWithWhereUniqueWithoutSource_repositoryInput[]
    updateMany?: pull_requestUpdateManyWithWhereWithoutSource_repositoryInput | pull_requestUpdateManyWithWhereWithoutSource_repositoryInput[]
    deleteMany?: pull_requestScalarWhereInput | pull_requestScalarWhereInput[]
  }

  export type pull_requestUncheckedUpdateManyWithoutTarget_repositoryNestedInput = {
    create?: XOR<pull_requestCreateWithoutTarget_repositoryInput, pull_requestUncheckedCreateWithoutTarget_repositoryInput> | pull_requestCreateWithoutTarget_repositoryInput[] | pull_requestUncheckedCreateWithoutTarget_repositoryInput[]
    connectOrCreate?: pull_requestCreateOrConnectWithoutTarget_repositoryInput | pull_requestCreateOrConnectWithoutTarget_repositoryInput[]
    upsert?: pull_requestUpsertWithWhereUniqueWithoutTarget_repositoryInput | pull_requestUpsertWithWhereUniqueWithoutTarget_repositoryInput[]
    createMany?: pull_requestCreateManyTarget_repositoryInputEnvelope
    set?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    disconnect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    delete?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    connect?: pull_requestWhereUniqueInput | pull_requestWhereUniqueInput[]
    update?: pull_requestUpdateWithWhereUniqueWithoutTarget_repositoryInput | pull_requestUpdateWithWhereUniqueWithoutTarget_repositoryInput[]
    updateMany?: pull_requestUpdateManyWithWhereWithoutTarget_repositoryInput | pull_requestUpdateManyWithWhereWithoutTarget_repositoryInput[]
    deleteMany?: pull_requestScalarWhereInput | pull_requestScalarWhereInput[]
  }

  export type repositoryCreateNestedOneWithoutAccessInput = {
    create?: XOR<repositoryCreateWithoutAccessInput, repositoryUncheckedCreateWithoutAccessInput>
    connectOrCreate?: repositoryCreateOrConnectWithoutAccessInput
    connect?: repositoryWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutRepository_accessInput = {
    create?: XOR<usersCreateWithoutRepository_accessInput, usersUncheckedCreateWithoutRepository_accessInput>
    connectOrCreate?: usersCreateOrConnectWithoutRepository_accessInput
    connect?: usersWhereUniqueInput
  }

  export type EnumRepositoryAccessFieldUpdateOperationsInput = {
    set?: $Enums.RepositoryAccess
  }

  export type repositoryUpdateOneRequiredWithoutAccessNestedInput = {
    create?: XOR<repositoryCreateWithoutAccessInput, repositoryUncheckedCreateWithoutAccessInput>
    connectOrCreate?: repositoryCreateOrConnectWithoutAccessInput
    upsert?: repositoryUpsertWithoutAccessInput
    connect?: repositoryWhereUniqueInput
    update?: XOR<XOR<repositoryUpdateToOneWithWhereWithoutAccessInput, repositoryUpdateWithoutAccessInput>, repositoryUncheckedUpdateWithoutAccessInput>
  }

  export type usersUpdateOneRequiredWithoutRepository_accessNestedInput = {
    create?: XOR<usersCreateWithoutRepository_accessInput, usersUncheckedCreateWithoutRepository_accessInput>
    connectOrCreate?: usersCreateOrConnectWithoutRepository_accessInput
    upsert?: usersUpsertWithoutRepository_accessInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutRepository_accessInput, usersUpdateWithoutRepository_accessInput>, usersUncheckedUpdateWithoutRepository_accessInput>
  }

  export type repositoryCreateNestedOneWithoutIssueInput = {
    create?: XOR<repositoryCreateWithoutIssueInput, repositoryUncheckedCreateWithoutIssueInput>
    connectOrCreate?: repositoryCreateOrConnectWithoutIssueInput
    connect?: repositoryWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutIssueInput = {
    create?: XOR<usersCreateWithoutIssueInput, usersUncheckedCreateWithoutIssueInput>
    connectOrCreate?: usersCreateOrConnectWithoutIssueInput
    connect?: usersWhereUniqueInput
  }

  export type issue_commentCreateNestedManyWithoutIssueInput = {
    create?: XOR<issue_commentCreateWithoutIssueInput, issue_commentUncheckedCreateWithoutIssueInput> | issue_commentCreateWithoutIssueInput[] | issue_commentUncheckedCreateWithoutIssueInput[]
    connectOrCreate?: issue_commentCreateOrConnectWithoutIssueInput | issue_commentCreateOrConnectWithoutIssueInput[]
    createMany?: issue_commentCreateManyIssueInputEnvelope
    connect?: issue_commentWhereUniqueInput | issue_commentWhereUniqueInput[]
  }

  export type issue_commentUncheckedCreateNestedManyWithoutIssueInput = {
    create?: XOR<issue_commentCreateWithoutIssueInput, issue_commentUncheckedCreateWithoutIssueInput> | issue_commentCreateWithoutIssueInput[] | issue_commentUncheckedCreateWithoutIssueInput[]
    connectOrCreate?: issue_commentCreateOrConnectWithoutIssueInput | issue_commentCreateOrConnectWithoutIssueInput[]
    createMany?: issue_commentCreateManyIssueInputEnvelope
    connect?: issue_commentWhereUniqueInput | issue_commentWhereUniqueInput[]
  }

  export type repositoryUpdateOneRequiredWithoutIssueNestedInput = {
    create?: XOR<repositoryCreateWithoutIssueInput, repositoryUncheckedCreateWithoutIssueInput>
    connectOrCreate?: repositoryCreateOrConnectWithoutIssueInput
    upsert?: repositoryUpsertWithoutIssueInput
    connect?: repositoryWhereUniqueInput
    update?: XOR<XOR<repositoryUpdateToOneWithWhereWithoutIssueInput, repositoryUpdateWithoutIssueInput>, repositoryUncheckedUpdateWithoutIssueInput>
  }

  export type usersUpdateOneWithoutIssueNestedInput = {
    create?: XOR<usersCreateWithoutIssueInput, usersUncheckedCreateWithoutIssueInput>
    connectOrCreate?: usersCreateOrConnectWithoutIssueInput
    upsert?: usersUpsertWithoutIssueInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutIssueInput, usersUpdateWithoutIssueInput>, usersUncheckedUpdateWithoutIssueInput>
  }

  export type issue_commentUpdateManyWithoutIssueNestedInput = {
    create?: XOR<issue_commentCreateWithoutIssueInput, issue_commentUncheckedCreateWithoutIssueInput> | issue_commentCreateWithoutIssueInput[] | issue_commentUncheckedCreateWithoutIssueInput[]
    connectOrCreate?: issue_commentCreateOrConnectWithoutIssueInput | issue_commentCreateOrConnectWithoutIssueInput[]
    upsert?: issue_commentUpsertWithWhereUniqueWithoutIssueInput | issue_commentUpsertWithWhereUniqueWithoutIssueInput[]
    createMany?: issue_commentCreateManyIssueInputEnvelope
    set?: issue_commentWhereUniqueInput | issue_commentWhereUniqueInput[]
    disconnect?: issue_commentWhereUniqueInput | issue_commentWhereUniqueInput[]
    delete?: issue_commentWhereUniqueInput | issue_commentWhereUniqueInput[]
    connect?: issue_commentWhereUniqueInput | issue_commentWhereUniqueInput[]
    update?: issue_commentUpdateWithWhereUniqueWithoutIssueInput | issue_commentUpdateWithWhereUniqueWithoutIssueInput[]
    updateMany?: issue_commentUpdateManyWithWhereWithoutIssueInput | issue_commentUpdateManyWithWhereWithoutIssueInput[]
    deleteMany?: issue_commentScalarWhereInput | issue_commentScalarWhereInput[]
  }

  export type issue_commentUncheckedUpdateManyWithoutIssueNestedInput = {
    create?: XOR<issue_commentCreateWithoutIssueInput, issue_commentUncheckedCreateWithoutIssueInput> | issue_commentCreateWithoutIssueInput[] | issue_commentUncheckedCreateWithoutIssueInput[]
    connectOrCreate?: issue_commentCreateOrConnectWithoutIssueInput | issue_commentCreateOrConnectWithoutIssueInput[]
    upsert?: issue_commentUpsertWithWhereUniqueWithoutIssueInput | issue_commentUpsertWithWhereUniqueWithoutIssueInput[]
    createMany?: issue_commentCreateManyIssueInputEnvelope
    set?: issue_commentWhereUniqueInput | issue_commentWhereUniqueInput[]
    disconnect?: issue_commentWhereUniqueInput | issue_commentWhereUniqueInput[]
    delete?: issue_commentWhereUniqueInput | issue_commentWhereUniqueInput[]
    connect?: issue_commentWhereUniqueInput | issue_commentWhereUniqueInput[]
    update?: issue_commentUpdateWithWhereUniqueWithoutIssueInput | issue_commentUpdateWithWhereUniqueWithoutIssueInput[]
    updateMany?: issue_commentUpdateManyWithWhereWithoutIssueInput | issue_commentUpdateManyWithWhereWithoutIssueInput[]
    deleteMany?: issue_commentScalarWhereInput | issue_commentScalarWhereInput[]
  }

  export type repositoryCreateNestedOneWithoutPull_requestInput = {
    create?: XOR<repositoryCreateWithoutPull_requestInput, repositoryUncheckedCreateWithoutPull_requestInput>
    connectOrCreate?: repositoryCreateOrConnectWithoutPull_requestInput
    connect?: repositoryWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutPull_requestInput = {
    create?: XOR<usersCreateWithoutPull_requestInput, usersUncheckedCreateWithoutPull_requestInput>
    connectOrCreate?: usersCreateOrConnectWithoutPull_requestInput
    connect?: usersWhereUniqueInput
  }

  export type repositoryCreateNestedOneWithoutSource_pull_requestsInput = {
    create?: XOR<repositoryCreateWithoutSource_pull_requestsInput, repositoryUncheckedCreateWithoutSource_pull_requestsInput>
    connectOrCreate?: repositoryCreateOrConnectWithoutSource_pull_requestsInput
    connect?: repositoryWhereUniqueInput
  }

  export type repositoryCreateNestedOneWithoutTarget_pull_requestsInput = {
    create?: XOR<repositoryCreateWithoutTarget_pull_requestsInput, repositoryUncheckedCreateWithoutTarget_pull_requestsInput>
    connectOrCreate?: repositoryCreateOrConnectWithoutTarget_pull_requestsInput
    connect?: repositoryWhereUniqueInput
  }

  export type pull_request_commentCreateNestedManyWithoutPull_requestInput = {
    create?: XOR<pull_request_commentCreateWithoutPull_requestInput, pull_request_commentUncheckedCreateWithoutPull_requestInput> | pull_request_commentCreateWithoutPull_requestInput[] | pull_request_commentUncheckedCreateWithoutPull_requestInput[]
    connectOrCreate?: pull_request_commentCreateOrConnectWithoutPull_requestInput | pull_request_commentCreateOrConnectWithoutPull_requestInput[]
    createMany?: pull_request_commentCreateManyPull_requestInputEnvelope
    connect?: pull_request_commentWhereUniqueInput | pull_request_commentWhereUniqueInput[]
  }

  export type pull_request_commentUncheckedCreateNestedManyWithoutPull_requestInput = {
    create?: XOR<pull_request_commentCreateWithoutPull_requestInput, pull_request_commentUncheckedCreateWithoutPull_requestInput> | pull_request_commentCreateWithoutPull_requestInput[] | pull_request_commentUncheckedCreateWithoutPull_requestInput[]
    connectOrCreate?: pull_request_commentCreateOrConnectWithoutPull_requestInput | pull_request_commentCreateOrConnectWithoutPull_requestInput[]
    createMany?: pull_request_commentCreateManyPull_requestInputEnvelope
    connect?: pull_request_commentWhereUniqueInput | pull_request_commentWhereUniqueInput[]
  }

  export type EnumPullRequestStatusFieldUpdateOperationsInput = {
    set?: $Enums.PullRequestStatus
  }

  export type repositoryUpdateOneRequiredWithoutPull_requestNestedInput = {
    create?: XOR<repositoryCreateWithoutPull_requestInput, repositoryUncheckedCreateWithoutPull_requestInput>
    connectOrCreate?: repositoryCreateOrConnectWithoutPull_requestInput
    upsert?: repositoryUpsertWithoutPull_requestInput
    connect?: repositoryWhereUniqueInput
    update?: XOR<XOR<repositoryUpdateToOneWithWhereWithoutPull_requestInput, repositoryUpdateWithoutPull_requestInput>, repositoryUncheckedUpdateWithoutPull_requestInput>
  }

  export type usersUpdateOneWithoutPull_requestNestedInput = {
    create?: XOR<usersCreateWithoutPull_requestInput, usersUncheckedCreateWithoutPull_requestInput>
    connectOrCreate?: usersCreateOrConnectWithoutPull_requestInput
    upsert?: usersUpsertWithoutPull_requestInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutPull_requestInput, usersUpdateWithoutPull_requestInput>, usersUncheckedUpdateWithoutPull_requestInput>
  }

  export type repositoryUpdateOneRequiredWithoutSource_pull_requestsNestedInput = {
    create?: XOR<repositoryCreateWithoutSource_pull_requestsInput, repositoryUncheckedCreateWithoutSource_pull_requestsInput>
    connectOrCreate?: repositoryCreateOrConnectWithoutSource_pull_requestsInput
    upsert?: repositoryUpsertWithoutSource_pull_requestsInput
    connect?: repositoryWhereUniqueInput
    update?: XOR<XOR<repositoryUpdateToOneWithWhereWithoutSource_pull_requestsInput, repositoryUpdateWithoutSource_pull_requestsInput>, repositoryUncheckedUpdateWithoutSource_pull_requestsInput>
  }

  export type repositoryUpdateOneRequiredWithoutTarget_pull_requestsNestedInput = {
    create?: XOR<repositoryCreateWithoutTarget_pull_requestsInput, repositoryUncheckedCreateWithoutTarget_pull_requestsInput>
    connectOrCreate?: repositoryCreateOrConnectWithoutTarget_pull_requestsInput
    upsert?: repositoryUpsertWithoutTarget_pull_requestsInput
    connect?: repositoryWhereUniqueInput
    update?: XOR<XOR<repositoryUpdateToOneWithWhereWithoutTarget_pull_requestsInput, repositoryUpdateWithoutTarget_pull_requestsInput>, repositoryUncheckedUpdateWithoutTarget_pull_requestsInput>
  }

  export type pull_request_commentUpdateManyWithoutPull_requestNestedInput = {
    create?: XOR<pull_request_commentCreateWithoutPull_requestInput, pull_request_commentUncheckedCreateWithoutPull_requestInput> | pull_request_commentCreateWithoutPull_requestInput[] | pull_request_commentUncheckedCreateWithoutPull_requestInput[]
    connectOrCreate?: pull_request_commentCreateOrConnectWithoutPull_requestInput | pull_request_commentCreateOrConnectWithoutPull_requestInput[]
    upsert?: pull_request_commentUpsertWithWhereUniqueWithoutPull_requestInput | pull_request_commentUpsertWithWhereUniqueWithoutPull_requestInput[]
    createMany?: pull_request_commentCreateManyPull_requestInputEnvelope
    set?: pull_request_commentWhereUniqueInput | pull_request_commentWhereUniqueInput[]
    disconnect?: pull_request_commentWhereUniqueInput | pull_request_commentWhereUniqueInput[]
    delete?: pull_request_commentWhereUniqueInput | pull_request_commentWhereUniqueInput[]
    connect?: pull_request_commentWhereUniqueInput | pull_request_commentWhereUniqueInput[]
    update?: pull_request_commentUpdateWithWhereUniqueWithoutPull_requestInput | pull_request_commentUpdateWithWhereUniqueWithoutPull_requestInput[]
    updateMany?: pull_request_commentUpdateManyWithWhereWithoutPull_requestInput | pull_request_commentUpdateManyWithWhereWithoutPull_requestInput[]
    deleteMany?: pull_request_commentScalarWhereInput | pull_request_commentScalarWhereInput[]
  }

  export type pull_request_commentUncheckedUpdateManyWithoutPull_requestNestedInput = {
    create?: XOR<pull_request_commentCreateWithoutPull_requestInput, pull_request_commentUncheckedCreateWithoutPull_requestInput> | pull_request_commentCreateWithoutPull_requestInput[] | pull_request_commentUncheckedCreateWithoutPull_requestInput[]
    connectOrCreate?: pull_request_commentCreateOrConnectWithoutPull_requestInput | pull_request_commentCreateOrConnectWithoutPull_requestInput[]
    upsert?: pull_request_commentUpsertWithWhereUniqueWithoutPull_requestInput | pull_request_commentUpsertWithWhereUniqueWithoutPull_requestInput[]
    createMany?: pull_request_commentCreateManyPull_requestInputEnvelope
    set?: pull_request_commentWhereUniqueInput | pull_request_commentWhereUniqueInput[]
    disconnect?: pull_request_commentWhereUniqueInput | pull_request_commentWhereUniqueInput[]
    delete?: pull_request_commentWhereUniqueInput | pull_request_commentWhereUniqueInput[]
    connect?: pull_request_commentWhereUniqueInput | pull_request_commentWhereUniqueInput[]
    update?: pull_request_commentUpdateWithWhereUniqueWithoutPull_requestInput | pull_request_commentUpdateWithWhereUniqueWithoutPull_requestInput[]
    updateMany?: pull_request_commentUpdateManyWithWhereWithoutPull_requestInput | pull_request_commentUpdateManyWithWhereWithoutPull_requestInput[]
    deleteMany?: pull_request_commentScalarWhereInput | pull_request_commentScalarWhereInput[]
  }

  export type issueCreateNestedOneWithoutIssue_commentInput = {
    create?: XOR<issueCreateWithoutIssue_commentInput, issueUncheckedCreateWithoutIssue_commentInput>
    connectOrCreate?: issueCreateOrConnectWithoutIssue_commentInput
    connect?: issueWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutIssue_commentInput = {
    create?: XOR<usersCreateWithoutIssue_commentInput, usersUncheckedCreateWithoutIssue_commentInput>
    connectOrCreate?: usersCreateOrConnectWithoutIssue_commentInput
    connect?: usersWhereUniqueInput
  }

  export type issueUpdateOneRequiredWithoutIssue_commentNestedInput = {
    create?: XOR<issueCreateWithoutIssue_commentInput, issueUncheckedCreateWithoutIssue_commentInput>
    connectOrCreate?: issueCreateOrConnectWithoutIssue_commentInput
    upsert?: issueUpsertWithoutIssue_commentInput
    connect?: issueWhereUniqueInput
    update?: XOR<XOR<issueUpdateToOneWithWhereWithoutIssue_commentInput, issueUpdateWithoutIssue_commentInput>, issueUncheckedUpdateWithoutIssue_commentInput>
  }

  export type usersUpdateOneWithoutIssue_commentNestedInput = {
    create?: XOR<usersCreateWithoutIssue_commentInput, usersUncheckedCreateWithoutIssue_commentInput>
    connectOrCreate?: usersCreateOrConnectWithoutIssue_commentInput
    upsert?: usersUpsertWithoutIssue_commentInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutIssue_commentInput, usersUpdateWithoutIssue_commentInput>, usersUncheckedUpdateWithoutIssue_commentInput>
  }

  export type pull_requestCreateNestedOneWithoutPull_request_commentInput = {
    create?: XOR<pull_requestCreateWithoutPull_request_commentInput, pull_requestUncheckedCreateWithoutPull_request_commentInput>
    connectOrCreate?: pull_requestCreateOrConnectWithoutPull_request_commentInput
    connect?: pull_requestWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutPull_request_commentInput = {
    create?: XOR<usersCreateWithoutPull_request_commentInput, usersUncheckedCreateWithoutPull_request_commentInput>
    connectOrCreate?: usersCreateOrConnectWithoutPull_request_commentInput
    connect?: usersWhereUniqueInput
  }

  export type pull_requestUpdateOneRequiredWithoutPull_request_commentNestedInput = {
    create?: XOR<pull_requestCreateWithoutPull_request_commentInput, pull_requestUncheckedCreateWithoutPull_request_commentInput>
    connectOrCreate?: pull_requestCreateOrConnectWithoutPull_request_commentInput
    upsert?: pull_requestUpsertWithoutPull_request_commentInput
    connect?: pull_requestWhereUniqueInput
    update?: XOR<XOR<pull_requestUpdateToOneWithWhereWithoutPull_request_commentInput, pull_requestUpdateWithoutPull_request_commentInput>, pull_requestUncheckedUpdateWithoutPull_request_commentInput>
  }

  export type usersUpdateOneWithoutPull_request_commentNestedInput = {
    create?: XOR<usersCreateWithoutPull_request_commentInput, usersUncheckedCreateWithoutPull_request_commentInput>
    connectOrCreate?: usersCreateOrConnectWithoutPull_request_commentInput
    upsert?: usersUpsertWithoutPull_request_commentInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutPull_request_commentInput, usersUpdateWithoutPull_request_commentInput>, usersUncheckedUpdateWithoutPull_request_commentInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumRepositoryAccessFilter<$PrismaModel = never> = {
    equals?: $Enums.RepositoryAccess | EnumRepositoryAccessFieldRefInput<$PrismaModel>
    in?: $Enums.RepositoryAccess[] | ListEnumRepositoryAccessFieldRefInput<$PrismaModel>
    notIn?: $Enums.RepositoryAccess[] | ListEnumRepositoryAccessFieldRefInput<$PrismaModel>
    not?: NestedEnumRepositoryAccessFilter<$PrismaModel> | $Enums.RepositoryAccess
  }

  export type NestedEnumRepositoryAccessWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RepositoryAccess | EnumRepositoryAccessFieldRefInput<$PrismaModel>
    in?: $Enums.RepositoryAccess[] | ListEnumRepositoryAccessFieldRefInput<$PrismaModel>
    notIn?: $Enums.RepositoryAccess[] | ListEnumRepositoryAccessFieldRefInput<$PrismaModel>
    not?: NestedEnumRepositoryAccessWithAggregatesFilter<$PrismaModel> | $Enums.RepositoryAccess
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRepositoryAccessFilter<$PrismaModel>
    _max?: NestedEnumRepositoryAccessFilter<$PrismaModel>
  }

  export type NestedEnumPullRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PullRequestStatus | EnumPullRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PullRequestStatus[] | ListEnumPullRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PullRequestStatus[] | ListEnumPullRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPullRequestStatusFilter<$PrismaModel> | $Enums.PullRequestStatus
  }

  export type NestedEnumPullRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PullRequestStatus | EnumPullRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PullRequestStatus[] | ListEnumPullRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PullRequestStatus[] | ListEnumPullRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPullRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.PullRequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPullRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumPullRequestStatusFilter<$PrismaModel>
  }

  export type repositoryCreateWithoutOwnerInput = {
    name: string
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
    parent?: repositoryCreateNestedOneWithoutForksInput
    forks?: repositoryCreateNestedManyWithoutParentInput
    access?: repository_accessCreateNestedManyWithoutRepositoryInput
    issue?: issueCreateNestedManyWithoutRepositoryInput
    pull_request?: pull_requestCreateNestedManyWithoutRepositoryInput
    source_pull_requests?: pull_requestCreateNestedManyWithoutSource_repositoryInput
    target_pull_requests?: pull_requestCreateNestedManyWithoutTarget_repositoryInput
  }

  export type repositoryUncheckedCreateWithoutOwnerInput = {
    id?: number
    name: string
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    parent_id?: number | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
    forks?: repositoryUncheckedCreateNestedManyWithoutParentInput
    access?: repository_accessUncheckedCreateNestedManyWithoutRepositoryInput
    issue?: issueUncheckedCreateNestedManyWithoutRepositoryInput
    pull_request?: pull_requestUncheckedCreateNestedManyWithoutRepositoryInput
    source_pull_requests?: pull_requestUncheckedCreateNestedManyWithoutSource_repositoryInput
    target_pull_requests?: pull_requestUncheckedCreateNestedManyWithoutTarget_repositoryInput
  }

  export type repositoryCreateOrConnectWithoutOwnerInput = {
    where: repositoryWhereUniqueInput
    create: XOR<repositoryCreateWithoutOwnerInput, repositoryUncheckedCreateWithoutOwnerInput>
  }

  export type repositoryCreateManyOwnerInputEnvelope = {
    data: repositoryCreateManyOwnerInput | repositoryCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type repository_accessCreateWithoutUserInput = {
    access_level: $Enums.RepositoryAccess
    created_at?: Date | string
    updated_at?: Date | string
    repository: repositoryCreateNestedOneWithoutAccessInput
  }

  export type repository_accessUncheckedCreateWithoutUserInput = {
    id?: number
    repository_id: number
    access_level: $Enums.RepositoryAccess
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type repository_accessCreateOrConnectWithoutUserInput = {
    where: repository_accessWhereUniqueInput
    create: XOR<repository_accessCreateWithoutUserInput, repository_accessUncheckedCreateWithoutUserInput>
  }

  export type repository_accessCreateManyUserInputEnvelope = {
    data: repository_accessCreateManyUserInput | repository_accessCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type issueCreateWithoutAuthorInput = {
    title: string
    description?: string | null
    status: string
    created_at?: Date | string
    updated_at?: Date | string
    repository: repositoryCreateNestedOneWithoutIssueInput
    issue_comment?: issue_commentCreateNestedManyWithoutIssueInput
  }

  export type issueUncheckedCreateWithoutAuthorInput = {
    id?: number
    repository_id: number
    title: string
    description?: string | null
    status: string
    created_at?: Date | string
    updated_at?: Date | string
    issue_comment?: issue_commentUncheckedCreateNestedManyWithoutIssueInput
  }

  export type issueCreateOrConnectWithoutAuthorInput = {
    where: issueWhereUniqueInput
    create: XOR<issueCreateWithoutAuthorInput, issueUncheckedCreateWithoutAuthorInput>
  }

  export type issueCreateManyAuthorInputEnvelope = {
    data: issueCreateManyAuthorInput | issueCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type pull_requestCreateWithoutAuthorInput = {
    source_branch: string
    target_branch: string
    status?: $Enums.PullRequestStatus
    merged_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    repository: repositoryCreateNestedOneWithoutPull_requestInput
    source_repository: repositoryCreateNestedOneWithoutSource_pull_requestsInput
    target_repository: repositoryCreateNestedOneWithoutTarget_pull_requestsInput
    pull_request_comment?: pull_request_commentCreateNestedManyWithoutPull_requestInput
  }

  export type pull_requestUncheckedCreateWithoutAuthorInput = {
    id?: number
    repository_id: number
    source_branch: string
    target_branch: string
    status?: $Enums.PullRequestStatus
    source_repository_id: number
    target_repository_id: number
    merged_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    pull_request_comment?: pull_request_commentUncheckedCreateNestedManyWithoutPull_requestInput
  }

  export type pull_requestCreateOrConnectWithoutAuthorInput = {
    where: pull_requestWhereUniqueInput
    create: XOR<pull_requestCreateWithoutAuthorInput, pull_requestUncheckedCreateWithoutAuthorInput>
  }

  export type pull_requestCreateManyAuthorInputEnvelope = {
    data: pull_requestCreateManyAuthorInput | pull_requestCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type issue_commentCreateWithoutAuthorInput = {
    content: string
    created_at?: Date | string
    updated_at?: Date | string
    issue: issueCreateNestedOneWithoutIssue_commentInput
  }

  export type issue_commentUncheckedCreateWithoutAuthorInput = {
    id?: number
    issue_id: number
    content: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type issue_commentCreateOrConnectWithoutAuthorInput = {
    where: issue_commentWhereUniqueInput
    create: XOR<issue_commentCreateWithoutAuthorInput, issue_commentUncheckedCreateWithoutAuthorInput>
  }

  export type issue_commentCreateManyAuthorInputEnvelope = {
    data: issue_commentCreateManyAuthorInput | issue_commentCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type pull_request_commentCreateWithoutAuthorInput = {
    content: string
    created_at?: Date | string
    updated_at?: Date | string
    pull_request: pull_requestCreateNestedOneWithoutPull_request_commentInput
  }

  export type pull_request_commentUncheckedCreateWithoutAuthorInput = {
    id?: number
    pull_request_id: number
    content: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type pull_request_commentCreateOrConnectWithoutAuthorInput = {
    where: pull_request_commentWhereUniqueInput
    create: XOR<pull_request_commentCreateWithoutAuthorInput, pull_request_commentUncheckedCreateWithoutAuthorInput>
  }

  export type pull_request_commentCreateManyAuthorInputEnvelope = {
    data: pull_request_commentCreateManyAuthorInput | pull_request_commentCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type repositoryUpsertWithWhereUniqueWithoutOwnerInput = {
    where: repositoryWhereUniqueInput
    update: XOR<repositoryUpdateWithoutOwnerInput, repositoryUncheckedUpdateWithoutOwnerInput>
    create: XOR<repositoryCreateWithoutOwnerInput, repositoryUncheckedCreateWithoutOwnerInput>
  }

  export type repositoryUpdateWithWhereUniqueWithoutOwnerInput = {
    where: repositoryWhereUniqueInput
    data: XOR<repositoryUpdateWithoutOwnerInput, repositoryUncheckedUpdateWithoutOwnerInput>
  }

  export type repositoryUpdateManyWithWhereWithoutOwnerInput = {
    where: repositoryScalarWhereInput
    data: XOR<repositoryUpdateManyMutationInput, repositoryUncheckedUpdateManyWithoutOwnerInput>
  }

  export type repositoryScalarWhereInput = {
    AND?: repositoryScalarWhereInput | repositoryScalarWhereInput[]
    OR?: repositoryScalarWhereInput[]
    NOT?: repositoryScalarWhereInput | repositoryScalarWhereInput[]
    id?: IntFilter<"repository"> | number
    name?: StringFilter<"repository"> | string
    owner_user_id?: IntFilter<"repository"> | number
    description?: StringNullableFilter<"repository"> | string | null
    is_private?: BoolNullableFilter<"repository"> | boolean | null
    repoPath?: StringNullableFilter<"repository"> | string | null
    parent_id?: IntNullableFilter<"repository"> | number | null
    forked_at?: DateTimeNullableFilter<"repository"> | Date | string | null
    created_at?: DateTimeFilter<"repository"> | Date | string
    updated_at?: DateTimeFilter<"repository"> | Date | string
    archived?: BoolFilter<"repository"> | boolean
    forks_count?: IntNullableFilter<"repository"> | number | null
    pull_requests_count?: IntNullableFilter<"repository"> | number | null
  }

  export type repository_accessUpsertWithWhereUniqueWithoutUserInput = {
    where: repository_accessWhereUniqueInput
    update: XOR<repository_accessUpdateWithoutUserInput, repository_accessUncheckedUpdateWithoutUserInput>
    create: XOR<repository_accessCreateWithoutUserInput, repository_accessUncheckedCreateWithoutUserInput>
  }

  export type repository_accessUpdateWithWhereUniqueWithoutUserInput = {
    where: repository_accessWhereUniqueInput
    data: XOR<repository_accessUpdateWithoutUserInput, repository_accessUncheckedUpdateWithoutUserInput>
  }

  export type repository_accessUpdateManyWithWhereWithoutUserInput = {
    where: repository_accessScalarWhereInput
    data: XOR<repository_accessUpdateManyMutationInput, repository_accessUncheckedUpdateManyWithoutUserInput>
  }

  export type repository_accessScalarWhereInput = {
    AND?: repository_accessScalarWhereInput | repository_accessScalarWhereInput[]
    OR?: repository_accessScalarWhereInput[]
    NOT?: repository_accessScalarWhereInput | repository_accessScalarWhereInput[]
    id?: IntFilter<"repository_access"> | number
    repository_id?: IntFilter<"repository_access"> | number
    user_id?: IntFilter<"repository_access"> | number
    access_level?: EnumRepositoryAccessFilter<"repository_access"> | $Enums.RepositoryAccess
    created_at?: DateTimeFilter<"repository_access"> | Date | string
    updated_at?: DateTimeFilter<"repository_access"> | Date | string
  }

  export type issueUpsertWithWhereUniqueWithoutAuthorInput = {
    where: issueWhereUniqueInput
    update: XOR<issueUpdateWithoutAuthorInput, issueUncheckedUpdateWithoutAuthorInput>
    create: XOR<issueCreateWithoutAuthorInput, issueUncheckedCreateWithoutAuthorInput>
  }

  export type issueUpdateWithWhereUniqueWithoutAuthorInput = {
    where: issueWhereUniqueInput
    data: XOR<issueUpdateWithoutAuthorInput, issueUncheckedUpdateWithoutAuthorInput>
  }

  export type issueUpdateManyWithWhereWithoutAuthorInput = {
    where: issueScalarWhereInput
    data: XOR<issueUpdateManyMutationInput, issueUncheckedUpdateManyWithoutAuthorInput>
  }

  export type issueScalarWhereInput = {
    AND?: issueScalarWhereInput | issueScalarWhereInput[]
    OR?: issueScalarWhereInput[]
    NOT?: issueScalarWhereInput | issueScalarWhereInput[]
    id?: IntFilter<"issue"> | number
    repository_id?: IntFilter<"issue"> | number
    author_id?: IntNullableFilter<"issue"> | number | null
    title?: StringFilter<"issue"> | string
    description?: StringNullableFilter<"issue"> | string | null
    status?: StringFilter<"issue"> | string
    created_at?: DateTimeFilter<"issue"> | Date | string
    updated_at?: DateTimeFilter<"issue"> | Date | string
  }

  export type pull_requestUpsertWithWhereUniqueWithoutAuthorInput = {
    where: pull_requestWhereUniqueInput
    update: XOR<pull_requestUpdateWithoutAuthorInput, pull_requestUncheckedUpdateWithoutAuthorInput>
    create: XOR<pull_requestCreateWithoutAuthorInput, pull_requestUncheckedCreateWithoutAuthorInput>
  }

  export type pull_requestUpdateWithWhereUniqueWithoutAuthorInput = {
    where: pull_requestWhereUniqueInput
    data: XOR<pull_requestUpdateWithoutAuthorInput, pull_requestUncheckedUpdateWithoutAuthorInput>
  }

  export type pull_requestUpdateManyWithWhereWithoutAuthorInput = {
    where: pull_requestScalarWhereInput
    data: XOR<pull_requestUpdateManyMutationInput, pull_requestUncheckedUpdateManyWithoutAuthorInput>
  }

  export type pull_requestScalarWhereInput = {
    AND?: pull_requestScalarWhereInput | pull_requestScalarWhereInput[]
    OR?: pull_requestScalarWhereInput[]
    NOT?: pull_requestScalarWhereInput | pull_requestScalarWhereInput[]
    id?: IntFilter<"pull_request"> | number
    repository_id?: IntFilter<"pull_request"> | number
    author_id?: IntNullableFilter<"pull_request"> | number | null
    source_branch?: StringFilter<"pull_request"> | string
    target_branch?: StringFilter<"pull_request"> | string
    status?: EnumPullRequestStatusFilter<"pull_request"> | $Enums.PullRequestStatus
    source_repository_id?: IntFilter<"pull_request"> | number
    target_repository_id?: IntFilter<"pull_request"> | number
    merged_at?: DateTimeNullableFilter<"pull_request"> | Date | string | null
    created_at?: DateTimeFilter<"pull_request"> | Date | string
    updated_at?: DateTimeFilter<"pull_request"> | Date | string
  }

  export type issue_commentUpsertWithWhereUniqueWithoutAuthorInput = {
    where: issue_commentWhereUniqueInput
    update: XOR<issue_commentUpdateWithoutAuthorInput, issue_commentUncheckedUpdateWithoutAuthorInput>
    create: XOR<issue_commentCreateWithoutAuthorInput, issue_commentUncheckedCreateWithoutAuthorInput>
  }

  export type issue_commentUpdateWithWhereUniqueWithoutAuthorInput = {
    where: issue_commentWhereUniqueInput
    data: XOR<issue_commentUpdateWithoutAuthorInput, issue_commentUncheckedUpdateWithoutAuthorInput>
  }

  export type issue_commentUpdateManyWithWhereWithoutAuthorInput = {
    where: issue_commentScalarWhereInput
    data: XOR<issue_commentUpdateManyMutationInput, issue_commentUncheckedUpdateManyWithoutAuthorInput>
  }

  export type issue_commentScalarWhereInput = {
    AND?: issue_commentScalarWhereInput | issue_commentScalarWhereInput[]
    OR?: issue_commentScalarWhereInput[]
    NOT?: issue_commentScalarWhereInput | issue_commentScalarWhereInput[]
    id?: IntFilter<"issue_comment"> | number
    issue_id?: IntFilter<"issue_comment"> | number
    author_id?: IntNullableFilter<"issue_comment"> | number | null
    content?: StringFilter<"issue_comment"> | string
    created_at?: DateTimeFilter<"issue_comment"> | Date | string
    updated_at?: DateTimeFilter<"issue_comment"> | Date | string
  }

  export type pull_request_commentUpsertWithWhereUniqueWithoutAuthorInput = {
    where: pull_request_commentWhereUniqueInput
    update: XOR<pull_request_commentUpdateWithoutAuthorInput, pull_request_commentUncheckedUpdateWithoutAuthorInput>
    create: XOR<pull_request_commentCreateWithoutAuthorInput, pull_request_commentUncheckedCreateWithoutAuthorInput>
  }

  export type pull_request_commentUpdateWithWhereUniqueWithoutAuthorInput = {
    where: pull_request_commentWhereUniqueInput
    data: XOR<pull_request_commentUpdateWithoutAuthorInput, pull_request_commentUncheckedUpdateWithoutAuthorInput>
  }

  export type pull_request_commentUpdateManyWithWhereWithoutAuthorInput = {
    where: pull_request_commentScalarWhereInput
    data: XOR<pull_request_commentUpdateManyMutationInput, pull_request_commentUncheckedUpdateManyWithoutAuthorInput>
  }

  export type pull_request_commentScalarWhereInput = {
    AND?: pull_request_commentScalarWhereInput | pull_request_commentScalarWhereInput[]
    OR?: pull_request_commentScalarWhereInput[]
    NOT?: pull_request_commentScalarWhereInput | pull_request_commentScalarWhereInput[]
    id?: IntFilter<"pull_request_comment"> | number
    pull_request_id?: IntFilter<"pull_request_comment"> | number
    author_id?: IntNullableFilter<"pull_request_comment"> | number | null
    content?: StringFilter<"pull_request_comment"> | string
    created_at?: DateTimeFilter<"pull_request_comment"> | Date | string
    updated_at?: DateTimeFilter<"pull_request_comment"> | Date | string
  }

  export type usersCreateWithoutRepositoryInput = {
    username: string
    email: string
    password_hash: string
    bio?: string | null
    gitCliPassword?: string | null
    avatar_path?: string | null
    is_admin?: boolean | null
    confirmed?: boolean | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    contribution_count?: number | null
    suspended?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    repository_access?: repository_accessCreateNestedManyWithoutUserInput
    issue?: issueCreateNestedManyWithoutAuthorInput
    pull_request?: pull_requestCreateNestedManyWithoutAuthorInput
    issue_comment?: issue_commentCreateNestedManyWithoutAuthorInput
    pull_request_comment?: pull_request_commentCreateNestedManyWithoutAuthorInput
  }

  export type usersUncheckedCreateWithoutRepositoryInput = {
    id?: number
    username: string
    email: string
    password_hash: string
    bio?: string | null
    gitCliPassword?: string | null
    avatar_path?: string | null
    is_admin?: boolean | null
    confirmed?: boolean | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    contribution_count?: number | null
    suspended?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    repository_access?: repository_accessUncheckedCreateNestedManyWithoutUserInput
    issue?: issueUncheckedCreateNestedManyWithoutAuthorInput
    pull_request?: pull_requestUncheckedCreateNestedManyWithoutAuthorInput
    issue_comment?: issue_commentUncheckedCreateNestedManyWithoutAuthorInput
    pull_request_comment?: pull_request_commentUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type usersCreateOrConnectWithoutRepositoryInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutRepositoryInput, usersUncheckedCreateWithoutRepositoryInput>
  }

  export type repositoryCreateWithoutForksInput = {
    name: string
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
    owner: usersCreateNestedOneWithoutRepositoryInput
    parent?: repositoryCreateNestedOneWithoutForksInput
    access?: repository_accessCreateNestedManyWithoutRepositoryInput
    issue?: issueCreateNestedManyWithoutRepositoryInput
    pull_request?: pull_requestCreateNestedManyWithoutRepositoryInput
    source_pull_requests?: pull_requestCreateNestedManyWithoutSource_repositoryInput
    target_pull_requests?: pull_requestCreateNestedManyWithoutTarget_repositoryInput
  }

  export type repositoryUncheckedCreateWithoutForksInput = {
    id?: number
    name: string
    owner_user_id: number
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    parent_id?: number | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
    access?: repository_accessUncheckedCreateNestedManyWithoutRepositoryInput
    issue?: issueUncheckedCreateNestedManyWithoutRepositoryInput
    pull_request?: pull_requestUncheckedCreateNestedManyWithoutRepositoryInput
    source_pull_requests?: pull_requestUncheckedCreateNestedManyWithoutSource_repositoryInput
    target_pull_requests?: pull_requestUncheckedCreateNestedManyWithoutTarget_repositoryInput
  }

  export type repositoryCreateOrConnectWithoutForksInput = {
    where: repositoryWhereUniqueInput
    create: XOR<repositoryCreateWithoutForksInput, repositoryUncheckedCreateWithoutForksInput>
  }

  export type repositoryCreateWithoutParentInput = {
    name: string
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
    owner: usersCreateNestedOneWithoutRepositoryInput
    forks?: repositoryCreateNestedManyWithoutParentInput
    access?: repository_accessCreateNestedManyWithoutRepositoryInput
    issue?: issueCreateNestedManyWithoutRepositoryInput
    pull_request?: pull_requestCreateNestedManyWithoutRepositoryInput
    source_pull_requests?: pull_requestCreateNestedManyWithoutSource_repositoryInput
    target_pull_requests?: pull_requestCreateNestedManyWithoutTarget_repositoryInput
  }

  export type repositoryUncheckedCreateWithoutParentInput = {
    id?: number
    name: string
    owner_user_id: number
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
    forks?: repositoryUncheckedCreateNestedManyWithoutParentInput
    access?: repository_accessUncheckedCreateNestedManyWithoutRepositoryInput
    issue?: issueUncheckedCreateNestedManyWithoutRepositoryInput
    pull_request?: pull_requestUncheckedCreateNestedManyWithoutRepositoryInput
    source_pull_requests?: pull_requestUncheckedCreateNestedManyWithoutSource_repositoryInput
    target_pull_requests?: pull_requestUncheckedCreateNestedManyWithoutTarget_repositoryInput
  }

  export type repositoryCreateOrConnectWithoutParentInput = {
    where: repositoryWhereUniqueInput
    create: XOR<repositoryCreateWithoutParentInput, repositoryUncheckedCreateWithoutParentInput>
  }

  export type repositoryCreateManyParentInputEnvelope = {
    data: repositoryCreateManyParentInput | repositoryCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type repository_accessCreateWithoutRepositoryInput = {
    access_level: $Enums.RepositoryAccess
    created_at?: Date | string
    updated_at?: Date | string
    user: usersCreateNestedOneWithoutRepository_accessInput
  }

  export type repository_accessUncheckedCreateWithoutRepositoryInput = {
    id?: number
    user_id: number
    access_level: $Enums.RepositoryAccess
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type repository_accessCreateOrConnectWithoutRepositoryInput = {
    where: repository_accessWhereUniqueInput
    create: XOR<repository_accessCreateWithoutRepositoryInput, repository_accessUncheckedCreateWithoutRepositoryInput>
  }

  export type repository_accessCreateManyRepositoryInputEnvelope = {
    data: repository_accessCreateManyRepositoryInput | repository_accessCreateManyRepositoryInput[]
    skipDuplicates?: boolean
  }

  export type issueCreateWithoutRepositoryInput = {
    title: string
    description?: string | null
    status: string
    created_at?: Date | string
    updated_at?: Date | string
    author?: usersCreateNestedOneWithoutIssueInput
    issue_comment?: issue_commentCreateNestedManyWithoutIssueInput
  }

  export type issueUncheckedCreateWithoutRepositoryInput = {
    id?: number
    author_id?: number | null
    title: string
    description?: string | null
    status: string
    created_at?: Date | string
    updated_at?: Date | string
    issue_comment?: issue_commentUncheckedCreateNestedManyWithoutIssueInput
  }

  export type issueCreateOrConnectWithoutRepositoryInput = {
    where: issueWhereUniqueInput
    create: XOR<issueCreateWithoutRepositoryInput, issueUncheckedCreateWithoutRepositoryInput>
  }

  export type issueCreateManyRepositoryInputEnvelope = {
    data: issueCreateManyRepositoryInput | issueCreateManyRepositoryInput[]
    skipDuplicates?: boolean
  }

  export type pull_requestCreateWithoutRepositoryInput = {
    source_branch: string
    target_branch: string
    status?: $Enums.PullRequestStatus
    merged_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    author?: usersCreateNestedOneWithoutPull_requestInput
    source_repository: repositoryCreateNestedOneWithoutSource_pull_requestsInput
    target_repository: repositoryCreateNestedOneWithoutTarget_pull_requestsInput
    pull_request_comment?: pull_request_commentCreateNestedManyWithoutPull_requestInput
  }

  export type pull_requestUncheckedCreateWithoutRepositoryInput = {
    id?: number
    author_id?: number | null
    source_branch: string
    target_branch: string
    status?: $Enums.PullRequestStatus
    source_repository_id: number
    target_repository_id: number
    merged_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    pull_request_comment?: pull_request_commentUncheckedCreateNestedManyWithoutPull_requestInput
  }

  export type pull_requestCreateOrConnectWithoutRepositoryInput = {
    where: pull_requestWhereUniqueInput
    create: XOR<pull_requestCreateWithoutRepositoryInput, pull_requestUncheckedCreateWithoutRepositoryInput>
  }

  export type pull_requestCreateManyRepositoryInputEnvelope = {
    data: pull_requestCreateManyRepositoryInput | pull_requestCreateManyRepositoryInput[]
    skipDuplicates?: boolean
  }

  export type pull_requestCreateWithoutSource_repositoryInput = {
    source_branch: string
    target_branch: string
    status?: $Enums.PullRequestStatus
    merged_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    repository: repositoryCreateNestedOneWithoutPull_requestInput
    author?: usersCreateNestedOneWithoutPull_requestInput
    target_repository: repositoryCreateNestedOneWithoutTarget_pull_requestsInput
    pull_request_comment?: pull_request_commentCreateNestedManyWithoutPull_requestInput
  }

  export type pull_requestUncheckedCreateWithoutSource_repositoryInput = {
    id?: number
    repository_id: number
    author_id?: number | null
    source_branch: string
    target_branch: string
    status?: $Enums.PullRequestStatus
    target_repository_id: number
    merged_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    pull_request_comment?: pull_request_commentUncheckedCreateNestedManyWithoutPull_requestInput
  }

  export type pull_requestCreateOrConnectWithoutSource_repositoryInput = {
    where: pull_requestWhereUniqueInput
    create: XOR<pull_requestCreateWithoutSource_repositoryInput, pull_requestUncheckedCreateWithoutSource_repositoryInput>
  }

  export type pull_requestCreateManySource_repositoryInputEnvelope = {
    data: pull_requestCreateManySource_repositoryInput | pull_requestCreateManySource_repositoryInput[]
    skipDuplicates?: boolean
  }

  export type pull_requestCreateWithoutTarget_repositoryInput = {
    source_branch: string
    target_branch: string
    status?: $Enums.PullRequestStatus
    merged_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    repository: repositoryCreateNestedOneWithoutPull_requestInput
    author?: usersCreateNestedOneWithoutPull_requestInput
    source_repository: repositoryCreateNestedOneWithoutSource_pull_requestsInput
    pull_request_comment?: pull_request_commentCreateNestedManyWithoutPull_requestInput
  }

  export type pull_requestUncheckedCreateWithoutTarget_repositoryInput = {
    id?: number
    repository_id: number
    author_id?: number | null
    source_branch: string
    target_branch: string
    status?: $Enums.PullRequestStatus
    source_repository_id: number
    merged_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    pull_request_comment?: pull_request_commentUncheckedCreateNestedManyWithoutPull_requestInput
  }

  export type pull_requestCreateOrConnectWithoutTarget_repositoryInput = {
    where: pull_requestWhereUniqueInput
    create: XOR<pull_requestCreateWithoutTarget_repositoryInput, pull_requestUncheckedCreateWithoutTarget_repositoryInput>
  }

  export type pull_requestCreateManyTarget_repositoryInputEnvelope = {
    data: pull_requestCreateManyTarget_repositoryInput | pull_requestCreateManyTarget_repositoryInput[]
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutRepositoryInput = {
    update: XOR<usersUpdateWithoutRepositoryInput, usersUncheckedUpdateWithoutRepositoryInput>
    create: XOR<usersCreateWithoutRepositoryInput, usersUncheckedCreateWithoutRepositoryInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutRepositoryInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutRepositoryInput, usersUncheckedUpdateWithoutRepositoryInput>
  }

  export type usersUpdateWithoutRepositoryInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    gitCliPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_path?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    contribution_count?: NullableIntFieldUpdateOperationsInput | number | null
    suspended?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository_access?: repository_accessUpdateManyWithoutUserNestedInput
    issue?: issueUpdateManyWithoutAuthorNestedInput
    pull_request?: pull_requestUpdateManyWithoutAuthorNestedInput
    issue_comment?: issue_commentUpdateManyWithoutAuthorNestedInput
    pull_request_comment?: pull_request_commentUpdateManyWithoutAuthorNestedInput
  }

  export type usersUncheckedUpdateWithoutRepositoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    gitCliPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_path?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    contribution_count?: NullableIntFieldUpdateOperationsInput | number | null
    suspended?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository_access?: repository_accessUncheckedUpdateManyWithoutUserNestedInput
    issue?: issueUncheckedUpdateManyWithoutAuthorNestedInput
    pull_request?: pull_requestUncheckedUpdateManyWithoutAuthorNestedInput
    issue_comment?: issue_commentUncheckedUpdateManyWithoutAuthorNestedInput
    pull_request_comment?: pull_request_commentUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type repositoryUpsertWithoutForksInput = {
    update: XOR<repositoryUpdateWithoutForksInput, repositoryUncheckedUpdateWithoutForksInput>
    create: XOR<repositoryCreateWithoutForksInput, repositoryUncheckedCreateWithoutForksInput>
    where?: repositoryWhereInput
  }

  export type repositoryUpdateToOneWithWhereWithoutForksInput = {
    where?: repositoryWhereInput
    data: XOR<repositoryUpdateWithoutForksInput, repositoryUncheckedUpdateWithoutForksInput>
  }

  export type repositoryUpdateWithoutForksInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
    owner?: usersUpdateOneRequiredWithoutRepositoryNestedInput
    parent?: repositoryUpdateOneWithoutForksNestedInput
    access?: repository_accessUpdateManyWithoutRepositoryNestedInput
    issue?: issueUpdateManyWithoutRepositoryNestedInput
    pull_request?: pull_requestUpdateManyWithoutRepositoryNestedInput
    source_pull_requests?: pull_requestUpdateManyWithoutSource_repositoryNestedInput
    target_pull_requests?: pull_requestUpdateManyWithoutTarget_repositoryNestedInput
  }

  export type repositoryUncheckedUpdateWithoutForksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    owner_user_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    parent_id?: NullableIntFieldUpdateOperationsInput | number | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
    access?: repository_accessUncheckedUpdateManyWithoutRepositoryNestedInput
    issue?: issueUncheckedUpdateManyWithoutRepositoryNestedInput
    pull_request?: pull_requestUncheckedUpdateManyWithoutRepositoryNestedInput
    source_pull_requests?: pull_requestUncheckedUpdateManyWithoutSource_repositoryNestedInput
    target_pull_requests?: pull_requestUncheckedUpdateManyWithoutTarget_repositoryNestedInput
  }

  export type repositoryUpsertWithWhereUniqueWithoutParentInput = {
    where: repositoryWhereUniqueInput
    update: XOR<repositoryUpdateWithoutParentInput, repositoryUncheckedUpdateWithoutParentInput>
    create: XOR<repositoryCreateWithoutParentInput, repositoryUncheckedCreateWithoutParentInput>
  }

  export type repositoryUpdateWithWhereUniqueWithoutParentInput = {
    where: repositoryWhereUniqueInput
    data: XOR<repositoryUpdateWithoutParentInput, repositoryUncheckedUpdateWithoutParentInput>
  }

  export type repositoryUpdateManyWithWhereWithoutParentInput = {
    where: repositoryScalarWhereInput
    data: XOR<repositoryUpdateManyMutationInput, repositoryUncheckedUpdateManyWithoutParentInput>
  }

  export type repository_accessUpsertWithWhereUniqueWithoutRepositoryInput = {
    where: repository_accessWhereUniqueInput
    update: XOR<repository_accessUpdateWithoutRepositoryInput, repository_accessUncheckedUpdateWithoutRepositoryInput>
    create: XOR<repository_accessCreateWithoutRepositoryInput, repository_accessUncheckedCreateWithoutRepositoryInput>
  }

  export type repository_accessUpdateWithWhereUniqueWithoutRepositoryInput = {
    where: repository_accessWhereUniqueInput
    data: XOR<repository_accessUpdateWithoutRepositoryInput, repository_accessUncheckedUpdateWithoutRepositoryInput>
  }

  export type repository_accessUpdateManyWithWhereWithoutRepositoryInput = {
    where: repository_accessScalarWhereInput
    data: XOR<repository_accessUpdateManyMutationInput, repository_accessUncheckedUpdateManyWithoutRepositoryInput>
  }

  export type issueUpsertWithWhereUniqueWithoutRepositoryInput = {
    where: issueWhereUniqueInput
    update: XOR<issueUpdateWithoutRepositoryInput, issueUncheckedUpdateWithoutRepositoryInput>
    create: XOR<issueCreateWithoutRepositoryInput, issueUncheckedCreateWithoutRepositoryInput>
  }

  export type issueUpdateWithWhereUniqueWithoutRepositoryInput = {
    where: issueWhereUniqueInput
    data: XOR<issueUpdateWithoutRepositoryInput, issueUncheckedUpdateWithoutRepositoryInput>
  }

  export type issueUpdateManyWithWhereWithoutRepositoryInput = {
    where: issueScalarWhereInput
    data: XOR<issueUpdateManyMutationInput, issueUncheckedUpdateManyWithoutRepositoryInput>
  }

  export type pull_requestUpsertWithWhereUniqueWithoutRepositoryInput = {
    where: pull_requestWhereUniqueInput
    update: XOR<pull_requestUpdateWithoutRepositoryInput, pull_requestUncheckedUpdateWithoutRepositoryInput>
    create: XOR<pull_requestCreateWithoutRepositoryInput, pull_requestUncheckedCreateWithoutRepositoryInput>
  }

  export type pull_requestUpdateWithWhereUniqueWithoutRepositoryInput = {
    where: pull_requestWhereUniqueInput
    data: XOR<pull_requestUpdateWithoutRepositoryInput, pull_requestUncheckedUpdateWithoutRepositoryInput>
  }

  export type pull_requestUpdateManyWithWhereWithoutRepositoryInput = {
    where: pull_requestScalarWhereInput
    data: XOR<pull_requestUpdateManyMutationInput, pull_requestUncheckedUpdateManyWithoutRepositoryInput>
  }

  export type pull_requestUpsertWithWhereUniqueWithoutSource_repositoryInput = {
    where: pull_requestWhereUniqueInput
    update: XOR<pull_requestUpdateWithoutSource_repositoryInput, pull_requestUncheckedUpdateWithoutSource_repositoryInput>
    create: XOR<pull_requestCreateWithoutSource_repositoryInput, pull_requestUncheckedCreateWithoutSource_repositoryInput>
  }

  export type pull_requestUpdateWithWhereUniqueWithoutSource_repositoryInput = {
    where: pull_requestWhereUniqueInput
    data: XOR<pull_requestUpdateWithoutSource_repositoryInput, pull_requestUncheckedUpdateWithoutSource_repositoryInput>
  }

  export type pull_requestUpdateManyWithWhereWithoutSource_repositoryInput = {
    where: pull_requestScalarWhereInput
    data: XOR<pull_requestUpdateManyMutationInput, pull_requestUncheckedUpdateManyWithoutSource_repositoryInput>
  }

  export type pull_requestUpsertWithWhereUniqueWithoutTarget_repositoryInput = {
    where: pull_requestWhereUniqueInput
    update: XOR<pull_requestUpdateWithoutTarget_repositoryInput, pull_requestUncheckedUpdateWithoutTarget_repositoryInput>
    create: XOR<pull_requestCreateWithoutTarget_repositoryInput, pull_requestUncheckedCreateWithoutTarget_repositoryInput>
  }

  export type pull_requestUpdateWithWhereUniqueWithoutTarget_repositoryInput = {
    where: pull_requestWhereUniqueInput
    data: XOR<pull_requestUpdateWithoutTarget_repositoryInput, pull_requestUncheckedUpdateWithoutTarget_repositoryInput>
  }

  export type pull_requestUpdateManyWithWhereWithoutTarget_repositoryInput = {
    where: pull_requestScalarWhereInput
    data: XOR<pull_requestUpdateManyMutationInput, pull_requestUncheckedUpdateManyWithoutTarget_repositoryInput>
  }

  export type repositoryCreateWithoutAccessInput = {
    name: string
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
    owner: usersCreateNestedOneWithoutRepositoryInput
    parent?: repositoryCreateNestedOneWithoutForksInput
    forks?: repositoryCreateNestedManyWithoutParentInput
    issue?: issueCreateNestedManyWithoutRepositoryInput
    pull_request?: pull_requestCreateNestedManyWithoutRepositoryInput
    source_pull_requests?: pull_requestCreateNestedManyWithoutSource_repositoryInput
    target_pull_requests?: pull_requestCreateNestedManyWithoutTarget_repositoryInput
  }

  export type repositoryUncheckedCreateWithoutAccessInput = {
    id?: number
    name: string
    owner_user_id: number
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    parent_id?: number | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
    forks?: repositoryUncheckedCreateNestedManyWithoutParentInput
    issue?: issueUncheckedCreateNestedManyWithoutRepositoryInput
    pull_request?: pull_requestUncheckedCreateNestedManyWithoutRepositoryInput
    source_pull_requests?: pull_requestUncheckedCreateNestedManyWithoutSource_repositoryInput
    target_pull_requests?: pull_requestUncheckedCreateNestedManyWithoutTarget_repositoryInput
  }

  export type repositoryCreateOrConnectWithoutAccessInput = {
    where: repositoryWhereUniqueInput
    create: XOR<repositoryCreateWithoutAccessInput, repositoryUncheckedCreateWithoutAccessInput>
  }

  export type usersCreateWithoutRepository_accessInput = {
    username: string
    email: string
    password_hash: string
    bio?: string | null
    gitCliPassword?: string | null
    avatar_path?: string | null
    is_admin?: boolean | null
    confirmed?: boolean | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    contribution_count?: number | null
    suspended?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    repository?: repositoryCreateNestedManyWithoutOwnerInput
    issue?: issueCreateNestedManyWithoutAuthorInput
    pull_request?: pull_requestCreateNestedManyWithoutAuthorInput
    issue_comment?: issue_commentCreateNestedManyWithoutAuthorInput
    pull_request_comment?: pull_request_commentCreateNestedManyWithoutAuthorInput
  }

  export type usersUncheckedCreateWithoutRepository_accessInput = {
    id?: number
    username: string
    email: string
    password_hash: string
    bio?: string | null
    gitCliPassword?: string | null
    avatar_path?: string | null
    is_admin?: boolean | null
    confirmed?: boolean | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    contribution_count?: number | null
    suspended?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    repository?: repositoryUncheckedCreateNestedManyWithoutOwnerInput
    issue?: issueUncheckedCreateNestedManyWithoutAuthorInput
    pull_request?: pull_requestUncheckedCreateNestedManyWithoutAuthorInput
    issue_comment?: issue_commentUncheckedCreateNestedManyWithoutAuthorInput
    pull_request_comment?: pull_request_commentUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type usersCreateOrConnectWithoutRepository_accessInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutRepository_accessInput, usersUncheckedCreateWithoutRepository_accessInput>
  }

  export type repositoryUpsertWithoutAccessInput = {
    update: XOR<repositoryUpdateWithoutAccessInput, repositoryUncheckedUpdateWithoutAccessInput>
    create: XOR<repositoryCreateWithoutAccessInput, repositoryUncheckedCreateWithoutAccessInput>
    where?: repositoryWhereInput
  }

  export type repositoryUpdateToOneWithWhereWithoutAccessInput = {
    where?: repositoryWhereInput
    data: XOR<repositoryUpdateWithoutAccessInput, repositoryUncheckedUpdateWithoutAccessInput>
  }

  export type repositoryUpdateWithoutAccessInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
    owner?: usersUpdateOneRequiredWithoutRepositoryNestedInput
    parent?: repositoryUpdateOneWithoutForksNestedInput
    forks?: repositoryUpdateManyWithoutParentNestedInput
    issue?: issueUpdateManyWithoutRepositoryNestedInput
    pull_request?: pull_requestUpdateManyWithoutRepositoryNestedInput
    source_pull_requests?: pull_requestUpdateManyWithoutSource_repositoryNestedInput
    target_pull_requests?: pull_requestUpdateManyWithoutTarget_repositoryNestedInput
  }

  export type repositoryUncheckedUpdateWithoutAccessInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    owner_user_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    parent_id?: NullableIntFieldUpdateOperationsInput | number | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
    forks?: repositoryUncheckedUpdateManyWithoutParentNestedInput
    issue?: issueUncheckedUpdateManyWithoutRepositoryNestedInput
    pull_request?: pull_requestUncheckedUpdateManyWithoutRepositoryNestedInput
    source_pull_requests?: pull_requestUncheckedUpdateManyWithoutSource_repositoryNestedInput
    target_pull_requests?: pull_requestUncheckedUpdateManyWithoutTarget_repositoryNestedInput
  }

  export type usersUpsertWithoutRepository_accessInput = {
    update: XOR<usersUpdateWithoutRepository_accessInput, usersUncheckedUpdateWithoutRepository_accessInput>
    create: XOR<usersCreateWithoutRepository_accessInput, usersUncheckedCreateWithoutRepository_accessInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutRepository_accessInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutRepository_accessInput, usersUncheckedUpdateWithoutRepository_accessInput>
  }

  export type usersUpdateWithoutRepository_accessInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    gitCliPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_path?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    contribution_count?: NullableIntFieldUpdateOperationsInput | number | null
    suspended?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUpdateManyWithoutOwnerNestedInput
    issue?: issueUpdateManyWithoutAuthorNestedInput
    pull_request?: pull_requestUpdateManyWithoutAuthorNestedInput
    issue_comment?: issue_commentUpdateManyWithoutAuthorNestedInput
    pull_request_comment?: pull_request_commentUpdateManyWithoutAuthorNestedInput
  }

  export type usersUncheckedUpdateWithoutRepository_accessInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    gitCliPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_path?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    contribution_count?: NullableIntFieldUpdateOperationsInput | number | null
    suspended?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUncheckedUpdateManyWithoutOwnerNestedInput
    issue?: issueUncheckedUpdateManyWithoutAuthorNestedInput
    pull_request?: pull_requestUncheckedUpdateManyWithoutAuthorNestedInput
    issue_comment?: issue_commentUncheckedUpdateManyWithoutAuthorNestedInput
    pull_request_comment?: pull_request_commentUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type repositoryCreateWithoutIssueInput = {
    name: string
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
    owner: usersCreateNestedOneWithoutRepositoryInput
    parent?: repositoryCreateNestedOneWithoutForksInput
    forks?: repositoryCreateNestedManyWithoutParentInput
    access?: repository_accessCreateNestedManyWithoutRepositoryInput
    pull_request?: pull_requestCreateNestedManyWithoutRepositoryInput
    source_pull_requests?: pull_requestCreateNestedManyWithoutSource_repositoryInput
    target_pull_requests?: pull_requestCreateNestedManyWithoutTarget_repositoryInput
  }

  export type repositoryUncheckedCreateWithoutIssueInput = {
    id?: number
    name: string
    owner_user_id: number
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    parent_id?: number | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
    forks?: repositoryUncheckedCreateNestedManyWithoutParentInput
    access?: repository_accessUncheckedCreateNestedManyWithoutRepositoryInput
    pull_request?: pull_requestUncheckedCreateNestedManyWithoutRepositoryInput
    source_pull_requests?: pull_requestUncheckedCreateNestedManyWithoutSource_repositoryInput
    target_pull_requests?: pull_requestUncheckedCreateNestedManyWithoutTarget_repositoryInput
  }

  export type repositoryCreateOrConnectWithoutIssueInput = {
    where: repositoryWhereUniqueInput
    create: XOR<repositoryCreateWithoutIssueInput, repositoryUncheckedCreateWithoutIssueInput>
  }

  export type usersCreateWithoutIssueInput = {
    username: string
    email: string
    password_hash: string
    bio?: string | null
    gitCliPassword?: string | null
    avatar_path?: string | null
    is_admin?: boolean | null
    confirmed?: boolean | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    contribution_count?: number | null
    suspended?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    repository?: repositoryCreateNestedManyWithoutOwnerInput
    repository_access?: repository_accessCreateNestedManyWithoutUserInput
    pull_request?: pull_requestCreateNestedManyWithoutAuthorInput
    issue_comment?: issue_commentCreateNestedManyWithoutAuthorInput
    pull_request_comment?: pull_request_commentCreateNestedManyWithoutAuthorInput
  }

  export type usersUncheckedCreateWithoutIssueInput = {
    id?: number
    username: string
    email: string
    password_hash: string
    bio?: string | null
    gitCliPassword?: string | null
    avatar_path?: string | null
    is_admin?: boolean | null
    confirmed?: boolean | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    contribution_count?: number | null
    suspended?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    repository?: repositoryUncheckedCreateNestedManyWithoutOwnerInput
    repository_access?: repository_accessUncheckedCreateNestedManyWithoutUserInput
    pull_request?: pull_requestUncheckedCreateNestedManyWithoutAuthorInput
    issue_comment?: issue_commentUncheckedCreateNestedManyWithoutAuthorInput
    pull_request_comment?: pull_request_commentUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type usersCreateOrConnectWithoutIssueInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutIssueInput, usersUncheckedCreateWithoutIssueInput>
  }

  export type issue_commentCreateWithoutIssueInput = {
    content: string
    created_at?: Date | string
    updated_at?: Date | string
    author?: usersCreateNestedOneWithoutIssue_commentInput
  }

  export type issue_commentUncheckedCreateWithoutIssueInput = {
    id?: number
    author_id?: number | null
    content: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type issue_commentCreateOrConnectWithoutIssueInput = {
    where: issue_commentWhereUniqueInput
    create: XOR<issue_commentCreateWithoutIssueInput, issue_commentUncheckedCreateWithoutIssueInput>
  }

  export type issue_commentCreateManyIssueInputEnvelope = {
    data: issue_commentCreateManyIssueInput | issue_commentCreateManyIssueInput[]
    skipDuplicates?: boolean
  }

  export type repositoryUpsertWithoutIssueInput = {
    update: XOR<repositoryUpdateWithoutIssueInput, repositoryUncheckedUpdateWithoutIssueInput>
    create: XOR<repositoryCreateWithoutIssueInput, repositoryUncheckedCreateWithoutIssueInput>
    where?: repositoryWhereInput
  }

  export type repositoryUpdateToOneWithWhereWithoutIssueInput = {
    where?: repositoryWhereInput
    data: XOR<repositoryUpdateWithoutIssueInput, repositoryUncheckedUpdateWithoutIssueInput>
  }

  export type repositoryUpdateWithoutIssueInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
    owner?: usersUpdateOneRequiredWithoutRepositoryNestedInput
    parent?: repositoryUpdateOneWithoutForksNestedInput
    forks?: repositoryUpdateManyWithoutParentNestedInput
    access?: repository_accessUpdateManyWithoutRepositoryNestedInput
    pull_request?: pull_requestUpdateManyWithoutRepositoryNestedInput
    source_pull_requests?: pull_requestUpdateManyWithoutSource_repositoryNestedInput
    target_pull_requests?: pull_requestUpdateManyWithoutTarget_repositoryNestedInput
  }

  export type repositoryUncheckedUpdateWithoutIssueInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    owner_user_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    parent_id?: NullableIntFieldUpdateOperationsInput | number | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
    forks?: repositoryUncheckedUpdateManyWithoutParentNestedInput
    access?: repository_accessUncheckedUpdateManyWithoutRepositoryNestedInput
    pull_request?: pull_requestUncheckedUpdateManyWithoutRepositoryNestedInput
    source_pull_requests?: pull_requestUncheckedUpdateManyWithoutSource_repositoryNestedInput
    target_pull_requests?: pull_requestUncheckedUpdateManyWithoutTarget_repositoryNestedInput
  }

  export type usersUpsertWithoutIssueInput = {
    update: XOR<usersUpdateWithoutIssueInput, usersUncheckedUpdateWithoutIssueInput>
    create: XOR<usersCreateWithoutIssueInput, usersUncheckedCreateWithoutIssueInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutIssueInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutIssueInput, usersUncheckedUpdateWithoutIssueInput>
  }

  export type usersUpdateWithoutIssueInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    gitCliPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_path?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    contribution_count?: NullableIntFieldUpdateOperationsInput | number | null
    suspended?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUpdateManyWithoutOwnerNestedInput
    repository_access?: repository_accessUpdateManyWithoutUserNestedInput
    pull_request?: pull_requestUpdateManyWithoutAuthorNestedInput
    issue_comment?: issue_commentUpdateManyWithoutAuthorNestedInput
    pull_request_comment?: pull_request_commentUpdateManyWithoutAuthorNestedInput
  }

  export type usersUncheckedUpdateWithoutIssueInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    gitCliPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_path?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    contribution_count?: NullableIntFieldUpdateOperationsInput | number | null
    suspended?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUncheckedUpdateManyWithoutOwnerNestedInput
    repository_access?: repository_accessUncheckedUpdateManyWithoutUserNestedInput
    pull_request?: pull_requestUncheckedUpdateManyWithoutAuthorNestedInput
    issue_comment?: issue_commentUncheckedUpdateManyWithoutAuthorNestedInput
    pull_request_comment?: pull_request_commentUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type issue_commentUpsertWithWhereUniqueWithoutIssueInput = {
    where: issue_commentWhereUniqueInput
    update: XOR<issue_commentUpdateWithoutIssueInput, issue_commentUncheckedUpdateWithoutIssueInput>
    create: XOR<issue_commentCreateWithoutIssueInput, issue_commentUncheckedCreateWithoutIssueInput>
  }

  export type issue_commentUpdateWithWhereUniqueWithoutIssueInput = {
    where: issue_commentWhereUniqueInput
    data: XOR<issue_commentUpdateWithoutIssueInput, issue_commentUncheckedUpdateWithoutIssueInput>
  }

  export type issue_commentUpdateManyWithWhereWithoutIssueInput = {
    where: issue_commentScalarWhereInput
    data: XOR<issue_commentUpdateManyMutationInput, issue_commentUncheckedUpdateManyWithoutIssueInput>
  }

  export type repositoryCreateWithoutPull_requestInput = {
    name: string
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
    owner: usersCreateNestedOneWithoutRepositoryInput
    parent?: repositoryCreateNestedOneWithoutForksInput
    forks?: repositoryCreateNestedManyWithoutParentInput
    access?: repository_accessCreateNestedManyWithoutRepositoryInput
    issue?: issueCreateNestedManyWithoutRepositoryInput
    source_pull_requests?: pull_requestCreateNestedManyWithoutSource_repositoryInput
    target_pull_requests?: pull_requestCreateNestedManyWithoutTarget_repositoryInput
  }

  export type repositoryUncheckedCreateWithoutPull_requestInput = {
    id?: number
    name: string
    owner_user_id: number
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    parent_id?: number | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
    forks?: repositoryUncheckedCreateNestedManyWithoutParentInput
    access?: repository_accessUncheckedCreateNestedManyWithoutRepositoryInput
    issue?: issueUncheckedCreateNestedManyWithoutRepositoryInput
    source_pull_requests?: pull_requestUncheckedCreateNestedManyWithoutSource_repositoryInput
    target_pull_requests?: pull_requestUncheckedCreateNestedManyWithoutTarget_repositoryInput
  }

  export type repositoryCreateOrConnectWithoutPull_requestInput = {
    where: repositoryWhereUniqueInput
    create: XOR<repositoryCreateWithoutPull_requestInput, repositoryUncheckedCreateWithoutPull_requestInput>
  }

  export type usersCreateWithoutPull_requestInput = {
    username: string
    email: string
    password_hash: string
    bio?: string | null
    gitCliPassword?: string | null
    avatar_path?: string | null
    is_admin?: boolean | null
    confirmed?: boolean | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    contribution_count?: number | null
    suspended?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    repository?: repositoryCreateNestedManyWithoutOwnerInput
    repository_access?: repository_accessCreateNestedManyWithoutUserInput
    issue?: issueCreateNestedManyWithoutAuthorInput
    issue_comment?: issue_commentCreateNestedManyWithoutAuthorInput
    pull_request_comment?: pull_request_commentCreateNestedManyWithoutAuthorInput
  }

  export type usersUncheckedCreateWithoutPull_requestInput = {
    id?: number
    username: string
    email: string
    password_hash: string
    bio?: string | null
    gitCliPassword?: string | null
    avatar_path?: string | null
    is_admin?: boolean | null
    confirmed?: boolean | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    contribution_count?: number | null
    suspended?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    repository?: repositoryUncheckedCreateNestedManyWithoutOwnerInput
    repository_access?: repository_accessUncheckedCreateNestedManyWithoutUserInput
    issue?: issueUncheckedCreateNestedManyWithoutAuthorInput
    issue_comment?: issue_commentUncheckedCreateNestedManyWithoutAuthorInput
    pull_request_comment?: pull_request_commentUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type usersCreateOrConnectWithoutPull_requestInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutPull_requestInput, usersUncheckedCreateWithoutPull_requestInput>
  }

  export type repositoryCreateWithoutSource_pull_requestsInput = {
    name: string
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
    owner: usersCreateNestedOneWithoutRepositoryInput
    parent?: repositoryCreateNestedOneWithoutForksInput
    forks?: repositoryCreateNestedManyWithoutParentInput
    access?: repository_accessCreateNestedManyWithoutRepositoryInput
    issue?: issueCreateNestedManyWithoutRepositoryInput
    pull_request?: pull_requestCreateNestedManyWithoutRepositoryInput
    target_pull_requests?: pull_requestCreateNestedManyWithoutTarget_repositoryInput
  }

  export type repositoryUncheckedCreateWithoutSource_pull_requestsInput = {
    id?: number
    name: string
    owner_user_id: number
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    parent_id?: number | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
    forks?: repositoryUncheckedCreateNestedManyWithoutParentInput
    access?: repository_accessUncheckedCreateNestedManyWithoutRepositoryInput
    issue?: issueUncheckedCreateNestedManyWithoutRepositoryInput
    pull_request?: pull_requestUncheckedCreateNestedManyWithoutRepositoryInput
    target_pull_requests?: pull_requestUncheckedCreateNestedManyWithoutTarget_repositoryInput
  }

  export type repositoryCreateOrConnectWithoutSource_pull_requestsInput = {
    where: repositoryWhereUniqueInput
    create: XOR<repositoryCreateWithoutSource_pull_requestsInput, repositoryUncheckedCreateWithoutSource_pull_requestsInput>
  }

  export type repositoryCreateWithoutTarget_pull_requestsInput = {
    name: string
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
    owner: usersCreateNestedOneWithoutRepositoryInput
    parent?: repositoryCreateNestedOneWithoutForksInput
    forks?: repositoryCreateNestedManyWithoutParentInput
    access?: repository_accessCreateNestedManyWithoutRepositoryInput
    issue?: issueCreateNestedManyWithoutRepositoryInput
    pull_request?: pull_requestCreateNestedManyWithoutRepositoryInput
    source_pull_requests?: pull_requestCreateNestedManyWithoutSource_repositoryInput
  }

  export type repositoryUncheckedCreateWithoutTarget_pull_requestsInput = {
    id?: number
    name: string
    owner_user_id: number
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    parent_id?: number | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
    forks?: repositoryUncheckedCreateNestedManyWithoutParentInput
    access?: repository_accessUncheckedCreateNestedManyWithoutRepositoryInput
    issue?: issueUncheckedCreateNestedManyWithoutRepositoryInput
    pull_request?: pull_requestUncheckedCreateNestedManyWithoutRepositoryInput
    source_pull_requests?: pull_requestUncheckedCreateNestedManyWithoutSource_repositoryInput
  }

  export type repositoryCreateOrConnectWithoutTarget_pull_requestsInput = {
    where: repositoryWhereUniqueInput
    create: XOR<repositoryCreateWithoutTarget_pull_requestsInput, repositoryUncheckedCreateWithoutTarget_pull_requestsInput>
  }

  export type pull_request_commentCreateWithoutPull_requestInput = {
    content: string
    created_at?: Date | string
    updated_at?: Date | string
    author?: usersCreateNestedOneWithoutPull_request_commentInput
  }

  export type pull_request_commentUncheckedCreateWithoutPull_requestInput = {
    id?: number
    author_id?: number | null
    content: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type pull_request_commentCreateOrConnectWithoutPull_requestInput = {
    where: pull_request_commentWhereUniqueInput
    create: XOR<pull_request_commentCreateWithoutPull_requestInput, pull_request_commentUncheckedCreateWithoutPull_requestInput>
  }

  export type pull_request_commentCreateManyPull_requestInputEnvelope = {
    data: pull_request_commentCreateManyPull_requestInput | pull_request_commentCreateManyPull_requestInput[]
    skipDuplicates?: boolean
  }

  export type repositoryUpsertWithoutPull_requestInput = {
    update: XOR<repositoryUpdateWithoutPull_requestInput, repositoryUncheckedUpdateWithoutPull_requestInput>
    create: XOR<repositoryCreateWithoutPull_requestInput, repositoryUncheckedCreateWithoutPull_requestInput>
    where?: repositoryWhereInput
  }

  export type repositoryUpdateToOneWithWhereWithoutPull_requestInput = {
    where?: repositoryWhereInput
    data: XOR<repositoryUpdateWithoutPull_requestInput, repositoryUncheckedUpdateWithoutPull_requestInput>
  }

  export type repositoryUpdateWithoutPull_requestInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
    owner?: usersUpdateOneRequiredWithoutRepositoryNestedInput
    parent?: repositoryUpdateOneWithoutForksNestedInput
    forks?: repositoryUpdateManyWithoutParentNestedInput
    access?: repository_accessUpdateManyWithoutRepositoryNestedInput
    issue?: issueUpdateManyWithoutRepositoryNestedInput
    source_pull_requests?: pull_requestUpdateManyWithoutSource_repositoryNestedInput
    target_pull_requests?: pull_requestUpdateManyWithoutTarget_repositoryNestedInput
  }

  export type repositoryUncheckedUpdateWithoutPull_requestInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    owner_user_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    parent_id?: NullableIntFieldUpdateOperationsInput | number | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
    forks?: repositoryUncheckedUpdateManyWithoutParentNestedInput
    access?: repository_accessUncheckedUpdateManyWithoutRepositoryNestedInput
    issue?: issueUncheckedUpdateManyWithoutRepositoryNestedInput
    source_pull_requests?: pull_requestUncheckedUpdateManyWithoutSource_repositoryNestedInput
    target_pull_requests?: pull_requestUncheckedUpdateManyWithoutTarget_repositoryNestedInput
  }

  export type usersUpsertWithoutPull_requestInput = {
    update: XOR<usersUpdateWithoutPull_requestInput, usersUncheckedUpdateWithoutPull_requestInput>
    create: XOR<usersCreateWithoutPull_requestInput, usersUncheckedCreateWithoutPull_requestInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutPull_requestInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutPull_requestInput, usersUncheckedUpdateWithoutPull_requestInput>
  }

  export type usersUpdateWithoutPull_requestInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    gitCliPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_path?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    contribution_count?: NullableIntFieldUpdateOperationsInput | number | null
    suspended?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUpdateManyWithoutOwnerNestedInput
    repository_access?: repository_accessUpdateManyWithoutUserNestedInput
    issue?: issueUpdateManyWithoutAuthorNestedInput
    issue_comment?: issue_commentUpdateManyWithoutAuthorNestedInput
    pull_request_comment?: pull_request_commentUpdateManyWithoutAuthorNestedInput
  }

  export type usersUncheckedUpdateWithoutPull_requestInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    gitCliPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_path?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    contribution_count?: NullableIntFieldUpdateOperationsInput | number | null
    suspended?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUncheckedUpdateManyWithoutOwnerNestedInput
    repository_access?: repository_accessUncheckedUpdateManyWithoutUserNestedInput
    issue?: issueUncheckedUpdateManyWithoutAuthorNestedInput
    issue_comment?: issue_commentUncheckedUpdateManyWithoutAuthorNestedInput
    pull_request_comment?: pull_request_commentUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type repositoryUpsertWithoutSource_pull_requestsInput = {
    update: XOR<repositoryUpdateWithoutSource_pull_requestsInput, repositoryUncheckedUpdateWithoutSource_pull_requestsInput>
    create: XOR<repositoryCreateWithoutSource_pull_requestsInput, repositoryUncheckedCreateWithoutSource_pull_requestsInput>
    where?: repositoryWhereInput
  }

  export type repositoryUpdateToOneWithWhereWithoutSource_pull_requestsInput = {
    where?: repositoryWhereInput
    data: XOR<repositoryUpdateWithoutSource_pull_requestsInput, repositoryUncheckedUpdateWithoutSource_pull_requestsInput>
  }

  export type repositoryUpdateWithoutSource_pull_requestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
    owner?: usersUpdateOneRequiredWithoutRepositoryNestedInput
    parent?: repositoryUpdateOneWithoutForksNestedInput
    forks?: repositoryUpdateManyWithoutParentNestedInput
    access?: repository_accessUpdateManyWithoutRepositoryNestedInput
    issue?: issueUpdateManyWithoutRepositoryNestedInput
    pull_request?: pull_requestUpdateManyWithoutRepositoryNestedInput
    target_pull_requests?: pull_requestUpdateManyWithoutTarget_repositoryNestedInput
  }

  export type repositoryUncheckedUpdateWithoutSource_pull_requestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    owner_user_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    parent_id?: NullableIntFieldUpdateOperationsInput | number | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
    forks?: repositoryUncheckedUpdateManyWithoutParentNestedInput
    access?: repository_accessUncheckedUpdateManyWithoutRepositoryNestedInput
    issue?: issueUncheckedUpdateManyWithoutRepositoryNestedInput
    pull_request?: pull_requestUncheckedUpdateManyWithoutRepositoryNestedInput
    target_pull_requests?: pull_requestUncheckedUpdateManyWithoutTarget_repositoryNestedInput
  }

  export type repositoryUpsertWithoutTarget_pull_requestsInput = {
    update: XOR<repositoryUpdateWithoutTarget_pull_requestsInput, repositoryUncheckedUpdateWithoutTarget_pull_requestsInput>
    create: XOR<repositoryCreateWithoutTarget_pull_requestsInput, repositoryUncheckedCreateWithoutTarget_pull_requestsInput>
    where?: repositoryWhereInput
  }

  export type repositoryUpdateToOneWithWhereWithoutTarget_pull_requestsInput = {
    where?: repositoryWhereInput
    data: XOR<repositoryUpdateWithoutTarget_pull_requestsInput, repositoryUncheckedUpdateWithoutTarget_pull_requestsInput>
  }

  export type repositoryUpdateWithoutTarget_pull_requestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
    owner?: usersUpdateOneRequiredWithoutRepositoryNestedInput
    parent?: repositoryUpdateOneWithoutForksNestedInput
    forks?: repositoryUpdateManyWithoutParentNestedInput
    access?: repository_accessUpdateManyWithoutRepositoryNestedInput
    issue?: issueUpdateManyWithoutRepositoryNestedInput
    pull_request?: pull_requestUpdateManyWithoutRepositoryNestedInput
    source_pull_requests?: pull_requestUpdateManyWithoutSource_repositoryNestedInput
  }

  export type repositoryUncheckedUpdateWithoutTarget_pull_requestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    owner_user_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    parent_id?: NullableIntFieldUpdateOperationsInput | number | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
    forks?: repositoryUncheckedUpdateManyWithoutParentNestedInput
    access?: repository_accessUncheckedUpdateManyWithoutRepositoryNestedInput
    issue?: issueUncheckedUpdateManyWithoutRepositoryNestedInput
    pull_request?: pull_requestUncheckedUpdateManyWithoutRepositoryNestedInput
    source_pull_requests?: pull_requestUncheckedUpdateManyWithoutSource_repositoryNestedInput
  }

  export type pull_request_commentUpsertWithWhereUniqueWithoutPull_requestInput = {
    where: pull_request_commentWhereUniqueInput
    update: XOR<pull_request_commentUpdateWithoutPull_requestInput, pull_request_commentUncheckedUpdateWithoutPull_requestInput>
    create: XOR<pull_request_commentCreateWithoutPull_requestInput, pull_request_commentUncheckedCreateWithoutPull_requestInput>
  }

  export type pull_request_commentUpdateWithWhereUniqueWithoutPull_requestInput = {
    where: pull_request_commentWhereUniqueInput
    data: XOR<pull_request_commentUpdateWithoutPull_requestInput, pull_request_commentUncheckedUpdateWithoutPull_requestInput>
  }

  export type pull_request_commentUpdateManyWithWhereWithoutPull_requestInput = {
    where: pull_request_commentScalarWhereInput
    data: XOR<pull_request_commentUpdateManyMutationInput, pull_request_commentUncheckedUpdateManyWithoutPull_requestInput>
  }

  export type issueCreateWithoutIssue_commentInput = {
    title: string
    description?: string | null
    status: string
    created_at?: Date | string
    updated_at?: Date | string
    repository: repositoryCreateNestedOneWithoutIssueInput
    author?: usersCreateNestedOneWithoutIssueInput
  }

  export type issueUncheckedCreateWithoutIssue_commentInput = {
    id?: number
    repository_id: number
    author_id?: number | null
    title: string
    description?: string | null
    status: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type issueCreateOrConnectWithoutIssue_commentInput = {
    where: issueWhereUniqueInput
    create: XOR<issueCreateWithoutIssue_commentInput, issueUncheckedCreateWithoutIssue_commentInput>
  }

  export type usersCreateWithoutIssue_commentInput = {
    username: string
    email: string
    password_hash: string
    bio?: string | null
    gitCliPassword?: string | null
    avatar_path?: string | null
    is_admin?: boolean | null
    confirmed?: boolean | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    contribution_count?: number | null
    suspended?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    repository?: repositoryCreateNestedManyWithoutOwnerInput
    repository_access?: repository_accessCreateNestedManyWithoutUserInput
    issue?: issueCreateNestedManyWithoutAuthorInput
    pull_request?: pull_requestCreateNestedManyWithoutAuthorInput
    pull_request_comment?: pull_request_commentCreateNestedManyWithoutAuthorInput
  }

  export type usersUncheckedCreateWithoutIssue_commentInput = {
    id?: number
    username: string
    email: string
    password_hash: string
    bio?: string | null
    gitCliPassword?: string | null
    avatar_path?: string | null
    is_admin?: boolean | null
    confirmed?: boolean | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    contribution_count?: number | null
    suspended?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    repository?: repositoryUncheckedCreateNestedManyWithoutOwnerInput
    repository_access?: repository_accessUncheckedCreateNestedManyWithoutUserInput
    issue?: issueUncheckedCreateNestedManyWithoutAuthorInput
    pull_request?: pull_requestUncheckedCreateNestedManyWithoutAuthorInput
    pull_request_comment?: pull_request_commentUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type usersCreateOrConnectWithoutIssue_commentInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutIssue_commentInput, usersUncheckedCreateWithoutIssue_commentInput>
  }

  export type issueUpsertWithoutIssue_commentInput = {
    update: XOR<issueUpdateWithoutIssue_commentInput, issueUncheckedUpdateWithoutIssue_commentInput>
    create: XOR<issueCreateWithoutIssue_commentInput, issueUncheckedCreateWithoutIssue_commentInput>
    where?: issueWhereInput
  }

  export type issueUpdateToOneWithWhereWithoutIssue_commentInput = {
    where?: issueWhereInput
    data: XOR<issueUpdateWithoutIssue_commentInput, issueUncheckedUpdateWithoutIssue_commentInput>
  }

  export type issueUpdateWithoutIssue_commentInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUpdateOneRequiredWithoutIssueNestedInput
    author?: usersUpdateOneWithoutIssueNestedInput
  }

  export type issueUncheckedUpdateWithoutIssue_commentInput = {
    id?: IntFieldUpdateOperationsInput | number
    repository_id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUpsertWithoutIssue_commentInput = {
    update: XOR<usersUpdateWithoutIssue_commentInput, usersUncheckedUpdateWithoutIssue_commentInput>
    create: XOR<usersCreateWithoutIssue_commentInput, usersUncheckedCreateWithoutIssue_commentInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutIssue_commentInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutIssue_commentInput, usersUncheckedUpdateWithoutIssue_commentInput>
  }

  export type usersUpdateWithoutIssue_commentInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    gitCliPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_path?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    contribution_count?: NullableIntFieldUpdateOperationsInput | number | null
    suspended?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUpdateManyWithoutOwnerNestedInput
    repository_access?: repository_accessUpdateManyWithoutUserNestedInput
    issue?: issueUpdateManyWithoutAuthorNestedInput
    pull_request?: pull_requestUpdateManyWithoutAuthorNestedInput
    pull_request_comment?: pull_request_commentUpdateManyWithoutAuthorNestedInput
  }

  export type usersUncheckedUpdateWithoutIssue_commentInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    gitCliPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_path?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    contribution_count?: NullableIntFieldUpdateOperationsInput | number | null
    suspended?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUncheckedUpdateManyWithoutOwnerNestedInput
    repository_access?: repository_accessUncheckedUpdateManyWithoutUserNestedInput
    issue?: issueUncheckedUpdateManyWithoutAuthorNestedInput
    pull_request?: pull_requestUncheckedUpdateManyWithoutAuthorNestedInput
    pull_request_comment?: pull_request_commentUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type pull_requestCreateWithoutPull_request_commentInput = {
    source_branch: string
    target_branch: string
    status?: $Enums.PullRequestStatus
    merged_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    repository: repositoryCreateNestedOneWithoutPull_requestInput
    author?: usersCreateNestedOneWithoutPull_requestInput
    source_repository: repositoryCreateNestedOneWithoutSource_pull_requestsInput
    target_repository: repositoryCreateNestedOneWithoutTarget_pull_requestsInput
  }

  export type pull_requestUncheckedCreateWithoutPull_request_commentInput = {
    id?: number
    repository_id: number
    author_id?: number | null
    source_branch: string
    target_branch: string
    status?: $Enums.PullRequestStatus
    source_repository_id: number
    target_repository_id: number
    merged_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type pull_requestCreateOrConnectWithoutPull_request_commentInput = {
    where: pull_requestWhereUniqueInput
    create: XOR<pull_requestCreateWithoutPull_request_commentInput, pull_requestUncheckedCreateWithoutPull_request_commentInput>
  }

  export type usersCreateWithoutPull_request_commentInput = {
    username: string
    email: string
    password_hash: string
    bio?: string | null
    gitCliPassword?: string | null
    avatar_path?: string | null
    is_admin?: boolean | null
    confirmed?: boolean | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    contribution_count?: number | null
    suspended?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    repository?: repositoryCreateNestedManyWithoutOwnerInput
    repository_access?: repository_accessCreateNestedManyWithoutUserInput
    issue?: issueCreateNestedManyWithoutAuthorInput
    pull_request?: pull_requestCreateNestedManyWithoutAuthorInput
    issue_comment?: issue_commentCreateNestedManyWithoutAuthorInput
  }

  export type usersUncheckedCreateWithoutPull_request_commentInput = {
    id?: number
    username: string
    email: string
    password_hash: string
    bio?: string | null
    gitCliPassword?: string | null
    avatar_path?: string | null
    is_admin?: boolean | null
    confirmed?: boolean | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    contribution_count?: number | null
    suspended?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    repository?: repositoryUncheckedCreateNestedManyWithoutOwnerInput
    repository_access?: repository_accessUncheckedCreateNestedManyWithoutUserInput
    issue?: issueUncheckedCreateNestedManyWithoutAuthorInput
    pull_request?: pull_requestUncheckedCreateNestedManyWithoutAuthorInput
    issue_comment?: issue_commentUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type usersCreateOrConnectWithoutPull_request_commentInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutPull_request_commentInput, usersUncheckedCreateWithoutPull_request_commentInput>
  }

  export type pull_requestUpsertWithoutPull_request_commentInput = {
    update: XOR<pull_requestUpdateWithoutPull_request_commentInput, pull_requestUncheckedUpdateWithoutPull_request_commentInput>
    create: XOR<pull_requestCreateWithoutPull_request_commentInput, pull_requestUncheckedCreateWithoutPull_request_commentInput>
    where?: pull_requestWhereInput
  }

  export type pull_requestUpdateToOneWithWhereWithoutPull_request_commentInput = {
    where?: pull_requestWhereInput
    data: XOR<pull_requestUpdateWithoutPull_request_commentInput, pull_requestUncheckedUpdateWithoutPull_request_commentInput>
  }

  export type pull_requestUpdateWithoutPull_request_commentInput = {
    source_branch?: StringFieldUpdateOperationsInput | string
    target_branch?: StringFieldUpdateOperationsInput | string
    status?: EnumPullRequestStatusFieldUpdateOperationsInput | $Enums.PullRequestStatus
    merged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUpdateOneRequiredWithoutPull_requestNestedInput
    author?: usersUpdateOneWithoutPull_requestNestedInput
    source_repository?: repositoryUpdateOneRequiredWithoutSource_pull_requestsNestedInput
    target_repository?: repositoryUpdateOneRequiredWithoutTarget_pull_requestsNestedInput
  }

  export type pull_requestUncheckedUpdateWithoutPull_request_commentInput = {
    id?: IntFieldUpdateOperationsInput | number
    repository_id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    source_branch?: StringFieldUpdateOperationsInput | string
    target_branch?: StringFieldUpdateOperationsInput | string
    status?: EnumPullRequestStatusFieldUpdateOperationsInput | $Enums.PullRequestStatus
    source_repository_id?: IntFieldUpdateOperationsInput | number
    target_repository_id?: IntFieldUpdateOperationsInput | number
    merged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUpsertWithoutPull_request_commentInput = {
    update: XOR<usersUpdateWithoutPull_request_commentInput, usersUncheckedUpdateWithoutPull_request_commentInput>
    create: XOR<usersCreateWithoutPull_request_commentInput, usersUncheckedCreateWithoutPull_request_commentInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutPull_request_commentInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutPull_request_commentInput, usersUncheckedUpdateWithoutPull_request_commentInput>
  }

  export type usersUpdateWithoutPull_request_commentInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    gitCliPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_path?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    contribution_count?: NullableIntFieldUpdateOperationsInput | number | null
    suspended?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUpdateManyWithoutOwnerNestedInput
    repository_access?: repository_accessUpdateManyWithoutUserNestedInput
    issue?: issueUpdateManyWithoutAuthorNestedInput
    pull_request?: pull_requestUpdateManyWithoutAuthorNestedInput
    issue_comment?: issue_commentUpdateManyWithoutAuthorNestedInput
  }

  export type usersUncheckedUpdateWithoutPull_request_commentInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    gitCliPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_path?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    contribution_count?: NullableIntFieldUpdateOperationsInput | number | null
    suspended?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUncheckedUpdateManyWithoutOwnerNestedInput
    repository_access?: repository_accessUncheckedUpdateManyWithoutUserNestedInput
    issue?: issueUncheckedUpdateManyWithoutAuthorNestedInput
    pull_request?: pull_requestUncheckedUpdateManyWithoutAuthorNestedInput
    issue_comment?: issue_commentUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type repositoryCreateManyOwnerInput = {
    id?: number
    name: string
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    parent_id?: number | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
  }

  export type repository_accessCreateManyUserInput = {
    id?: number
    repository_id: number
    access_level: $Enums.RepositoryAccess
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type issueCreateManyAuthorInput = {
    id?: number
    repository_id: number
    title: string
    description?: string | null
    status: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type pull_requestCreateManyAuthorInput = {
    id?: number
    repository_id: number
    source_branch: string
    target_branch: string
    status?: $Enums.PullRequestStatus
    source_repository_id: number
    target_repository_id: number
    merged_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type issue_commentCreateManyAuthorInput = {
    id?: number
    issue_id: number
    content: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type pull_request_commentCreateManyAuthorInput = {
    id?: number
    pull_request_id: number
    content: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type repositoryUpdateWithoutOwnerInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
    parent?: repositoryUpdateOneWithoutForksNestedInput
    forks?: repositoryUpdateManyWithoutParentNestedInput
    access?: repository_accessUpdateManyWithoutRepositoryNestedInput
    issue?: issueUpdateManyWithoutRepositoryNestedInput
    pull_request?: pull_requestUpdateManyWithoutRepositoryNestedInput
    source_pull_requests?: pull_requestUpdateManyWithoutSource_repositoryNestedInput
    target_pull_requests?: pull_requestUpdateManyWithoutTarget_repositoryNestedInput
  }

  export type repositoryUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    parent_id?: NullableIntFieldUpdateOperationsInput | number | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
    forks?: repositoryUncheckedUpdateManyWithoutParentNestedInput
    access?: repository_accessUncheckedUpdateManyWithoutRepositoryNestedInput
    issue?: issueUncheckedUpdateManyWithoutRepositoryNestedInput
    pull_request?: pull_requestUncheckedUpdateManyWithoutRepositoryNestedInput
    source_pull_requests?: pull_requestUncheckedUpdateManyWithoutSource_repositoryNestedInput
    target_pull_requests?: pull_requestUncheckedUpdateManyWithoutTarget_repositoryNestedInput
  }

  export type repositoryUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    parent_id?: NullableIntFieldUpdateOperationsInput | number | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type repository_accessUpdateWithoutUserInput = {
    access_level?: EnumRepositoryAccessFieldUpdateOperationsInput | $Enums.RepositoryAccess
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUpdateOneRequiredWithoutAccessNestedInput
  }

  export type repository_accessUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    repository_id?: IntFieldUpdateOperationsInput | number
    access_level?: EnumRepositoryAccessFieldUpdateOperationsInput | $Enums.RepositoryAccess
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type repository_accessUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    repository_id?: IntFieldUpdateOperationsInput | number
    access_level?: EnumRepositoryAccessFieldUpdateOperationsInput | $Enums.RepositoryAccess
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type issueUpdateWithoutAuthorInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUpdateOneRequiredWithoutIssueNestedInput
    issue_comment?: issue_commentUpdateManyWithoutIssueNestedInput
  }

  export type issueUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    repository_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    issue_comment?: issue_commentUncheckedUpdateManyWithoutIssueNestedInput
  }

  export type issueUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    repository_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type pull_requestUpdateWithoutAuthorInput = {
    source_branch?: StringFieldUpdateOperationsInput | string
    target_branch?: StringFieldUpdateOperationsInput | string
    status?: EnumPullRequestStatusFieldUpdateOperationsInput | $Enums.PullRequestStatus
    merged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUpdateOneRequiredWithoutPull_requestNestedInput
    source_repository?: repositoryUpdateOneRequiredWithoutSource_pull_requestsNestedInput
    target_repository?: repositoryUpdateOneRequiredWithoutTarget_pull_requestsNestedInput
    pull_request_comment?: pull_request_commentUpdateManyWithoutPull_requestNestedInput
  }

  export type pull_requestUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    repository_id?: IntFieldUpdateOperationsInput | number
    source_branch?: StringFieldUpdateOperationsInput | string
    target_branch?: StringFieldUpdateOperationsInput | string
    status?: EnumPullRequestStatusFieldUpdateOperationsInput | $Enums.PullRequestStatus
    source_repository_id?: IntFieldUpdateOperationsInput | number
    target_repository_id?: IntFieldUpdateOperationsInput | number
    merged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    pull_request_comment?: pull_request_commentUncheckedUpdateManyWithoutPull_requestNestedInput
  }

  export type pull_requestUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    repository_id?: IntFieldUpdateOperationsInput | number
    source_branch?: StringFieldUpdateOperationsInput | string
    target_branch?: StringFieldUpdateOperationsInput | string
    status?: EnumPullRequestStatusFieldUpdateOperationsInput | $Enums.PullRequestStatus
    source_repository_id?: IntFieldUpdateOperationsInput | number
    target_repository_id?: IntFieldUpdateOperationsInput | number
    merged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type issue_commentUpdateWithoutAuthorInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    issue?: issueUpdateOneRequiredWithoutIssue_commentNestedInput
  }

  export type issue_commentUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    issue_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type issue_commentUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    issue_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type pull_request_commentUpdateWithoutAuthorInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    pull_request?: pull_requestUpdateOneRequiredWithoutPull_request_commentNestedInput
  }

  export type pull_request_commentUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    pull_request_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type pull_request_commentUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    pull_request_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type repositoryCreateManyParentInput = {
    id?: number
    name: string
    owner_user_id: number
    description?: string | null
    is_private?: boolean | null
    repoPath?: string | null
    forked_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    archived?: boolean
    forks_count?: number | null
    pull_requests_count?: number | null
  }

  export type repository_accessCreateManyRepositoryInput = {
    id?: number
    user_id: number
    access_level: $Enums.RepositoryAccess
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type issueCreateManyRepositoryInput = {
    id?: number
    author_id?: number | null
    title: string
    description?: string | null
    status: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type pull_requestCreateManyRepositoryInput = {
    id?: number
    author_id?: number | null
    source_branch: string
    target_branch: string
    status?: $Enums.PullRequestStatus
    source_repository_id: number
    target_repository_id: number
    merged_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type pull_requestCreateManySource_repositoryInput = {
    id?: number
    repository_id: number
    author_id?: number | null
    source_branch: string
    target_branch: string
    status?: $Enums.PullRequestStatus
    target_repository_id: number
    merged_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type pull_requestCreateManyTarget_repositoryInput = {
    id?: number
    repository_id: number
    author_id?: number | null
    source_branch: string
    target_branch: string
    status?: $Enums.PullRequestStatus
    source_repository_id: number
    merged_at?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type repositoryUpdateWithoutParentInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
    owner?: usersUpdateOneRequiredWithoutRepositoryNestedInput
    forks?: repositoryUpdateManyWithoutParentNestedInput
    access?: repository_accessUpdateManyWithoutRepositoryNestedInput
    issue?: issueUpdateManyWithoutRepositoryNestedInput
    pull_request?: pull_requestUpdateManyWithoutRepositoryNestedInput
    source_pull_requests?: pull_requestUpdateManyWithoutSource_repositoryNestedInput
    target_pull_requests?: pull_requestUpdateManyWithoutTarget_repositoryNestedInput
  }

  export type repositoryUncheckedUpdateWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    owner_user_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
    forks?: repositoryUncheckedUpdateManyWithoutParentNestedInput
    access?: repository_accessUncheckedUpdateManyWithoutRepositoryNestedInput
    issue?: issueUncheckedUpdateManyWithoutRepositoryNestedInput
    pull_request?: pull_requestUncheckedUpdateManyWithoutRepositoryNestedInput
    source_pull_requests?: pull_requestUncheckedUpdateManyWithoutSource_repositoryNestedInput
    target_pull_requests?: pull_requestUncheckedUpdateManyWithoutTarget_repositoryNestedInput
  }

  export type repositoryUncheckedUpdateManyWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    owner_user_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    is_private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    repoPath?: NullableStringFieldUpdateOperationsInput | string | null
    forked_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    forks_count?: NullableIntFieldUpdateOperationsInput | number | null
    pull_requests_count?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type repository_accessUpdateWithoutRepositoryInput = {
    access_level?: EnumRepositoryAccessFieldUpdateOperationsInput | $Enums.RepositoryAccess
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: usersUpdateOneRequiredWithoutRepository_accessNestedInput
  }

  export type repository_accessUncheckedUpdateWithoutRepositoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    access_level?: EnumRepositoryAccessFieldUpdateOperationsInput | $Enums.RepositoryAccess
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type repository_accessUncheckedUpdateManyWithoutRepositoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    access_level?: EnumRepositoryAccessFieldUpdateOperationsInput | $Enums.RepositoryAccess
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type issueUpdateWithoutRepositoryInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: usersUpdateOneWithoutIssueNestedInput
    issue_comment?: issue_commentUpdateManyWithoutIssueNestedInput
  }

  export type issueUncheckedUpdateWithoutRepositoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    issue_comment?: issue_commentUncheckedUpdateManyWithoutIssueNestedInput
  }

  export type issueUncheckedUpdateManyWithoutRepositoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type pull_requestUpdateWithoutRepositoryInput = {
    source_branch?: StringFieldUpdateOperationsInput | string
    target_branch?: StringFieldUpdateOperationsInput | string
    status?: EnumPullRequestStatusFieldUpdateOperationsInput | $Enums.PullRequestStatus
    merged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: usersUpdateOneWithoutPull_requestNestedInput
    source_repository?: repositoryUpdateOneRequiredWithoutSource_pull_requestsNestedInput
    target_repository?: repositoryUpdateOneRequiredWithoutTarget_pull_requestsNestedInput
    pull_request_comment?: pull_request_commentUpdateManyWithoutPull_requestNestedInput
  }

  export type pull_requestUncheckedUpdateWithoutRepositoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    source_branch?: StringFieldUpdateOperationsInput | string
    target_branch?: StringFieldUpdateOperationsInput | string
    status?: EnumPullRequestStatusFieldUpdateOperationsInput | $Enums.PullRequestStatus
    source_repository_id?: IntFieldUpdateOperationsInput | number
    target_repository_id?: IntFieldUpdateOperationsInput | number
    merged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    pull_request_comment?: pull_request_commentUncheckedUpdateManyWithoutPull_requestNestedInput
  }

  export type pull_requestUncheckedUpdateManyWithoutRepositoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    source_branch?: StringFieldUpdateOperationsInput | string
    target_branch?: StringFieldUpdateOperationsInput | string
    status?: EnumPullRequestStatusFieldUpdateOperationsInput | $Enums.PullRequestStatus
    source_repository_id?: IntFieldUpdateOperationsInput | number
    target_repository_id?: IntFieldUpdateOperationsInput | number
    merged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type pull_requestUpdateWithoutSource_repositoryInput = {
    source_branch?: StringFieldUpdateOperationsInput | string
    target_branch?: StringFieldUpdateOperationsInput | string
    status?: EnumPullRequestStatusFieldUpdateOperationsInput | $Enums.PullRequestStatus
    merged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUpdateOneRequiredWithoutPull_requestNestedInput
    author?: usersUpdateOneWithoutPull_requestNestedInput
    target_repository?: repositoryUpdateOneRequiredWithoutTarget_pull_requestsNestedInput
    pull_request_comment?: pull_request_commentUpdateManyWithoutPull_requestNestedInput
  }

  export type pull_requestUncheckedUpdateWithoutSource_repositoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    repository_id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    source_branch?: StringFieldUpdateOperationsInput | string
    target_branch?: StringFieldUpdateOperationsInput | string
    status?: EnumPullRequestStatusFieldUpdateOperationsInput | $Enums.PullRequestStatus
    target_repository_id?: IntFieldUpdateOperationsInput | number
    merged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    pull_request_comment?: pull_request_commentUncheckedUpdateManyWithoutPull_requestNestedInput
  }

  export type pull_requestUncheckedUpdateManyWithoutSource_repositoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    repository_id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    source_branch?: StringFieldUpdateOperationsInput | string
    target_branch?: StringFieldUpdateOperationsInput | string
    status?: EnumPullRequestStatusFieldUpdateOperationsInput | $Enums.PullRequestStatus
    target_repository_id?: IntFieldUpdateOperationsInput | number
    merged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type pull_requestUpdateWithoutTarget_repositoryInput = {
    source_branch?: StringFieldUpdateOperationsInput | string
    target_branch?: StringFieldUpdateOperationsInput | string
    status?: EnumPullRequestStatusFieldUpdateOperationsInput | $Enums.PullRequestStatus
    merged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    repository?: repositoryUpdateOneRequiredWithoutPull_requestNestedInput
    author?: usersUpdateOneWithoutPull_requestNestedInput
    source_repository?: repositoryUpdateOneRequiredWithoutSource_pull_requestsNestedInput
    pull_request_comment?: pull_request_commentUpdateManyWithoutPull_requestNestedInput
  }

  export type pull_requestUncheckedUpdateWithoutTarget_repositoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    repository_id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    source_branch?: StringFieldUpdateOperationsInput | string
    target_branch?: StringFieldUpdateOperationsInput | string
    status?: EnumPullRequestStatusFieldUpdateOperationsInput | $Enums.PullRequestStatus
    source_repository_id?: IntFieldUpdateOperationsInput | number
    merged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    pull_request_comment?: pull_request_commentUncheckedUpdateManyWithoutPull_requestNestedInput
  }

  export type pull_requestUncheckedUpdateManyWithoutTarget_repositoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    repository_id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    source_branch?: StringFieldUpdateOperationsInput | string
    target_branch?: StringFieldUpdateOperationsInput | string
    status?: EnumPullRequestStatusFieldUpdateOperationsInput | $Enums.PullRequestStatus
    source_repository_id?: IntFieldUpdateOperationsInput | number
    merged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type issue_commentCreateManyIssueInput = {
    id?: number
    author_id?: number | null
    content: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type issue_commentUpdateWithoutIssueInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: usersUpdateOneWithoutIssue_commentNestedInput
  }

  export type issue_commentUncheckedUpdateWithoutIssueInput = {
    id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type issue_commentUncheckedUpdateManyWithoutIssueInput = {
    id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type pull_request_commentCreateManyPull_requestInput = {
    id?: number
    author_id?: number | null
    content: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type pull_request_commentUpdateWithoutPull_requestInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: usersUpdateOneWithoutPull_request_commentNestedInput
  }

  export type pull_request_commentUncheckedUpdateWithoutPull_requestInput = {
    id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type pull_request_commentUncheckedUpdateManyWithoutPull_requestInput = {
    id?: IntFieldUpdateOperationsInput | number
    author_id?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}