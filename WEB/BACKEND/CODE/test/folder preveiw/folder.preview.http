@baseUrl = http://localhost:5000/v1/api/preview
# !!! IMPORTANT: Replace with a valid token obtained from sign-in/sign-up !!!
# The token below might be expired. Generate a fresh one before running tests.
@authToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjExLCJ1c2VybmFtZSI6ImRmYXNqZGZrIiwiaWF0IjoxNzQ2MDIwNjE4LCJleHAiOjE3NDg2MTI2MTh9.UZXsIKplB_QC11D4ymd40W1ov6MOI7ltvGjjISyEu1Y
@invalidAuthToken = invalid.token.value
@repoName = myte1.git
@sourceFolder = new-test-folder
@sourceFile = {{sourceFolder}}/new-test-file.txt
@renamedFolder = renamed-test-folder
@renamedFile = {{renamedFolder}}/renamed-test-file.txt
@nonExistentRepo = non-existent-repo.git
@nonExistentPath = non-existent-path.txt
@nonExistentFolder = non-existent-folder/

### ==================================================
### Setup: Clone Repository (Prerequisite for most tests)
### ==================================================

### Clone Repository - Success
POST {{baseUrl}}/clone/{{repoName}}
Content-Type: application/json
Authorization: Bearer {{authToken}}

### Clone Repository - Repo Not Found in Source
# Attempts to clone '{{nonExistentRepo}}'.
POST {{baseUrl}}/clone/{{nonExistentRepo}}
Content-Type: application/json
Authorization: Bearer {{authToken}}

### Clone Repository - Missing Repo Name
# Attempts to clone without specifying the repo name. (Route might not match)
POST {{baseUrl}}/clone/
Content-Type: application/json
Authorization: Bearer {{authToken}}

### Clone Repository - Unauthorized (No Token)
POST {{baseUrl}}/clone/{{repoName}}
Content-Type: application/json
# No Authorization header

### Clone Repository - Unauthorized (Invalid Token)
POST {{baseUrl}}/clone/{{repoName}}
Content-Type: application/json
Authorization: Bearer {{invalidAuthToken}}


### ==================================================
### Create Item (POST /item)
### ==================================================

### 1. Create Folder - Success
POST {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "relativePath": "teeeest.git/new-test-folder",
    "type": "folder"
}

### 2. Create File - Success
POST {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "relativePath": "teeeest.git/new-test-folder/new-test-file.txt",
    "type": "file",
    "content": "Initial content for the new file created via HTTP test."
}

### 3. Modify File Content - Success (New File)
PUT {{baseUrl}}/content
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "relativePath": "teeeest.git/new-test-folder/new-test-file.txt",
    "newContent": "This content has been modified by the HTTP test."
}

### 4. Rename File - Success
PATCH {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "relativePath": "{{repoName}}/{{sourceFile}}",
    "type": "file",
    "content": "Trying to overwrite."
}

### 5. Rename Folder - Success
PATCH {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "type": "folder"
}

### 6. Remove File - Success
DELETE {{baseUrl}}/item?relativePath=mytestrepo.git/renamed-test-folder/renamed-test-file.txt
Authorization: Bearer {{authToken}}

### 7. Remove Folder - Success
DELETE {{baseUrl}}/item?relativePath=mytestrepo.git/renamed-test-folder
Authorization: Bearer {{authToken}}

{
    "relativePath": "{{repoName}}/some-path-invalid-type",
    "type": "invalid",
    "content": "some content"
}

### Create Item - Missing Content for File (Should succeed with empty file)
POST {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "relativePath": "{{repoName}}/{{sourceFolder}}/empty-file.txt",
    "type": "file"
}

### Create Item - Path Traversal Attempt (Should Fail)
POST {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "relativePath": "../../../etc/passwd",
    "type": "file",
    "content": "hacked"
}

### Create Item - Unauthorized
POST {{baseUrl}}/item
Content-Type: application/json
# No Authorization header
{
    "relativePath": "{{repoName}}/unauth-create",
    "type": "folder"
}


### ==================================================
### Get Content (GET /content)
### ==================================================

### Get Content - Existing File Success
GET {{baseUrl}}/content?relativePath=mytestrepo.git/new-test-folder/new-test-file.txt
Authorization: Bearer {{authToken}}

### Get Content - Existing Directory Success
GET {{baseUrl}}/content?relativePath=mytestrepo.git/new-test-folder
Authorization: Bearer {{authToken}}

### Clone Repository - Repo Not Found
POST {{baseUrl}}/clone/non-existent-repo.git
Content-Type: application/json
Authorization: Bearer {{authToken}}

### Get Content - Path Not Found
GET {{baseUrl}}/content?relativePath=mytestrepo.git/non-existent-file.txt
Authorization: Bearer {{authToken}}

### Get Content - Missing Path Parameter
GET {{baseUrl}}/content
Authorization: Bearer {{authToken}}

### Create Item - Already Exists (Folder)
POST {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "relativePath": "{{repoName}}/{{sourceFile}}",
    "newContent": "This content has been modified by the HTTP test."
}

### Create Item - Missing Type
POST {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "relativePath": "{{repoName}}/{{sourceFile}}",
    "newContent": ""
}

### Modify File Content - File Not Found
PUT {{baseUrl}}/content
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "relativePath": "{{repoName}}/{{nonExistentPath}}",
    "newContent": "This won't be written"
}

### Modify File Content - Missing Parameters
PUT {{baseUrl}}/content
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "relativePath": "mytestrepo.git/renamed-test-folder/renamed-test-file.txt"
}

### Modify File Content - Path is Directory
# Attempts to modify 'mytestrepo.git/renamed-test-folder' as if it were a file.
PUT {{baseUrl}}/content
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "relativePath": "mytestrepo.git/renamed-test-folder",
    "newContent": "This should fail as it's a directory"
}

### Rename Item - Target Exists
# Attempts to rename 'mytestrepo.git/renamed-test-folder' to itself.
PATCH {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "oldRelativePath": "mytestrepo.git/renamed-test-folder",
    "newRelativePath": "mytestrepo.git/renamed-test-folder"
}

### Rename Item - Source Not Found
# Attempts to rename 'mytestrepo.git/non-existent-source'.
PATCH {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "oldRelativePath": "{{repoName}}/{{sourceFile}}",
    "newRelativePath": "{{repoName}}/{{renamedFile}}"
}

### 5. Rename Folder - Success
# Renames folder to '{{repoName}}/{{renamedFolder}}'. Assumes step 1 succeeded.
# Note: This moves the renamed file inside it too. The path becomes {{repoName}}/{{renamedFolder}}/{{renamedFile}}
PATCH {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "oldRelativePath": "{{repoName}}/{{sourceFolder}}",
    "newRelativePath": "{{repoName}}/{{renamedFolder}}"
}

### Rename Item - Target Exists (File)
# Create a dummy file first
POST {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}
{ "relativePath": "{{repoName}}/target-exists.txt", "type": "file", "content": "dummy" }

# Attempt to rename {{renamedFile}} (now at {{repoName}}/{{renamedFolder}}/{{renamedFile}}) to the existing file
PATCH {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "oldRelativePath": "{{repoName}}/{{renamedFolder}}/{{renamedFile}}", # Path after step 5
    "newRelativePath": "{{repoName}}/target-exists.txt"
}

### Rename Item - Target Exists (Folder)
# Create a dummy folder first
POST {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}
{ "relativePath": "{{repoName}}/target-folder-exists", "type": "folder" }

# Attempt to rename {{renamedFolder}} to the existing folder
PATCH {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "oldRelativePath": "{{repoName}}/{{renamedFolder}}",
    "newRelativePath": "{{repoName}}/target-folder-exists"
}

### Rename Item - Source Not Found (File)
# Attempts to rename '{{repoName}}/{{nonExistentPath}}'.
PATCH {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "oldRelativePath": "{{repoName}}/{{nonExistentPath}}",
    "newRelativePath": "{{repoName}}/some-new-name.txt"
}

### Rename Item - Source Not Found (Folder)
# Attempts to rename '{{repoName}}/{{nonExistentFolder}}'.
PATCH {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "oldRelativePath": "{{repoName}}/{{nonExistentFolder}}",
    "newRelativePath": "{{repoName}}/some-new-folder"
}

### Rename Item - Missing Old Path
PATCH {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "newRelativePath": "{{repoName}}/missing-old-path"
}

### Rename Item - Missing New Path
PATCH {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "oldRelativePath": "{{repoName}}/{{renamedFolder}}" # Path exists after step 5
}

### Rename Item - Path Traversal Attempt (Old Path - Should Fail)
PATCH {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "oldRelativePath": "../../../etc/passwd",
    "newRelativePath": "{{repoName}}/new-name"
}

### Rename Item - Path Traversal Attempt (New Path - Should Fail)
PATCH {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "oldRelativePath": "{{repoName}}/{{renamedFolder}}", # Path exists after step 5
    "newRelativePath": "../../../etc/passwd"
}

### Rename Item - Unauthorized
PATCH {{baseUrl}}/item
Content-Type: application/json
# No Authorization header
{
    "oldRelativePath": "{{repoName}}/{{renamedFolder}}",
    "newRelativePath": "{{repoName}}/unauth-rename"
}


### ==================================================
### Remove Item (DELETE /item)
### ==================================================

### 6. Remove File - Success
# Removes '{{repoName}}/{{renamedFolder}}/{{renamedFile}}'. Assumes steps 4 & 5 succeeded.
DELETE {{baseUrl}}/item?relativePath={{repoName}}/{{renamedFolder}}/{{renamedFile}}
Authorization: Bearer {{authToken}}

### 7. Remove Folder - Success
# Removes '{{repoName}}/{{renamedFolder}}'. Assumes step 5 succeeded.
DELETE {{baseUrl}}/item?relativePath={{repoName}}/{{renamedFolder}}
Authorization: Bearer {{authToken}}

### Remove Item - Not Found (File)
# Attempts to remove '{{repoName}}/{{nonExistentPath}}'.
DELETE {{baseUrl}}/item?relativePath={{repoName}}/{{nonExistentPath}}
Authorization: Bearer {{authToken}}

### Remove Item - Not Found (Folder - after removal)
# Attempts to remove '{{repoName}}/{{renamedFolder}}' again.
DELETE {{baseUrl}}/item?relativePath={{repoName}}/{{renamedFolder}}
Authorization: Bearer {{authToken}}

### Remove Item - Missing Path
# Attempts to remove an item without specifying the path.
DELETE {{baseUrl}}/item
Authorization: Bearer {{authToken}}

### Remove Item - Empty Path
DELETE {{baseUrl}}/item?relativePath=
Authorization: Bearer {{authToken}}

### Remove Item - Path Traversal Attempt (Should Fail)
DELETE {{baseUrl}}/item?relativePath=../../../etc/passwd
Authorization: Bearer {{authToken}}

### Remove Item - Unauthorized
DELETE {{baseUrl}}/item?relativePath={{repoName}}/target-exists.txt # Clean up file from rename test
# No Authorization header


### ==================================================
### Push Changes (POST /push/:repoName)
### ==================================================
# Note: These tests assume the previous operations resulted in changes.
# Re-clone and make a change if needed before running push tests.

### Push Changes - Setup: Make a change to push
# Create a file specifically for the push test
POST {{baseUrl}}/item
Content-Type: application/json
Authorization: Bearer {{authToken}}
{ "relativePath": "{{repoName}}/file-for-push.txt", "type": "file", "content": "Push me" }

### Push Changes - Success (Default Message)
# Pushes staged changes back to the source repository.
POST {{baseUrl}}/push/{{repoName}}
Content-Type: application/json
Authorization: Bearer {{authToken}}

### Push Changes - Setup: Make another change
PUT {{baseUrl}}/content
Content-Type: application/json
Authorization: Bearer {{authToken}}
{ "relativePath": "{{repoName}}/file-for-push.txt", "newContent": "Push me again" }

### Push Changes - Success (Custom Message)
POST {{baseUrl}}/push/{{repoName}}
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "commitMessage": "Committing changes via HTTP push test"
}

### Push Changes - No Changes to Commit (Should likely succeed but report no push needed or similar)
# Run push again immediately after a successful push.
POST {{baseUrl}}/push/{{repoName}}
Content-Type: application/json
Authorization: Bearer {{authToken}}

### Push Changes - Repo Not Found in Temp Workdir (Simulate by removing temp dir)
# This is hard to test reliably here without external setup (e.g., deleting the temp folder manually).
# Assuming clone failed or temp dir was removed:
# POST {{baseUrl}}/push/{{repoName}}
# ... (Expect 404 or similar based on service logic)

### Push Changes - Repo Not Found in Source (Hard to simulate)
# If the original source repo was deleted after cloning.
# POST {{baseUrl}}/push/{{repoName}}
# ... (Expect 500 or git error based on service logic)

### Push Changes - Missing Repo Name
POST {{baseUrl}}/push/
Content-Type: application/json
Authorization: Bearer {{authToken}}

### Push Changes - Unauthorized
POST {{baseUrl}}/push/{{repoName}}
Content-Type: application/json
# No Authorization header

### ==================================================
### Cleanup (Optional)
### ==================================================

### Cleanup: Remove test file created for push
DELETE {{baseUrl}}/item?relativePath={{repoName}}/file-for-push.txt
Authorization: Bearer {{authToken}}

### Cleanup: Remove other test artifacts if necessary
DELETE {{baseUrl}}/item?relativePath={{repoName}}/target-exists.txt
Authorization: Bearer {{authToken}}
DELETE {{baseUrl}}/item?relativePath={{repoName}}/target-folder-exists
Authorization: Bearer {{authToken}}
DELETE {{baseUrl}}/item?relativePath={{repoName}}/{{sourceFolder}}/empty-file.txt
Authorization: Bearer {{authToken}}

# Note: Removing the entire cloned repo from the temp directory is not directly
# supported by an API endpoint, it happens implicitly on the next clone.
