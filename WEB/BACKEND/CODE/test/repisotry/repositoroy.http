@baseUrl = http://localhost:5000/v1/api/repositories
@authToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInVzZXJuYW1lIjoiam9iIiwiaWF0IjoxNzQ2MDU0NjQyLCJleHAiOjE3NDg2NDY2NDJ9.12cEP63V0IpvVkiwUQYUUFBKafswsNE8H877AhcrwQY
@existingRepoId = 3
@nonExistentRepoId = 999
@repoIdToGet = 4 # Use an ID that exists for successful GET tests
@repoIdWithRelations = 8
@searchTermExists = test # Adjust if needed based on your data
@searchTermNotExists = xyznonexistentxyz

### Get All Repositories - Success (No Filter)
GET {{baseUrl}}
Authorization: Bearer {{authToken}}

### Get All Repositories - Success (With Search Filter - Found)
GET {{baseUrl}}?search={{searchTermExists}}
Authorization: Bearer {{authToken}}

### Get All Repositories - Success (With Search Filter - Not Found)
GET {{baseUrl}}?search={{searchTermNotExists}}
Authorization: Bearer {{authToken}}

### Get All Repositories - Unauthorized
GET {{baseUrl}}

### Get Repository by ID - Success
GET {{baseUrl}}/{{repoIdToGet}}
Authorization: Bearer {{authToken}}

### Get Repository by ID - Include Owner Relation
GET {{baseUrl}}/{{repoIdWithRelations}}?relations=owner
Authorization: Bearer {{authToken}}

### Get Repository by ID - Include Multiple Relations (Owner, Issues, Access)
GET {{baseUrl}}/{{repoIdWithRelations}}?relations=owner,issues,access,forks
Authorization: Bearer {{authToken}}

### Get Repository by ID - Include Invalid Relation Name
GET {{baseUrl}}/{{repoIdWithRelations}}?relations=owner,invalidRelationName
Authorization: Bearer {{authToken}}

### Get Repository by ID - Not Found
GET {{baseUrl}}/{{nonExistentRepoId}}
Authorization: Bearer {{authToken}}

### Get Repository by ID - Invalid ID Format
GET {{baseUrl}}/invalid-id
Authorization: Bearer {{authToken}}

### Get Repository by ID - Unauthorized
GET {{baseUrl}}/{{repoIdToGet}}

### Create Repository - Success
POST {{baseUrl}}
Content-Type: application/json
Authorization: Bearer {{authToken}}

{

    "name": "mytestrepo2",
    "description": "This is a test repository",
    "is_private": false
}

### Create Repository - Missing Required Fields
POST {{baseUrl}}
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "description": "Missing required fields"
}

### Create Repository - Unauthorized (No Token)
POST {{baseUrl}}
Content-Type: application/json

{
    "repoName": "test-repo",
    "name": "Test Repository"
}

### Update Repository - Success
PUT {{baseUrl}}/{{existingRepoId}}
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "name": "Updated Repository Name",
    "description": "Updated repository description",
    "is_private": true
}

### Update Repository - Not Found
PUT {{baseUrl}}/{{nonExistentRepoId}}
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "name": "This Won't Work",
    "description": "Repository doesn't exist"
}

### Update Repository - Validation Error
PUT {{baseUrl}}/{{existingRepoId}}
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
    "name": ""
}

### Update Repository - Unauthorized
PUT {{baseUrl}}/{{existingRepoId}}
Content-Type: application/json

{
    "name": "Unauthorized Update"
}

### Delete Repository - Success
DELETE {{baseUrl}}/{{existingRepoId}}
Authorization: Bearer {{authToken}}

### Delete Repository - Not Found
DELETE {{baseUrl}}/{{nonExistentRepoId}}
Authorization: Bearer {{authToken}}

### Delete Repository - Unauthorized
DELETE {{baseUrl}}/{{existingRepoId}}

### Fork Repository - Success
POST {{baseUrl}}/{{existingRepoId}}/fork
Authorization: Bearer {{authToken}}

### Fork Repository - Source Not Found
POST {{baseUrl}}/{{nonExistentRepoId}}/fork
Authorization: Bearer {{authToken}}

### Fork Repository - Name Conflict (Response code 409)
# This assumes you already have a repository with the same name
POST {{baseUrl}}/{{existingRepoId}}/fork
Authorization: Bearer {{authToken}}

### Fork Repository - Unauthorized
POST {{baseUrl}}/{{existingRepoId}}/fork
