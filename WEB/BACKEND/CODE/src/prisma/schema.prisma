generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id            Int                 @id @default(autoincrement()) @db.Integer
  username      String              @unique @db.VarChar(50)
  email         String              @unique @db.VarChar(100)
  password_hash String              @db.Text
  bio           String?             @db.Text
  gitCliPassword String?            @db.Text



  
  avatar_path    String?             @db.VarChar(255)
  is_admin      Boolean?            @default(false) @db.Boolean
  created_at    DateTime            @default(now()) @db.Timestamp(6)
  updated_at    DateTime            @default(now()) @updatedAt @db.Timestamp(6)
  repository    repository[]
  repository_access repository_access[]
  issue         issue[]
  pull_request  pull_request[]
  issue_comment issue_comment[]
  pull_request_comment pull_request_comment[]
}

model repository {
  id                Int                  @id @default(autoincrement()) @db.Integer
  name              String               @db.VarChar(255)
  owner_user_id     Int                  @db.Integer
  description       String?              @db.Text
  is_private        Boolean?             @default(false) @db.Boolean
  parent_id         Int?                 @db.Integer      // Field to track the parent repository if this is a fork
  forked_at         DateTime?            @db.Timestamp(6) // When this repository was forked (if it is a fork)
  created_at        DateTime             @default(now()) @db.Timestamp(6)
  updated_at        DateTime             @default(now()) @updatedAt @db.Timestamp(6)

  // Foreign key relationships
  owner             users                @relation(fields: [owner_user_id], references: [id], onDelete: Cascade)
  parent            repository?          @relation("ForkRelation", fields: [parent_id], references: [id], onDelete: SetNull)
  forks             repository[]         @relation("ForkRelation")

  // Relations to other models
  access            repository_access[]
  issue             issue[]
  pull_request      pull_request[] // Default relation for repository_id
  source_pull_requests pull_request[] @relation("SourceRepository") // Relation for source_repository_id
  target_pull_requests pull_request[] @relation("TargetRepository") // Relation for target_repository_id
}

model repository_access {
  id            Int        @id @default(autoincrement()) @db.Integer
  repository_id Int        @db.Integer
  user_id       Int        @db.Integer
  access_level  RepositoryAccess  
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @updatedAt @db.Timestamp(6)

  // Foreign key relationships
  repository    repository @relation(fields: [repository_id], references: [id], onDelete: Cascade)
  user          users      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([repository_id, user_id])
}

model issue {
  id            Int             @id @default(autoincrement()) @db.Integer
  repository_id Int             @db.Integer
  author_id     Int?            @db.Integer
  title         String          @db.VarChar(255)
  description   String?         @db.Text
  status        String          @db.VarChar(20)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @updatedAt @db.Timestamp(6)

  // Foreign key relationships
  repository    repository      @relation(fields: [repository_id], references: [id], onDelete: Cascade)
  author        users?          @relation(fields: [author_id], references: [id], onDelete: SetNull)

  // Relations to other models
  issue_comment issue_comment[]
}

model pull_request {
  id                  Int                  @id @default(autoincrement()) @db.Integer
  repository_id       Int                  @db.Integer
  author_id           Int?                 @db.Integer
  source_branch       String               @db.VarChar(255)
  target_branch       String               @db.VarChar(255)
  status              PullRequestStatus    @default(OPEN)
  source_repository_id Int                 @db.Integer
  target_repository_id Int                 @db.Integer
  merged_at           DateTime?            @db.Timestamp(6)
  created_at          DateTime             @default(now()) @db.Timestamp(6)
  updated_at          DateTime             @default(now()) @updatedAt @db.Timestamp(6)

  // Foreign key relationships
  repository          repository           @relation(fields: [repository_id], references: [id], onDelete: Cascade)
  author              users?               @relation(fields: [author_id], references: [id], onDelete: SetNull)
  source_repository   repository           @relation("SourceRepository", fields: [source_repository_id], references: [id], onDelete: Restrict)
  target_repository   repository           @relation("TargetRepository", fields: [target_repository_id], references: [id], onDelete: Restrict)

  // Relations to other models
  pull_request_comment pull_request_comment[]
}

model issue_comment {
  id         Int      @id @default(autoincrement()) @db.Integer
  issue_id   Int      @db.Integer
  author_id  Int?     @db.Integer
  content    String   @db.Text
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp(6)

  // Foreign key relationships
  issue      issue    @relation(fields: [issue_id], references: [id], onDelete: Cascade)
  author     users?   @relation(fields: [author_id], references: [id], onDelete: SetNull)
}

model pull_request_comment {
  id              Int           @id @default(autoincrement()) @db.Integer
  pull_request_id Int           @db.Integer
  author_id       Int?          @db.Integer
  content         String        @db.Text
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @updatedAt @db.Timestamp(6)

  // Foreign key relationships
  pull_request    pull_request  @relation(fields: [pull_request_id], references: [id], onDelete: Cascade)
  author          users?        @relation(fields: [author_id], references: [id], onDelete: SetNull)
}

enum RepositoryAccess {
  view
  edit
}

enum PullRequestStatus {
  OPEN
  CLOSED
  MERGED
}